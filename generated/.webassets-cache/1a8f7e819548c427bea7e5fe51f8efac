V// source: plugin/octolapse/js/octolapse.settings.main.js\u000a/*\u000a##################################################################################\u000a# Octolapse - A plugin for OctoPrint used for making stabilized timelapse videos.\u000a# Copyright (C) 2017  Brad Hochgesang\u000a##################################################################################\u000a# This program is free software: you can redistribute it and/or modify\u000a# it under the terms of the GNU Affero General Public License as published\u000a# by the Free Software Foundation, either version 3 of the License, or\u000a# (at your option) any later version.\u000a#\u000a# This program is distributed in the hope that it will be useful,\u000a# but WITHOUT ANY WARRANTY; without even the implied warranty of\u000a# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\u000a# GNU Affero General Public License for more details.\u000a#\u000a# You should have received a copy of the GNU Affero General Public License\u000a# along with this program.  If not, see the following:\u000a# https://github.com/FormerLurker/Octolapse/blob/master/LICENSE\u000a#\u000a# You can contact the author either through the git-hub repository, or at the\u000a# following email address: FormerLurker@pm.me\u000a##################################################################################\u000a*/\u000a$(function () {\u000a\u000a    Octolapse.MainSettingsViewModel = function (parameters) {\u000a        // Create a reference to this object\u000a        var self = this;\u000a\u000a        // Add this object to our Octolapse namespace\u000a        Octolapse.SettingsMain = this;\u000a        // Assign the Octoprint settings to our namespace\u000a        self.global_settings = parameters[0];\u000a\u000a        // Settings values\u000a        self.is_octolapse_enabled = ko.observable();\u000a        self.auto_reload_latest_snapshot = ko.observable();\u000a        self.auto_reload_frames = ko.observable();\u000a        self.show_navbar_icon = ko.observable();\u000a        self.show_navbar_when_not_printing = ko.observable();\u000a        self.show_real_snapshot_time = ko.observable();\u000a        self.cancel_print_on_startup_error = ko.observable();\u000a        self.show_position_state_changes = ko.observable();\u000a        self.show_position_changes = ko.observable();\u000a        self.show_extruder_state_changes = ko.observable();\u000a        self.show_trigger_state_changes = ko.observable();\u000a\u000a\u000a        // Informational Values\u000a        self.platform = ko.observable();\u000a\u000a\u000a        self.onBeforeBinding = function () {\u000a\u000a        };\u000a        // Get the dialog element\u000a        self.onAfterBinding = function () {\u000a\u000a\u000a\u000a        };\u000a        /*\u000a            Show and hide the settings tabs based on the enabled parameter\u000a        */\u000a        self.setSettingsVisibility = function (isVisible) {\u000a\u000a            var octolapseSettings = $('#octolapse_settings');\u000a\u000a            if (isVisible) {\u000a                //console.log("Showing Settings")\u000a            }\u000a\u000a            else {\u000a                //console.log("Hiding settings")\u000a                octolapseSettings.find('div.tab-content .hide-disabled').each(function (index, element) {\u000a                    // Clear any active tabs\u000a                    $(element).removeClass('active');\u000a                });\u000a            }\u000a            octolapseSettings.find('ul.nav .hide-disabled').each(function (index, element) {\u000a                if (isVisible)\u000a                    $(element).show();\u000a                else\u000a                    $(element).hide();\u000a                $(element).removeClass('active');\u000a            });\u000a\u000a        };\u000a\u000a        self.update = function (settings) {\u000a            self.is_octolapse_enabled(settings.is_octolapse_enabled);\u000a            self.auto_reload_latest_snapshot(settings.auto_reload_latest_snapshot);\u000a            self.auto_reload_frames(settings.auto_reload_frames);\u000a            self.show_navbar_icon(settings.show_navbar_icon);\u000a            self.show_navbar_when_not_printing(settings.show_navbar_when_not_printing);\u000a            self.show_position_state_changes(settings.show_position_state_changes);\u000a            self.show_position_changes(settings.show_position_changes);\u000a            self.show_extruder_state_changes(settings.show_extruder_state_changes);\u000a            self.show_trigger_state_changes(settings.show_trigger_state_changes);\u000a            self.show_real_snapshot_time(settings.show_real_snapshot_time);\u000a            self.cancel_print_on_startup_error(settings.cancel_print_on_startup_error);\u000a            //self.platform(settings.platform());\u000a\u000a\u000a            // Set the tab-button/tab visibility\u000a            self.setSettingsVisibility(settings.is_octolapse_enabled);\u000a        };\u000a\u000a        self.toggleOctolapse = function(){\u000a\u000a            var previousEnabledValue = !Octolapse.Globals.enabled();\u000a            var data = {\u000a                "is_octolapse_enabled": Octolapse.Globals.enabled()\u000a            };\u000a            //console.log("Toggling octolapse.")\u000a            $.ajax({\u000a                url: "./plugin/octolapse/setEnabled",\u000a                type: "POST",\u000a                data: JSON.stringify(data),\u000a                contentType: "application/json",\u000a                dataType: "json",\u000a                success: function () {\u000a\u000a                },\u000a                error: function (XMLHttpRequest, textStatus, errorThrown) {\u000a                    alert("Unable to enable/disable Octolapse.  Status: " + textStatus + ".  Error: " + errorThrown);\u000a                    Octolapse.Globals.enabled(previousEnabledValue);\u000a                }\u000a            });\u000a            return true;\u000a        }\u000a\u000a        self.showEditMainSettingsPopup = function () {\u000a            //console.log("showing main settings")\u000a            self.is_octolapse_enabled(Octolapse.Globals.enabled());\u000a            self.auto_reload_latest_snapshot(Octolapse.Globals.auto_reload_latest_snapshot());\u000a            self.auto_reload_frames(Octolapse.Globals.auto_reload_frames());\u000a            self.show_navbar_icon(Octolapse.Globals.navbar_enabled());\u000a            self.show_navbar_when_not_printing(Octolapse.Globals.show_navbar_when_not_printing());\u000a            self.show_position_state_changes(Octolapse.Globals.show_position_state_changes());\u000a            self.show_position_changes(Octolapse.Globals.show_position_changes());\u000a            self.show_extruder_state_changes(Octolapse.Globals.show_extruder_state_changes());\u000a            self.show_trigger_state_changes(Octolapse.Globals.show_trigger_state_changes());\u000a            self.show_real_snapshot_time(Octolapse.Globals.show_real_snapshot_time());\u000a            self.cancel_print_on_startup_error(Octolapse.Globals.cancel_print_on_startup_error())\u000a            var dialog = this;\u000a            dialog.$editDialog = $("#octolapse_edit_settings_main_dialog");\u000a            dialog.$editForm = $("#octolapse_edit_main_settings_form");\u000a            dialog.$cancelButton = $("a.cancel", dialog.$addEditDialog);\u000a            dialog.$saveButton = $("a.save", dialog.$addEditDialog);\u000a            dialog.$defaultButton = $("a.set-defaults", dialog.$addEditDialog);\u000a            dialog.$summary = dialog.$editForm.find("#edit_validation_summary");\u000a            dialog.$errorCount = dialog.$summary.find(".error-count");\u000a            dialog.$errorList = dialog.$summary.find("ul.error-list");\u000a            dialog.$modalBody = dialog.$editDialog.find(".modal-body");\u000a            dialog.rules = {\u000a                rules: Octolapse.MainSettingsValidationRules.rules,\u000a                messages: Octolapse.MainSettingsValidationRules.messages,\u000a                ignore: ".ignore_hidden_errors:hidden",\u000a                errorPlacement: function (error, element) {\u000a                    var $field_error = $(element).parent().parent().find(".error_label_container");\u000a                    $field_error.html(error);\u000a                    $field_error.removeClass("checked");\u000a\u000a                },\u000a                highlight: function (element, errorClass) {\u000a                    //$(element).parent().parent().addClass(errorClass);\u000a                    var $field_error = $(element).parent().parent().find(".error_label_container");\u000a                    $field_error.removeClass("checked");\u000a                    $field_error.addClass(errorClass);\u000a                },\u000a                unhighlight: function (element, errorClass) {\u000a                    //$(element).parent().parent().removeClass(errorClass);\u000a                    var $field_error = $(element).parent().parent().find(".error_label_container");\u000a                    $field_error.addClass("checked");\u000a                    $field_error.removeClass(errorClass);\u000a                },\u000a                invalidHandler: function () {\u000a                    dialog.$errorCount.empty();\u000a                    dialog.$summary.show();\u000a                    var numErrors = dialog.validator.numberOfInvalids();\u000a                    if (numErrors === 1)\u000a                        dialog.$errorCount.text("1 field is invalid");\u000a                    else\u000a                        dialog.$errorCount.text(numErrors + " fields are invalid");\u000a                },\u000a                errorContainer: "#edit_validation_summary",\u000a                success: function (label) {\u000a                    label.html("&nbsp;");\u000a                    label.parent().addClass('checked');\u000a                    $(label).parent().parent().parent().removeClass('error');\u000a                },\u000a                onfocusout: function (element, event) {\u000a                    dialog.validator.form();\u000a                }\u000a            };\u000a            dialog.validator = null;\u000a            //console.log("Adding validator to main setting dialog.")\u000a            dialog.$editDialog.on("hidden.bs.modal", function () {\u000a                // Clear out error summary\u000a                dialog.$errorCount.empty();\u000a                dialog.$errorList.empty();\u000a                dialog.$summary.hide();\u000a                // Destroy the validator if it exists, both to save on resources, and to clear out any leftover junk.\u000a                if (dialog.validator != null) {\u000a                    dialog.validator.destroy();\u000a                    dialog.validator = null;\u000a                }\u000a            });\u000a            dialog.$editDialog.on("shown.bs.modal", function () {\u000a                // Create all of the validation rules\u000a\u000a                dialog.validator = dialog.$editForm.validate(dialog.rules);\u000a\u000a                // Remove any click event bindings from the cancel button\u000a                dialog.$cancelButton.unbind("click");\u000a                // Called when the user clicks the cancel button in any add/update dialog\u000a                dialog.$cancelButton.bind("click", function () {\u000a                    // Hide the dialog\u000a                    self.$editDialog.modal("hide");\u000a                });\u000a\u000a                // remove any click event bindings from the defaults button\u000a                dialog.$defaultButton.unbind("click");\u000a                dialog.$defaultButton.bind("click", function () {\u000a                    // Set the options to the current settings\u000a                    self.is_octolapse_enabled(true);\u000a                    self.auto_reload_latest_snapshot(true);\u000a                    self.auto_reload_frames(5);\u000a                    self.show_navbar_icon(true);\u000a                    self.show_navbar_when_not_printing(false);\u000a                    self.show_position_state_changes(false);\u000a                    self.show_position_changes(false);\u000a                    self.show_extruder_state_changes(false);\u000a                    self.show_trigger_state_changes(false);\u000a\u000a                });\u000a\u000a                // Remove any click event bindings from the save button\u000a                dialog.$saveButton.unbind("click");\u000a                // Called when a user clicks the save button on any add/update dialog.\u000a                dialog.$saveButton.bind("click", function ()\u000a                {\u000a                    if (dialog.$editForm.valid()) {\u000a                        // the form is valid, add or update the profile\u000a                        var data = {\u000a                            "is_octolapse_enabled": self.is_octolapse_enabled()\u000a                            , "auto_reload_latest_snapshot": self.auto_reload_latest_snapshot()\u000a                            , "auto_reload_frames": self.auto_reload_frames()\u000a                            , "show_navbar_icon": self.show_navbar_icon()\u000a                            , "show_navbar_when_not_printing": self.show_navbar_when_not_printing()\u000a                            , "show_position_state_changes": self.show_position_state_changes()\u000a                            , "show_position_changes": self.show_position_changes()\u000a                            , "show_extruder_state_changes": self.show_extruder_state_changes()\u000a                            , "show_trigger_state_changes": self.show_trigger_state_changes()\u000a                            , "show_real_snapshot_time": self.show_real_snapshot_time()\u000a                            , "cancel_print_on_startup_error": self.cancel_print_on_startup_error()\u000a                            , "client_id": Octolapse.Globals.client_id\u000a                        };\u000a                        //console.log("Saving main settings.")\u000a                        $.ajax({\u000a                            url: "./plugin/octolapse/saveMainSettings",\u000a                            type: "POST",\u000a                            data: JSON.stringify(data),\u000a                            contentType: "application/json",\u000a                            dataType: "json",\u000a                            success: function () {\u000a                                self.$editDialog.modal("hide");\u000a                            },\u000a                            error: function (XMLHttpRequest, textStatus, errorThrown) {\u000a                                alert("Unable to save the main settings.  Status: " + textStatus + ".  Error: " + errorThrown);\u000a                            }\u000a                        });\u000a                    }\u000a                    else\u000a                    {\u000a                        // Search for any hidden elements that are invalid\u000a                        //console.log("Checking ofr hidden field error");\u000a                        var $fieldErrors = dialog.$editForm.find('.error_label_container.error');\u000a                        $fieldErrors.each(function (index, element) {\u000a                            // Check to make sure the field is hidden.  If it's not, don't bother showing the parent container.\u000a                            // This can happen if more than one field is invalid in a hidden form\u000a                            var $errorContainer = $(element);\u000a                            if (!$errorContainer.is(":visible")) {\u000a                                //console.log("Hidden error found, showing");\u000a                                var $collapsableContainer = $errorContainer.parents(".collapsible");\u000a                                if ($collapsableContainer.length > 0)\u000a                                    // The containers may be nested, show each\u000a                                    $collapsableContainer.each(function (index, container) {\u000a                                        //console.log("Showing the collapsed container");\u000a                                        $(container).show();\u000a                                    });\u000a                            }\u000a\u000a                        });\u000a\u000a                        // The form is invalid, add a shake animation to inform the user\u000a                        $(dialog.$editDialog).addClass('shake');\u000a                        // set a timeout so the dialog stops shaking\u000a                        setTimeout(function () { $(dialog.$editDialog).removeClass('shake'); }, 500);\u000a                    }\u000a\u000a                });\u000a            });\u000a\u000a\u000a            dialog.$editDialog.modal();\u000a        };\u000a\u000a        Octolapse.MainSettingsValidationRules = {\u000a            rules: {\u000a\u000a            },\u000a            messages: {\u000a\u000a            }\u000a        };\u000a    };\u000a    // Bind the settings view model to the plugin settings element\u000a    OCTOPRINT_VIEWMODELS.push([\u000a        Octolapse.MainSettingsViewModel\u000a        , ["settingsViewModel"]\u000a        , ["#octolapse_main_tab"]\u000a    ]);\u000a});\u000a\u000a\u000a;\u000a
p0
.