V// source: plugin/PrintTimeGenius/js/PrintTimeGenius.js\u000a/*\u000a * View model for OctoPrint-PrintTimeGenius\u000a *\u000a * Author: Eyal\u000a * License: AGPLv3\u000a */\u000a$(function() {\u000a  function PrintTimeGeniusViewModel(parameters) {\u000a    var self = this;\u000a\u000a    self.settingsViewModel = parameters[0];\u000a    self.printerStateViewModel = parameters[1];\u000a    self.filesViewModel = parameters[2];\u000a    self.selectedGcodes = ko.observable();\u000a    self.print_history = ko.observableArray();\u000a    self.settings_visible = ko.observable(false);\u000a    self.version = undefined;\u000a\u000a    // Overwrite the printTimeLeftOriginString function\u000a    ko.extenders.addGenius = function(target, option) {\u000a      let result = ko.pureComputed(function () {\u000a        let value = self.printerStateViewModel.printTimeLeftOrigin();\u000a        switch (value) {\u000a          case "genius": {\u000a            return option;\u000a          }\u000a          default: {\u000a            return target();\u000a          }\u000a        }\u000a      })\u000a      return result;\u000a    };\u000a    self.original_processProgressData = self.printerStateViewModel._processProgressData;\u000a    self.printerStateViewModel._processProgressData = function(data) {\u000a      self.original_processProgressData(data);\u000a      if (data.printTimeLeft) {\u000a        self.printerStateViewModel.progress(\u000a            (data.printTime||0) /\u000a              ((data.printTime||0) + (data.printTimeLeft))\u000a              * 100);\u000a      }\u000a    };\u000a    self.printerStateViewModel.printTimeLeftOriginString =\u000a        self.printerStateViewModel.printTimeLeftOriginString.extend({\u000a          addGenius: gettext("Based on a line-by-line preprocessing of the gcode (good accuracy)")});\u000a\u000a    // Overwrite the printTimeLeftOriginClass function\u000a    self.originalPrintTimeLeftOriginClass = self.printerStateViewModel.printTimeLeftOriginClass;\u000a    self.printerStateViewModel.printTimeLeftOriginClass = ko.pureComputed(function() {\u000a      let value = self.printerStateViewModel.printTimeLeftOrigin();\u000a      switch (value) {\u000a        case "genius": {\u000a          return "print-time-genius";\u000a        }\u000a        default: {\u000a          return self.originalPrintTimeLeftOriginClass();\u000a        }\u000a      }\u000a    });\u000a    self.printerStateViewModel.printTimeLeftOrigin.valueHasMutated();\u000a\u000a    self.theFiles = function(items) {\u000a    	let results = [];\u000a    	let queue = [{children: items}];\u000a\u000a    	while (queue.length > 0) {\u000a    		item = queue.shift();\u000a    		results.push(...item.children.filter(item => item["type"] == "machinecode"));\u000a    		queue.push(...item.children.filter(item => "children" in item));\u000a    	}\u000a    	return results;\u000a    };\u000a\u000a    self.FileList = ko.pureComputed(function() {\u000a        // only compute FileList when settings is visible\u000a        if (!self.settings_visible()) {\u000a            return [];\u000a        }\u000a        return self.theFiles(self.filesViewModel.allItems())\u000a            .sort(function(a,b) {\u000a                if (_.has(a, "gcodeAnalysis.progress") != _.has(b, "gcodeAnalysis.progress")) {\u000a                    return (_.has(a, "gcodeAnalysis.progress") - _.has(b, "gcodeAnalysis.progress"));\u000a                }\u000a                return a.path.localeCompare(b.path);\u000a            });\u000a    });\u000a\u000a    self.onSettingsShown = function() {\u000a        self.settings_visible(true);\u000a    };\u000a\u000a    self.onSettingsHidden = function() {\u000a        self.settings_visible(false);\u000a    };\u000a\u000a    self.analyzeCurrentFile = function () {\u000a      let items = self.selectedGcodes();\u000a      for (let item of items) {\u000a        let gcode = item["origin"] + "/" + item["path"];\u000a        url = OctoPrint.getBlueprintUrl("PrintTimeGenius") + "analyze/" + gcode;\u000a        OctoPrint.get(url)\u000a      }\u000a    }\u000a\u000a    self.onBeforeBinding = function() {\u000a      let settings = self.settingsViewModel.settings;\u000a      let printTimeGeniusSettings = settings.plugins.PrintTimeGenius;\u000a      self.analyzers = printTimeGeniusSettings.analyzers;\u000a      self.exactDurations = printTimeGeniusSettings.exactDurations;\u000a      self.enableOctoPrintAnalyzer = printTimeGeniusSettings.enableOctoPrintAnalyzer;\u000a      self.allowAnalysisWhilePrinting = printTimeGeniusSettings.allowAnalysisWhilePrinting;\u000a      self.allowAnalysisWhileHeating = printTimeGeniusSettings.allowAnalysisWhileHeating;\u000a      OctoPrint.get(OctoPrint.getBlueprintUrl("PrintTimeGenius") + "print_history")\u000a          .done(function (print_history) {\u000a            self.version = print_history['version'];\u000a            self.print_history(ko.mapping.fromJS(print_history['print_history'])());\u000a          });\u000a      self.print_history.subscribe(function (newValue) {\u000a        if (!newValue) {\u000a          return;\u000a        }\u000a        let to_write = {\u000a          'print_history': ko.mapping.toJS(newValue),\u000a          'version': self.version\u000a        };\u000a        OctoPrint.postJson(OctoPrint.getBlueprintUrl("PrintTimeGenius") + "print_history",\u000a                           to_write);\u000a      });\u000a      // Overwrite the formatFuzzyPrintTime as needed.\u000a      self.originalFormatFuzzyPrintTime = formatFuzzyPrintTime;\u000a      formatFuzzyPrintTime = function() {\u000a        if (self.exactDurations()) {\u000a          return formatDuration.apply(null, arguments);\u000a        } else {\u000a          return self.originalFormatFuzzyPrintTime.apply(null, arguments);\u000a        }\u000a      }\u000a\u000a      self.exactDurations.subscribe(function (newValue) {\u000a        self.printerStateViewModel.estimatedPrintTime.valueHasMutated();\u000a        self.printerStateViewModel.lastPrintTime.valueHasMutated();\u000a        self.printerStateViewModel.printTimeLeft.valueHasMutated();\u000a      });\u000a      // Force an update because this is called after the format function has already run.\u000a      self.exactDurations.valueHasMutated();\u000a      self.originalGetSuccessClass = self.filesViewModel.getSuccessClass;\u000a      self.filesViewModel.getSuccessClass = function(data) {\u000a        let additional_css = "";\u000a        if (_.get(data, "gcodeAnalysis.analysisPending", false)) {\u000a          additional_css = " print-time-genius-pending";\u000a        } else if (_.has(data, "gcodeAnalysis.progress")) {\u000a          additional_css = " print-time-genius-after";\u000a        }\u000a        return self.originalGetSuccessClass(data) + additional_css;\u000a      };\u000a      self.filesViewModel.requestData({force: true}); // So that the file list is updated with the changes above.\u000a    }\u000a\u000a    self.addAnalyzer = function() {\u000a      self.analyzers.push({command: "", enabled: true});\u000a    }\u000a\u000a    self.removeAnalyzer = function(analyzer) {\u000a      self.analyzers.remove(analyzer);\u000a    }\u000a    self.removePrintHistoryRow = function(row) {\u000a      self.print_history.remove(row);\u000a    }\u000a    self.resetAnalyzersToDefault = function() {\u000a      OctoPrint.get(OctoPrint.getBlueprintUrl("PrintTimeGenius") + "get_settings_defaults").done(\u000a          function (defaults) {\u000a            self.analyzers(defaults['analyzers']);\u000a          });\u000a    }\u000a  }\u000a\u000a  /* view model class, parameters for constructor, container to bind to\u000a   * Please see http://docs.octoprint.org/en/master/plugins/viewmodels.html#registering-custom-viewmodels for more details\u000a   * and a full list of the available options.\u000a   */\u000a  OCTOPRINT_VIEWMODELS.push({\u000a    construct: PrintTimeGeniusViewModel,\u000a    // ViewModels your plugin depends on, e.g. loginStateViewModel, settingsViewModel, ...\u000a    dependencies: ["settingsViewModel", "printerStateViewModel", "filesViewModel"],\u000a    // Elements to bind to, e.g. #settings_plugin_PrintTimeGenius, #tab_plugin_PrintTimeGenius, ...\u000a    elements: [ "#settings_plugin_PrintTimeGenius" ]\u000a  });\u000a});\u000a\u000a;\u000a
p0
.