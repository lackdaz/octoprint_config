V// source: plugin/octolapse/js/octolapse.profiles.printer.slicer.cura.js\u000aOctolapse.create_cura_viewmodel = function (profile_observables) {\u000a    var self = this;\u000a    self.get_axis_speed_display_units = function () {\u000a        return 'mm-sec';\u000a    };\u000a    self.get_speed_tolerance = function () {\u000a        // tolerance of 0.1 mm/min / 2\u000a        return 0.1 / 60.0 / 2;\u000a    };\u000a\u000a    self.round_to_increment_mm_min = 0.00000166667;\u000a    self.round_to_increment_mm_sec = 0.0001;\u000a    self.round_to_increment_length = 0.0001;\u000a    self.round_to_increment_num_layers = 1;\u000a\u000a    self.rounding_extender_options = {\u000a        axis_speed_unit:{\u000a            round_to_increment_mm_min: self.round_to_increment_mm_min,\u000a            round_to_increment_mm_sec:self.round_to_increment_mm_sec,\u000a            current_units_observable: self.get_axis_speed_display_units}};\u000a    // Options for the round_to_increment extender for lengths\u000a    self.round_to_increment_options_lengths = {\u000a        round_to_increment:{round_to_increment: self.round_to_increment_length}\u000a    };\u000a    self.round_to_increment_options_num_layers = {\u000a        round_to_increment:{round_to_increment: self.round_to_increment_num_layers}\u000a    };\u000a\u000a\u000a    // Initialize profile variables from observables\u000a    self.retraction_distance = ko.observable(profile_observables.retract_length).extend(self.round_to_increment_options_lengths);\u000a    self.z_hop_height = ko.observable(profile_observables.z_hop).extend(self.round_to_increment_options_lengths);\u000a\u000a    self.retraction_retract_speed = ko.observable(\u000a        Octolapse.convertAxisSpeedUnit(profile_observables.retract_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)).extend(self.rounding_extender_options);\u000a\u000a    self.retraction_prime_speed = ko.observable(\u000a        Octolapse.convertAxisSpeedUnit(profile_observables.detract_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)).extend(self.rounding_extender_options);\u000a    self.travel_speed = ko.observable(\u000a        Octolapse.convertAxisSpeedUnit(profile_observables.movement_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)).extend(self.rounding_extender_options);\u000a    self.inner_wall_speed = ko.observable(\u000a        Octolapse.convertAxisSpeedUnit(profile_observables.perimeter_speed,self.get_axis_speed_display_units(),profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)).extend(self.rounding_extender_options);\u000a    self.outer_wall_speed = ko.observable(\u000a        Octolapse.convertAxisSpeedUnit(profile_observables.external_perimeter_speed,self.get_axis_speed_display_units(),profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)).extend(self.rounding_extender_options);\u000a    self.top_bottom_speed = ko.observable(\u000a        Octolapse.convertAxisSpeedUnit(profile_observables.top_solid_infill_speed,self.get_axis_speed_display_units(),profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)).extend(self.rounding_extender_options);\u000a    self.infill_speed = ko.observable(\u000a        Octolapse.convertAxisSpeedUnit(profile_observables.infill_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)).extend(self.rounding_extender_options);\u000a    self.print_speed = ko.observable(\u000a        Octolapse.convertAxisSpeedUnit(profile_observables.print_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)).extend(self.rounding_extender_options);\u000a    self.initial_layer_print_speed = ko.observable(\u000a        Octolapse.convertAxisSpeedUnit(profile_observables.first_layer_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)).extend(self.rounding_extender_options);\u000a    self.initial_layer_travel_speed = ko.observable(\u000a        Octolapse.convertAxisSpeedUnit(profile_observables.first_layer_travel_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)).extend(self.rounding_extender_options);\u000a    self.skirt_brim_speed = ko.observable(\u000a        Octolapse.convertAxisSpeedUnit(profile_observables.skirt_brim_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)).extend(self.rounding_extender_options);\u000a    self.maximum_z_speed = ko.observable(\u000a        Octolapse.convertAxisSpeedUnit(profile_observables.maximum_z_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)).extend(self.rounding_extender_options);\u000a\u000a    self.num_slow_layers = ko.observable(profile_observables.num_slow_layers).extend(self.round_to_increment_options_num_layers);\u000a    /*\u000a        Create a getter for each profile variable (settings.py - printer class)\u000a    */\u000a    self.get_retract_length = function () {\u000a        return self.retraction_distance();\u000a    };\u000a    self.get_retract_speed = function () {\u000a        return self.retraction_retract_speed();\u000a    };\u000a    self.get_detract_speed = function () {\u000a        return self.retraction_prime_speed();\u000a    };\u000a    self.get_movement_speed = function () {\u000a        return self.travel_speed();\u000a    };\u000a    self.get_z_hop = function () {\u000a        return self.z_hop_height();\u000a    };\u000a    self.get_z_hop_speed = function () {\u000a        var maximum_z_speed = self.maximum_z_speed()\u000a        if ((maximum_z_speed || 0) == 0 || maximum_z_speed > self.travel_speed())\u000a            return self.travel_speed();\u000a\u000a        return maximum_z_speed;\u000a    };\u000a    self.get_maximum_z_speed = function () {\u000a        return self.maximum_z_speed();\u000a    };\u000a    self.get_print_speed = function () {\u000a        return self.print_speed();\u000a    };\u000a    self.get_perimeter_speed = function () {\u000a        return self.inner_wall_speed();\u000a    };\u000a    self.get_small_perimeter_speed = function () {\u000a        return self.inner_wall_speed();\u000a    };\u000a    self.get_external_perimeter_speed = function () {\u000a        return self.outer_wall_speed();\u000a    };\u000a    self.get_infill_speed = function () {\u000a        return self.infill_speed();\u000a    };\u000a    self.get_solid_infill_speed = function () {\u000a        return self.infill_speed();\u000a    };\u000a    self.get_top_solid_infill_speed = function () {\u000a        return self.top_bottom_speed();\u000a    };\u000a    self.get_support_speed = function () {\u000a        return self.print_speed();\u000a    };\u000a    self.get_bridge_speed = function () {\u000a        return self.outer_wall_speed();\u000a    };\u000a    self.get_gap_fill_speed = function () {\u000a        return self.print_speed();\u000a    };\u000a    self.get_print_speed = function () {\u000a        return self.print_speed();\u000a    }\u000a    self.get_first_layer_speed = function () {\u000a        return self.initial_layer_print_speed();\u000a    };\u000a    self.get_first_layer_travel_speed = function () {\u000a        return self.initial_layer_travel_speed();\u000a    };\u000a    self.get_skirt_brim_speed = function () {\u000a        return self.skirt_brim_speed();\u000a    };\u000a    self.get_num_slow_layers = function () {\u000a        return self.num_slow_layers();\u000a    }\u000a    // Get a list of speeds for use with feature detection\u000a    self.getSlicerSpeedList = function () {\u000a        return [\u000a            {speed: Octolapse.roundToIncrement(self.print_speed() * 60.0, 0.1), type: "Normal Print"},\u000a            {speed: Octolapse.roundToIncrement(self.retraction_retract_speed() * 60.0, 0.1), type: "Retract"},\u000a            {speed: Octolapse.roundToIncrement(self.retraction_prime_speed() * 60.0, 0.1), type: "Prime"},\u000a            {speed: Octolapse.roundToIncrement(self.infill_speed() * 60.0, 0.1), type: "Infill"},\u000a            {speed: Octolapse.roundToIncrement(self.outer_wall_speed() * 60.0, 0.1), type: "Outer Wall"},\u000a            {speed: Octolapse.roundToIncrement(self.inner_wall_speed() * 60.0, 0.1), type: "Inner Wall"},\u000a            {speed: Octolapse.roundToIncrement(self.top_bottom_speed() * 60.0, 0.1), type: "Top/Bottom"},\u000a            {speed: Octolapse.roundToIncrement(self.travel_speed() * 60.0, 0.1), type: "Travel"},\u000a            {speed: Octolapse.roundToIncrement(self.initial_layer_print_speed() * 60.0, 0.1), type: "Initial Layer"},\u000a            {\u000a                speed: Octolapse.roundToIncrement(self.initial_layer_travel_speed() * 60.0, 0.1),\u000a                type: "Initial Layer Travel"\u000a            },\u000a            {speed: Octolapse.roundToIncrement(self.skirt_brim_speed() * 60.0, 0.1), type: "Skirt/Brim"},\u000a            {speed: Octolapse.roundToIncrement(self.get_z_hop_speed() * 60.0, 0.1), type: "Z Travel"},\u000a        ];\u000a    };\u000a\u000a};\u000a\u000a;\u000a
p0
.