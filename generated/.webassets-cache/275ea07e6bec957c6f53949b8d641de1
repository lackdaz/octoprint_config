V// source: plugin/firmwareupdater/js/firmwareupdater.js\u000a$(function() {\u000a    function FirmwareUpdaterViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.settingsViewModel = parameters[0];\u000a        self.loginState = parameters[1];\u000a        self.connection = parameters[2];\u000a        self.printerState = parameters[3];\u000a\u000a        // General settings\u000a        self.configFlashMethod = ko.observable();\u000a        self.showAdvancedConfig = ko.observable(false);\u000a        self.showAvrdudeConfig = ko.observable(false);\u000a        self.showBossacConfig = ko.observable(false);\u000a        self.showLpc1768Config = ko.observable(false);\u000a        self.showDfuConfig = ko.observable(false);\u000a        self.showStm32flashConfig = ko.observable(false);\u000a        self.showPostflashConfig = ko.observable(false);\u000a        self.configEnablePostflashDelay = ko.observable();\u000a        self.configPostflashDelay = ko.observable();\u000a        self.configEnablePostflashGcode = ko.observable();\u000a        self.configPostflashGcode = ko.observable();\u000a        self.configDisableBootloaderCheck = ko.observable();\u000a        self.configEnablePreflashCommandline = ko.observable();\u000a        self.configPreflashCommandline = ko.observable();\u000a        self.configEnablePostflashCommandline = ko.observable();\u000a        self.configPostflashCommandline = ko.observable();\u000a\u000a        // Config settings for avrdude\u000a        self.configAvrdudeMcu = ko.observable();\u000a        self.configAvrdudePath = ko.observable();\u000a        self.configAvrdudeConfigFile = ko.observable();\u000a        self.configAvrdudeProgrammer = ko.observable();\u000a        self.configAvrdudeBaudRate = ko.observable();\u000a        self.configAvrdudeDisableVerification = ko.observable();\u000a        self.configAvrdudeCommandLine = ko.observable();\u000a        self.avrdudePathBroken = ko.observable(false);\u000a        self.avrdudePathOk = ko.observable(false);\u000a        self.avrdudePathText = ko.observable();\u000a        self.avrdudePathHelpVisible = ko.computed(function() {\u000a            return self.avrdudePathBroken() || self.avrdudePathOk();\u000a        });\u000a\u000a        self.avrdudeConfPathBroken = ko.observable(false);\u000a        self.avrdudeConfPathOk = ko.observable(false);\u000a        self.avrdudeConfPathText = ko.observable();\u000a        self.avrdudeConfPathHelpVisible = ko.computed(function() {\u000a            return self.avrdudeConfPathBroken() || self.avrdudeConfPathOk();\u000a        });\u000a\u000a        // Config settings for bossac\u000a        self.configBossacPath = ko.observable();\u000a        self.configBossacDisableVerification = ko.observable()\u000a        self.configBossacCommandLine = ko.observable();\u000a\u000a        self.bossacPathBroken = ko.observable(false);\u000a        self.bossacPathOk = ko.observable(false);\u000a        self.bossacPathText = ko.observable();\u000a        self.bossacPathHelpVisible = ko.computed(function() {\u000a            return self.bossacPathBroken() || self.bossacPathOk();\u000a        });\u000a\u000a        // Config settings for lpc1768\u000a        self.configLpc1768Path = ko.observable();\u000a        self.configLpc1768ResetBeforeFlash = ko.observable();\u000a\u000a        self.lpc1768PathBroken = ko.observable(false);\u000a        self.lpc1768PathOk = ko.observable(false);\u000a        self.lpc1768PathText = ko.observable();\u000a        self.lpc1768PathHelpVisible = ko.computed(function() {\u000a            return self.lpc1768PathBroken() || self.lpc1768PathOk();\u000a        });\u000a\u000a        // Config settings for dfu-programmer\u000a        self.configDfuMcu = ko.observable();\u000a        self.configDfuPath = ko.observable();\u000a        self.configDfuCommandLine = ko.observable();\u000a        self.configDfuEraseCommandLine = ko.observable();\u000a        self.dfuPathBroken = ko.observable(false);\u000a        self.dfuPathOk = ko.observable(false);\u000a        self.dfuPathText = ko.observable();\u000a        self.dfuPathHelpVisible = ko.computed(function() {\u000a            return self.dfuPathBroken() || self.dfuPathOk();\u000a        });\u000a\u000a        // Config settings for stm32flash\u000a        self.configStm32flashPath = ko.observable();\u000a        self.configStm32flashVerify = ko.observable(true);\u000a        self.configStm32flashBoot0Pin = ko.observable();\u000a        self.configStm32flashBoot0Low = ko.observable(true);\u000a        self.configStm32flashResetPin = ko.observable();\u000a        self.configStm32flashResetLow = ko.observable(true);\u000a        self.configStm32flashExecute = ko.observable();\u000a        self.configStm32flashExecuteAddress = ko.observable();\u000a        self.configStm32flashReset = ko.observable(false);\u000a        self.stm32flashPathBroken = ko.observable();\u000a        self.stm32flashPathOk = ko.observable(false);\u000a        self.stm32flashPathText = ko.observable();\u000a        self.stm32flashPathHelpVisible = ko.computed(function() {\u000a            return self.stm32flashPathBroken() || self.stm32flashPathOk();\u000a        });\u000a\u000a        self.flashPort = ko.observable(undefined);\u000a\u000a        self.firmwareFileName = ko.observable(undefined);\u000a        self.firmwareFileURL = ko.observable(undefined);\u000a\u000a        self.alertMessage = ko.observable("");\u000a        self.alertType = ko.observable("alert-warning");\u000a        self.showAlert = ko.observable(false);\u000a        self.missingParamToFlash = ko.observable(false);\u000a        self.progressBarText = ko.observable();\u000a        self.isBusy = ko.observable(false);\u000a        self.fileFlashButtonText = ko.observable("");\u000a        self.urlFlashButtonText = ko.observable("");\u000a\u000a        self.selectFilePath = undefined;\u000a        self.configurationDialog = undefined;\u000a\u000a        self.inSettingsDialog = false;\u000a\u000a        self.connection.selectedPort.subscribe(function(value) {\u000a            if (value === undefined) return;\u000a            self.flashPort(value);\u000a        });\u000a\u000a        self.toggleAdvancedConfig = function(){\u000a            self.showAdvancedConfig(!self.showAdvancedConfig());\u000a        }\u000a\u000a        self.togglePostflashConfig = function(){\u000a            self.showPostflashConfig(!self.showPostflashConfig());\u000a        }\u000a\u000a        self.configFlashMethod.subscribe(function(value) {\u000a            if(value == 'avrdude') {\u000a                self.showAvrdudeConfig(true);\u000a                self.showBossacConfig(false);\u000a                self.showLpc1768Config(false);\u000a                self.showDfuConfig(false);\u000a                self.showStm32flashConfig(false);\u000a            } else if(value == 'bossac') {\u000a                self.showAvrdudeConfig(false);\u000a                self.showBossacConfig(true);\u000a                self.showLpc1768Config(false);\u000a                self.showDfuConfig(false);\u000a                self.showStm32flashConfig(false);\u000a            } else if(value == 'lpc1768'){\u000a                self.showAvrdudeConfig(false);\u000a                self.showBossacConfig(false);\u000a                self.showLpc1768Config(true);\u000a                self.showStm32flashConfig(false);\u000a                self.showDfuConfig(false);\u000a            } else if(value == 'dfuprogrammer'){\u000a                self.showAvrdudeConfig(false);\u000a                self.showBossacConfig(false);\u000a                self.showLpc1768Config(false);\u000a                self.showDfuConfig(true);\u000a                self.showStm32flashConfig(false);\u000a            } else if(value == 'stm32flash'){\u000a                self.showAvrdudeConfig(false);\u000a                self.showBossacConfig(false);\u000a                self.showLpc1768Config(false);\u000a                self.showDfuConfig(false);\u000a                self.showStm32flashConfig(true);\u000a            } else {\u000a                self.showAvrdudeConfig(false);\u000a                self.showBossacConfig(false);\u000a                self.showLpc1768Config(false);\u000a                self.showDfuConfig(false);\u000a                self.showStm32flashConfig(false);\u000a            }\u000a         });\u000a\u000a         self.firmwareFileName.subscribe(function(value) {\u000a            if (!self.settingsViewModel.settings.plugins.firmwareupdater.disable_bootloadercheck()) {\u000a                if (self._checkForBootloader(value)) {\u000a                    self.bootloaderWarningDialog.modal();\u000a                }\u000a            }\u000a         });\u000a\u000a        self.onStartup = function() {\u000a            self.selectFilePath = $("#settings_firmwareupdater_selectFilePath");\u000a            self.configurationDialog = $("#settings_plugin_firmwareupdater_configurationdialog");\u000a            self.bootloaderWarningDialog = $("#BootLoaderWarning");\u000a\u000a            self.selectFilePath.fileupload({\u000a                dataType: "hex",\u000a                maxNumberOfFiles: 1,\u000a                autoUpload: false,\u000a                add: function(e, data) {\u000a                    if (data.files.length === 0) {\u000a                        return false;\u000a                    }\u000a                    self.hexData = data;\u000a                    self.firmwareFileName(data.files[0].name);\u000a                }\u000a            });\u000a        };\u000a\u000a        self._checkIfReadyToFlash = function(source) {\u000a            var alert = undefined;\u000a\u000a            if (!self.loginState.isAdmin()){\u000a                alert = gettext("You need administrator privileges to flash firmware.");\u000a            }\u000a\u000a            if (self.printerState.isPrinting() || self.printerState.isPaused()){\u000a                alert = gettext("Printer is printing. Please wait for the print to be finished.");\u000a            }\u000a\u000a            if (!self.settingsViewModel.settings.plugins.firmwareupdater.flash_method()){\u000a                alert = gettext("The flash method is not selected.");\u000a            }\u000a\u000a            if (self.settingsViewModel.settings.plugins.firmwareupdater.flash_method() == "avrdude" && !self.settingsViewModel.settings.plugins.firmwareupdater.avrdude_avrmcu()) {\u000a                alert = gettext("The AVR MCU type is not selected.");\u000a            }\u000a\u000a            if (self.settingsViewModel.settings.plugins.firmwareupdater.flash_method() == "avrdude" && !self.settingsViewModel.settings.plugins.firmwareupdater.avrdude_path()) {\u000a                alert = gettext("The avrdude path is not configured.");\u000a            }\u000a\u000a            if (self.settingsViewModel.settings.plugins.firmwareupdater.flash_method() == "avrdude" && !self.settingsViewModel.settings.plugins.firmwareupdater.avrdude_programmer()) {\u000a                alert = gettext("The AVR programmer is not selected.");\u000a            }\u000a\u000a            if (self.settingsViewModel.settings.plugins.firmwareupdater.flash_method() == "bossac" && !self.settingsViewModel.settings.plugins.firmwareupdater.bossac_path()) {\u000a                alert = gettext("The bossac path is not configured.");\u000a            }\u000a\u000a            if (self.settingsViewModel.settings.plugins.firmwareupdater.flash_method() == "lpc1768" && !self.settingsViewModel.settings.plugins.firmwareupdater.lpc1768_path()) {\u000a                alert = gettext("The lpc1768 firmware folder path is not configured.");\u000a            }\u000a\u000a            if (self.settingsViewModel.settings.plugins.firmwareupdater.flash_method() == "dfuprogrammer" && !self.settingsViewModel.settings.plugins.firmwareupdater.dfuprog_path()) {\u000a                alert = gettext("The dfu-programmer path is not configured.");\u000a            }\u000a\u000a            if (self.settingsViewModel.settings.plugins.firmwareupdater.flash_method() == "dfuprogrammer" && !self.settingsViewModel.settings.plugins.firmwareupdater.dfuprog_avrmcu()) {\u000a                alert = gettext("The AVR MCU type is not selected.");\u000a            }\u000a\u000a            if (!self.flashPort() &! self.settingsViewModel.settings.plugins.firmwareupdater.flash_method() == "dfuprogrammer") {\u000a                alert = gettext("The printer port is not selected.");\u000a            }\u000a\u000a            if (source === "file" && !self.firmwareFileName()) {\u000a                alert = gettext("Firmware file is not specified");\u000a            } else if (source === "url" && !self.firmwareFileURL()) {\u000a                alert = gettext("Firmware URL is not specified");\u000a            }\u000a\u000a            if (alert !== undefined) {\u000a                self.alertType("alert-warning");\u000a                self.alertMessage(alert);\u000a                self.showAlert(true);\u000a                return false;\u000a            } else {\u000a                self.alertMessage(undefined);\u000a                self.showAlert(false);\u000a            }\u000a\u000a            return true;\u000a        };\u000a\u000a        self._checkForBootloader = function(filename) {\u000a            if (filename.search(/bootloader/i) > -1) {\u000a                return true;\u000a            } else {\u000a                return false;\u000a            }\u000a        }\u000a\u000a        self.returnTrue = function() {\u000a            return true;\u000a        }\u000a\u000a        self.returnFalse = function() {\u000a            return false;\u000a        }\u000a\u000a        self.startFlashFromFile = function() {\u000a            if (!self._checkIfReadyToFlash("file")) {\u000a                return;\u000a            }\u000a\u000a            self.progressBarText("Flashing firmware...");\u000a            self.isBusy(true);\u000a            self.showAlert(false);\u000a\u000a            self.hexData.formData = {\u000a                port: self.flashPort()\u000a            };\u000a            self.hexData.submit();\u000a        };\u000a\u000a        self.startFlashFromURL = function() {\u000a            if (!self._checkIfReadyToFlash("url")) {\u000a                return;\u000a            }\u000a\u000a            self.isBusy(true);\u000a            self.showAlert(false);\u000a            self.progressBarText("Flashing firmware...");\u000a\u000a            $.ajax({\u000a                url: PLUGIN_BASEURL + "firmwareupdater/flash",\u000a                type: "POST",\u000a                dataType: "json",\u000a                data: JSON.stringify({\u000a                    port: self.flashPort(),\u000a                    url: self.firmwareFileURL()\u000a                }),\u000a                contentType: "application/json; charset=UTF-8"\u000a            })\u000a        };\u000a\u000a        self.onDataUpdaterPluginMessage = function(plugin, data) {\u000a            if (plugin !== "firmwareupdater") {\u000a                return;\u000a            }\u000a\u000a            var message;\u000a\u000a            if (data.type === "status") {\u000a                switch (data.status) {\u000a                    case "flasherror": {\u000a                        if (data.message) {\u000a                            message = gettext(data.message);\u000a                        } else {\u000a                            message = gettext("Unknown error");\u000a                        }\u000a\u000a                        if (data.subtype) {\u000a                            switch (data.subtype) {\u000a                                case "busy": {\u000a                                    message = gettext("Printer is busy.");\u000a                                    break;\u000a                                }\u000a                                case "port": {\u000a                                    message = gettext("Printer port is not available.");\u000a                                    break;\u000a                                }\u000a                                case "method": {\u000a                                    message = gettext("Flash method is not properly configured.");\u000a                                    break;\u000a                                }\u000a                                case "hexfile": {\u000a                                    message = gettext("Cannot read file to flash.");\u000a                                    break;\u000a                                }\u000a                                case "already_flashing": {\u000a                                    message = gettext("Already flashing.");\u000a                                }\u000a                            }\u000a                        }\u000a\u000a                        self.showPopup("error", gettext("Flashing failed"), message);\u000a                        self.isBusy(false);\u000a                        self.showAlert(false);\u000a                        self.firmwareFileName("");\u000a                        self.firmwareFileURL("");\u000a                        break;\u000a                    }\u000a                    case "success": {\u000a                        self.showPopup("success", gettext("Flashing successful"), "");\u000a                        self.isBusy(false);\u000a                        self.showAlert(false);\u000a                        self.firmwareFileName("");\u000a                        self.firmwareFileURL("");\u000a                        break;\u000a                    }\u000a                    case "progress": {\u000a                        if (data.subtype) {\u000a                            switch (data.subtype) {\u000a                                case "disconnecting": {\u000a                                    message = gettext("Disconnecting printer...");\u000a                                    break;\u000a                                }\u000a                                case "startingflash": {\u000a                                    self.isBusy(true);\u000a                                    message = gettext("Starting flash...");\u000a                                    break;\u000a                                }\u000a                                case "waitforsd": {\u000a                                    message = gettext("Waiting for SD card to mount on host...");\u000a                                    break;\u000a                                }\u000a                                case "writing": {\u000a                                    message = gettext("Writing memory...");\u000a                                    break;\u000a                                }\u000a                                case "erasing": {\u000a                                    message = gettext("Erasing memory...");\u000a                                    break;\u000a                                }\u000a                                case "verifying": {\u000a                                    message = gettext("Verifying memory...");\u000a                                    break;\u000a                                }\u000a                                case "postflashdelay": {\u000a                                    message = gettext("Post-flash delay...");\u000a                                    break;\u000a                                }\u000a                                case "boardreset": {\u000a                                        message = gettext("Resetting the board...");\u000a                                        break;\u000a                                }\u000a                                case "reconnecting": {\u000a                                    message = gettext("Reconnecting to printer...");\u000a                                    break;\u000a                                }\u000a                            }\u000a                        }\u000a\u000a                        if (message) {\u000a                            self.progressBarText(message);\u000a                        }\u000a                        break;\u000a                    }\u000a                    case "info": {\u000a                        self.alertType("alert-info");\u000a                        self.alertMessage(data.status_description);\u000a                        self.showAlert(true);\u000a                        break;\u000a                    }\u000a                }\u000a            }\u000a        };\u000a\u000a        self.showPluginConfig = function() {\u000a            // Load the general settings\u000a            self.configFlashMethod(self.settingsViewModel.settings.plugins.firmwareupdater.flash_method());\u000a            self.configPreflashCommandline(self.settingsViewModel.settings.plugins.firmwareupdater.preflash_commandline());\u000a            self.configPostflashCommandline(self.settingsViewModel.settings.plugins.firmwareupdater.postflash_commandline());\u000a            self.configPostflashDelay(self.settingsViewModel.settings.plugins.firmwareupdater.postflash_delay());\u000a            self.configPostflashGcode(self.settingsViewModel.settings.plugins.firmwareupdater.postflash_gcode());\u000a\u000a            if(self.settingsViewModel.settings.plugins.firmwareupdater.enable_preflash_commandline() != 'false') {\u000a                self.configEnablePreflashCommandline(self.settingsViewModel.settings.plugins.firmwareupdater.enable_preflash_commandline());\u000a            }\u000a\u000a            if(self.settingsViewModel.settings.plugins.firmwareupdater.enable_postflash_commandline() != 'false') {\u000a                self.configEnablePostflashCommandline(self.settingsViewModel.settings.plugins.firmwareupdater.enable_postflash_commandline());\u000a            }\u000a\u000a            if(self.settingsViewModel.settings.plugins.firmwareupdater.enable_postflash_delay() != 'false') {\u000a                self.configEnablePostflashDelay(self.settingsViewModel.settings.plugins.firmwareupdater.enable_postflash_delay());\u000a            }\u000a            \u000a            if(self.settingsViewModel.settings.plugins.firmwareupdater.enable_postflash_gcode() != 'false') {\u000a                self.configEnablePostflashGcode(self.settingsViewModel.settings.plugins.firmwareupdater.enable_postflash_gcode());\u000a            }\u000a            \u000a            if(self.settingsViewModel.settings.plugins.firmwareupdater.disable_bootloadercheck() != 'false') {\u000a                self.configDisableBootloaderCheck(self.settingsViewModel.settings.plugins.firmwareupdater.disable_bootloadercheck());\u000a            }\u000a\u000a            // Load the avrdude settings\u000a            self.configAvrdudePath(self.settingsViewModel.settings.plugins.firmwareupdater.avrdude_path());\u000a            self.configAvrdudeConfigFile(self.settingsViewModel.settings.plugins.firmwareupdater.avrdude_conf());\u000a            self.configAvrdudeMcu(self.settingsViewModel.settings.plugins.firmwareupdater.avrdude_avrmcu());\u000a            self.configAvrdudeProgrammer(self.settingsViewModel.settings.plugins.firmwareupdater.avrdude_programmer());\u000a            self.configAvrdudeBaudRate(self.settingsViewModel.settings.plugins.firmwareupdater.avrdude_baudrate());\u000a            if(self.settingsViewModel.settings.plugins.firmwareupdater.avrdude_disableverify() != 'false') {\u000a                self.configAvrdudeDisableVerification(self.settingsViewModel.settings.plugins.firmwareupdater.avrdude_disableverify());\u000a            }\u000a            self.configAvrdudeCommandLine(self.settingsViewModel.settings.plugins.firmwareupdater.avrdude_commandline());\u000a\u000a            // Load the bossac settings\u000a            self.configBossacPath(self.settingsViewModel.settings.plugins.firmwareupdater.bossac_path());\u000a            self.configBossacDisableVerification(self.settingsViewModel.settings.plugins.firmwareupdater.bossac_disableverify());\u000a            self.configBossacCommandLine(self.settingsViewModel.settings.plugins.firmwareupdater.bossac_commandline());\u000a            \u000a            // Load the dfu-programmer settings\u000a            self.configDfuPath(self.settingsViewModel.settings.plugins.firmwareupdater.dfuprog_path());\u000a            self.configDfuMcu(self.settingsViewModel.settings.plugins.firmwareupdater.dfuprog_avrmcu());\u000a            self.configDfuCommandLine(self.settingsViewModel.settings.plugins.firmwareupdater.dfuprog_commandline());\u000a            self.configDfuEraseCommandLine(self.settingsViewModel.settings.plugins.firmwareupdater.dfuprog_erasecommandline());\u000a            \u000a            // Load the lpc1768 settings\u000a            self.configLpc1768Path(self.settingsViewModel.settings.plugins.firmwareupdater.lpc1768_path());\u000a            if(self.settingsViewModel.settings.plugins.firmwareupdater.lpc1768_preflashreset() != 'false') {\u000a                self.configLpc1768ResetBeforeFlash(self.settingsViewModel.settings.plugins.firmwareupdater.lpc1768_preflashreset());\u000a            }\u000a\u000a            // Load the stm32flash settings\u000a            self.configStm32flashPath(self.settingsViewModel.settings.plugins.firmwareupdater.stm32flash_path());\u000a            self.configStm32flashVerify(self.settingsViewModel.settings.plugins.firmwareupdater.stm32flash_verify());\u000a            self.configStm32flashBoot0Pin(self.settingsViewModel.settings.plugins.firmwareupdater.stm32flash_boot0pin());\u000a            self.configStm32flashBoot0Low(self.settingsViewModel.settings.plugins.firmwareupdater.stm32flash_boot0low());\u000a            self.configStm32flashResetPin(self.settingsViewModel.settings.plugins.firmwareupdater.stm32flash_resetpin());\u000a            self.configStm32flashResetLow(self.settingsViewModel.settings.plugins.firmwareupdater.stm32flash_resetlow());\u000a            self.configStm32flashExecute(self.settingsViewModel.settings.plugins.firmwareupdater.stm32flash_execute());\u000a            self.configStm32flashExecuteAddress(self.settingsViewModel.settings.plugins.firmwareupdater.stm32flash_executeaddress());\u000a            self.configStm32flashReset(self.settingsViewModel.settings.plugins.firmwareupdater.stm32flash_reset());\u000a            self.configurationDialog.modal();\u000a        };\u000a\u000a        self.onConfigClose = function() {\u000a            self._saveConfig();\u000a\u000a            self.configurationDialog.modal("hide");\u000a            self.alertMessage(undefined);\u000a            self.showAlert(false);\u000a        };\u000a\u000a        self._saveConfig = function() {\u000a            var data = {\u000a                plugins: {\u000a                    firmwareupdater: {\u000a                        flash_method: self.configFlashMethod(),\u000a                        avrdude_path: self.configAvrdudePath(),\u000a                        avrdude_conf: self.configAvrdudeConfigFile(),\u000a                        avrdude_avrmcu: self.configAvrdudeMcu(),\u000a                        avrdude_programmer: self.configAvrdudeProgrammer(),\u000a                        avrdude_baudrate: self.configAvrdudeBaudRate(),\u000a                        avrdude_disableverify: self.configAvrdudeDisableVerification(),\u000a                        avrdude_commandline: self.configAvrdudeCommandLine(),\u000a                        bossac_path: self.configBossacPath(),\u000a                        bossac_disableverify: self.configBossacDisableVerification(),\u000a                        bossac_commandline: self.configBossacCommandLine(),\u000a                        dfuprog_path: self.configDfuPath(),\u000a                        dfuprog_avrmcu: self.configDfuMcu(),\u000a                        dfuprog_commandline: self.configDfuCommandLine(),\u000a                        dfuprog_erasecommandline: self.configDfuEraseCommandLine(),\u000a                        stm32flash_path : self.configStm32flashPath(),\u000a                        stm32flash_verify: self.configStm32flashVerify(),\u000a                        stm32flash_boot0pin : self.configStm32flashBoot0Pin(),\u000a                        stm32flash_boot0low : self.configStm32flashBoot0Low(),\u000a                        stm32flash_resetpin : self.configStm32flashResetPin(),\u000a                        stm32flash_resetlow : self.configStm32flashResetLow(),\u000a                        stm32flash_execute : self.configStm32flashExecute(),\u000a                        stm32flash_executeaddress : self.configStm32flashExecuteAddress(),\u000a                        stm32flash_reset: self.configStm32flashReset(),\u000a                        lpc1768_path: self.configLpc1768Path(),\u000a                        lpc1768_preflashreset: self.configLpc1768ResetBeforeFlash(),\u000a                        enable_preflash_commandline: self.configEnablePreflashCommandline(),\u000a                        preflash_commandline: self.configPreflashCommandline(),\u000a                        enable_postflash_commandline: self.configEnablePostflashCommandline(),\u000a                        postflash_commandline: self.configPostflashCommandline(),\u000a                        postflash_delay: self.configPostflashDelay(),\u000a                        postflash_gcode: self.configPostflashGcode(),\u000a                        enable_postflash_delay: self.configEnablePostflashDelay(),\u000a                        enable_postflash_gcode: self.configEnablePostflashGcode(),\u000a                        disable_bootloadercheck: self.configDisableBootloaderCheck()\u000a                    }\u000a                }\u000a            };\u000a            self.settingsViewModel.saveData(data);\u000a        };\u000a\u000a        self.onConfigHidden = function() {\u000a            self.avrdudePathBroken(false);\u000a            self.avrdudePathOk(false);\u000a            self.avrdudePathText("");\u000a            self.bossacPathBroken(false);\u000a            self.bossacPathOk(false);\u000a            self.bossacPathText("");\u000a        };\u000a\u000a        self.testAvrdudePath = function() {\u000a            var filePathRegEx_Linux = new RegExp("^(\u005c/[^\u005c0/]+)+$");\u000a            var filePathRegEx_Windows = new RegExp("^[A-z]\u005c:\u005c\u005c\u005c\u005c.+.exe$");\u000a\u000a            if ( !filePathRegEx_Linux.test(self.configAvrdudePath()) && !filePathRegEx_Windows.test(self.configAvrdudePath()) ) {\u000a                self.avrdudePathText(gettext("The path is not valid"));\u000a                self.avrdudePathOk(false);\u000a                self.avrdudePathBroken(true);\u000a            } else {\u000a                $.ajax({\u000a                    url: API_BASEURL + "util/test",\u000a                    type: "POST",\u000a                    dataType: "json",\u000a                    data: JSON.stringify({\u000a                        command: "path",\u000a                        path: self.configAvrdudePath(),\u000a                        check_type: "file",\u000a                        check_access: "x"\u000a                    }),\u000a                    contentType: "application/json; charset=UTF-8",\u000a                    success: function(response) {\u000a                        if (!response.result) {\u000a                            if (!response.exists) {\u000a                                self.avrdudePathText(gettext("The path doesn't exist"));\u000a                            } else if (!response.typeok) {\u000a                                self.avrdudePathText(gettext("The path is not a file"));\u000a                            } else if (!response.access) {\u000a                                self.avrdudePathText(gettext("The path is not an executable"));\u000a                            }\u000a                        } else {\u000a                            self.avrdudePathText(gettext("The path is valid"));\u000a                        }\u000a                        self.avrdudePathOk(response.result);\u000a                        self.avrdudePathBroken(!response.result);\u000a                    }\u000a                })\u000a            }\u000a        };\u000a\u000a        self.resetAvrdudeCommandLine = function() {\u000a            self.configAvrdudeCommandLine("{avrdude} -v -q -p {mcu} -c {programmer} -P {port} -D -C {conffile} -b {baudrate} {disableverify} -U flash:w:{firmware}:i");\u000a        };\u000a\u000a        self.testBossacPath = function() {\u000a            var filePathRegEx_Linux = new RegExp("^(\u005c/[^\u005c0/]+)+$");\u000a            var filePathRegEx_Windows = new RegExp("^[A-z]\u005c:\u005c\u005c\u005c\u005c.+.exe$");\u000a\u000a            if ( !filePathRegEx_Linux.test(self.configBossacPath()) && !filePathRegEx_Windows.test(self.configBossacPath()) ) {\u000a                self.bossacPathText(gettext("The path is not valid"));\u000a                self.bossacPathOk(false);\u000a                self.bossacPathBroken(true);\u000a            } else {\u000a                $.ajax({\u000a                    url: API_BASEURL + "util/test",\u000a                    type: "POST",\u000a                    dataType: "json",\u000a                    data: JSON.stringify({\u000a                        command: "path",\u000a                        path: self.configBossacPath(),\u000a                        check_type: "file",\u000a                        check_access: "x"\u000a                    }),\u000a                    contentType: "application/json; charset=UTF-8",\u000a                    success: function(response) {\u000a                        if (!response.result) {\u000a                            if (!response.exists) {\u000a                                self.bossacPathText(gettext("The path doesn't exist"));\u000a                            } else if (!response.typeok) {\u000a                                self.bossacPathText(gettext("The path is not a file"));\u000a                            } else if (!response.access) {\u000a                                self.bossacPathText(gettext("The path is not an executable"));\u000a                            }\u000a                        } else {\u000a                            self.bossacPathText(gettext("The path is valid"));\u000a                        }\u000a                        self.bossacPathOk(response.result);\u000a                        self.bossacPathBroken(!response.result);\u000a                    }\u000a                })\u000a            }\u000a        };\u000a\u000a        self.resetBossacCommandLine = function() {\u000a            self.configBossacCommandLine("{bossac} -i -p {port} -U true -e -w {disableverify} -b {firmware} -R");\u000a        };\u000a\u000a        self.testDfuPath = function() {\u000a            var filePathRegEx = new RegExp("^(\u005c/[^\u005c0/]+)+$");\u000a\u000a            if (!filePathRegEx.test(self.configDfuPath())) {\u000a                self.dfuPathText(gettext("The path is not valid"));\u000a                self.dfuPathOk(false);\u000a                self.dfuPathBroken(true);\u000a            } else {\u000a                $.ajax({\u000a                    url: API_BASEURL + "util/test",\u000a                    type: "POST",\u000a                    dataType: "json",\u000a                    data: JSON.stringify({\u000a                        command: "path",\u000a                        path: self.configDfuPath(),\u000a                        check_type: "file",\u000a                        check_access: "x"\u000a                    }),\u000a                    contentType: "application/json; charset=UTF-8",\u000a                    success: function(response) {\u000a                        if (!response.result) {\u000a                            if (!response.exists) {\u000a                                self.dfuPathText(gettext("The path doesn't exist"));\u000a                            } else if (!response.typeok) {\u000a                                self.dfuPathText(gettext("The path is not a file"));\u000a                            } else if (!response.access) {\u000a                                self.dfuPathText(gettext("The path is not an executable"));\u000a                            }\u000a                        } else {\u000a                            self.dfuPathText(gettext("The path is valid"));\u000a                        }\u000a                        self.dfuPathOk(response.result);\u000a                        self.dfuPathBroken(!response.result);\u000a                    }\u000a                })\u000a            }\u000a        };\u000a\u000a        self.resetDfuCommandLine = function() {\u000a            self.configDfuCommandLine("sudo {dfuprogrammer} {mcu} flash {firmware} --debug-level 10 --force");\u000a        };\u000a\u000a        self.resetDfuEraseCommandLine = function() {\u000a            self.configDfuEraseCommandLine("sudo {dfuprogrammer} {mcu} erase --debug-level 10");\u000a        };\u000a\u000a        self.testStm32flashPath = function() {\u000a            var filePathRegEx = new RegExp("^(\u005c/[^\u005c0/]+)+$");\u000a\u000a            if (!filePathRegEx.test(self.configStm32flashPath())) {\u000a                self.stm32flashPathText(gettext("The path is not valid"));\u000a                self.stm32flashPathOk(false);\u000a                self.stm32flashPathBroken(true);\u000a            } else {\u000a                $.ajax({\u000a                    url: API_BASEURL + "util/test",\u000a                    type: "POST",\u000a                    dataType: "json",\u000a                    data: JSON.stringify({\u000a                        command: "path",\u000a                        path: self.configStm32flashPath(),\u000a                        check_type: "file",\u000a                        check_access: "x"\u000a                    }),\u000a                    contentType: "application/json; charset=UTF-8",\u000a                    success: function(response) {\u000a                        if (!response.result) {\u000a                            if (!response.exists) {\u000a                                self.stm32flashPathText(gettext("The path doesn't exist"));\u000a                            } else if (!response.typeok) {\u000a                                self.stm32flashPathText(gettext("The path is not a file"));\u000a                            } else if (!response.access) {\u000a                                self.stm32flashPathText(gettext("The path is not an executable"));\u000a                            }\u000a                        } else {\u000a                            self.stm32flashPathText(gettext("The path is valid"));\u000a                        }\u000a                        self.stm32flashPathOk(response.result);\u000a                        self.stm32flashPathBroken(!response.result);\u000a                    }\u000a                })\u000a            }\u000a        };\u000a\u000a        self.testAvrdudeConf = function() {\u000a            $.ajax({\u000a                url: API_BASEURL + "util/test",\u000a                type: "POST",\u000a                dataType: "json",\u000a                data: JSON.stringify({\u000a                    command: "path",\u000a                    path: self.configAvrdudeConfigFile(),\u000a                    check_type: "file",\u000a                    check_access: "r"\u000a                }),\u000a                contentType: "application/json; charset=UTF-8",\u000a                success: function(response) {\u000a                    if (!response.result) {\u000a                        if (!response.exists) {\u000a                            self.avrdudeConfPathText(gettext("The path doesn't exist"));\u000a                        } else if (!response.typeok) {\u000a                            self.avrdudeConfPathText(gettext("The path is not a file"));\u000a                        } else if (!response.access) {\u000a                            self.avrdudeConfPathText(gettext("The path is not readable"));\u000a                        }\u000a                    } else {\u000a                        self.avrdudeConfPathText(gettext("The path is valid"));\u000a                    }\u000a                    self.avrdudeConfPathOk(response.result);\u000a                    self.avrdudeConfPathBroken(!response.result);\u000a                }\u000a            })\u000a        };\u000a\u000a        self.testLpc1768Path = function() {\u000a            $.ajax({\u000a                url: API_BASEURL + "util/test",\u000a                type: "POST",\u000a                dataType: "json",\u000a                data: JSON.stringify({\u000a                    command: "path",\u000a                    path: self.configLpc1768Path(),\u000a                    check_type: "dir",\u000a                    check_writable_dir: "true"\u000a                }),\u000a                contentType: "application/json; charset=UTF-8",\u000a                success: function(response) {\u000a                    if (!response.result) {\u000a                        if (!response.exists) {\u000a                            self.lpc1768PathText(gettext("The path doesn't exist"));\u000a                        } else if (!response.typeok) {\u000a                            self.lpc1768PathText(gettext("The path is not a folder"));\u000a                        } else if (!response.access) {\u000a                            self.lpc1768PathText(gettext("The path is not writeable"));\u000a                        }\u000a                    } else {\u000a                        self.lpc1768PathText(gettext("The path is valid"));\u000a                    }\u000a                    self.lpc1768PathOk(response.result);\u000a                    self.lpc1768PathBroken(!response.result);\u000a                }\u000a            })\u000a        };\u000a\u000a        self.onSettingsShown = function() {\u000a            self.inSettingsDialog = true;\u000a        };\u000a\u000a        self.onSettingsHidden = function() {\u000a            self.inSettingsDialog = false;\u000a            self.showAlert(false);\u000a        };\u000a\u000a        // Popup Messages\u000a\u000a        self.showPopup = function(message_type, title, text){\u000a            if (self.popup !== undefined){\u000a                self.closePopup();\u000a            }\u000a            self.popup = new PNotify({\u000a                title: gettext(title),\u000a                text: text,\u000a                type: message_type,\u000a                hide: false\u000a            });\u000a        };\u000a\u000a        self.closePopup = function() {\u000a            if (self.popup !== undefined) {\u000a                self.popup.remove();\u000a            }\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push([\u000a        FirmwareUpdaterViewModel,\u000a        ["settingsViewModel", "loginStateViewModel", "connectionViewModel", "printerStateViewModel"],\u000a        [document.getElementById("settings_plugin_firmwareupdater")]\u000a    ]);\u000a});\u000a\u000a;\u000a
p0
.