V// source: plugin/printhistory/js/printhistory.js\u000a$(function() {\u000a    function PrintHistoryViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.loginState = parameters[0];\u000a        self.global_settings = parameters[1];\u000a        self.users = parameters[2];\u000a\u000a        self.totalTime = ko.observable();\u000a        self.totalUsage = ko.observable();\u000a        self.averageTime = ko.observable();\u000a        self.averageUsage = ko.observable();\u000a\u000a        self.isPrinting = ko.observable(undefined);\u000a\u000a        self.spool_inventory = ko.observableArray([]);\u000a        self.spool_inventory_base = ko.observableArray([]);\u000a        self.availableCurrencies = ko.observableArray(['$', '\u20ac', '£']);\u000a\u000a        self.itemForEditing = ko.observable();\u000a\u000a        var HistoryItem = function(data) {\u000a            this.id = ko.observable();\u000a            this.fileName = ko.observable();\u000a            this.success = ko.observable();\u000a            this.filamentVolume = ko.observable();\u000a            this.filamentLength = ko.observable();\u000a            this.timestamp = ko.observable();\u000a            this.printTime = ko.observable();\u000a            this.note = ko.observable();\u000a            this.spool = ko.observable();\u000a            this.user = ko.observable();\u000a\u000a            this.successful = ko.computed(function() {\u000a                return this.success() == 1;\u000a            }, this);\u000a            this.filamentUsage = ko.computed(self.formatFilament, this);\u000a            this.formatedDate = ko.computed(function () {\u000a                return formatDate(this.timestamp());\u000a            }, this);\u000a            this.formatedTimeAgo = ko.computed(function () {\u000a                return formatTimeAgo(this.timestamp());\u000a            }, this);\u000a            this.formatedDuration = ko.computed(function () {\u000a                return formatDuration(this.printTime());\u000a            }, this);\u000a\u000a            this.update(data);\u000a        }\u000a\u000a        HistoryItem.prototype.update = function (data) {\u000a            var updateData = data || {}\u000a\u000a            this.id(updateData.id);\u000a            this.fileName(updateData.fileName);\u000a            this.success(updateData.success);\u000a            this.filamentVolume(updateData.filamentVolume || 0);\u000a            this.filamentLength(updateData.filamentLength || 0);\u000a            this.timestamp(updateData.timestamp || 0);\u000a            this.printTime(updateData.printTime || 0);\u000a            this.note(updateData.note || "");\u000a            this.spool(updateData.spool || "");\u000a            this.user(updateData.user || "");\u000a        };\u000a\u000a        self.onHistoryTab = false;\u000a        self.dataIsStale = true;\u000a        self.requestingData = false;\u000a        self.pureData = {};\u000a        self.lastMonthGraphMinimum = ko.observable(moment(new Date()).subtract(1, 'months').valueOf());\u000a\u000a        self.onStartup = function () {\u000a            self.detailsDialog = $("#printhistory_details_dialog");\u000a            self.detailsDialog.on('hidden', self.onCancelDetails);\u000a        }\u000a\u000a        self.onBeforeBinding = function () {\u000a            self.settings = self.global_settings.settings.plugins.printhistory;\u000a            self.spool_inventory(self.settings.spool_inventory.slice(0));\u000a            self.spool_inventory_base(self.settings.spool_inventory);\u000a        };\u000a\u000a        self.onAfterTabChange = function(current, previous) {\u000a            self.onHistoryTab = current == "#tab_plugin_printhistory"\u000a            self.updatePlots();\u000a        }\u000a\u000a        self.fromCurrentData = function (data) {\u000a            var isPrinting = data.state.flags.printing;\u000a\u000a            if (isPrinting != self.isPrinting()) {\u000a                self.requestData();\u000a            }\u000a\u000a            self.isPrinting(isPrinting);\u000a        };\u000a\u000a        self.requestData = function(params) {\u000a            var force = false;\u000a\u000a            if (_.isObject(params)) {\u000a                force = params.force;\u000a            }\u000a\u000a            if (!self.onHistoryTab) {\u000a                self.dataIsStale = true;\u000a                return;\u000a            }\u000a            //console.log('PrintHistory - request data');\u000a            if (self.requestingData) {\u000a                return;\u000a            }\u000a            self.requestingData = true;\u000a\u000a            $.ajax({\u000a                url: "plugin/printhistory/history",\u000a                type: "GET",\u000a                data: {force: force},\u000a                dataType: "json",\u000a                success: self.fromResponse\u000a            }).always(function () {\u000a                self.requestingData = false;\u000a            });\u000a        };\u000a\u000a        self.fromResponse = function(data) {\u000a            var dataRows = ko.utils.arrayMap(data.history, function (data) {\u000a                return new HistoryItem(data);\u000a            });\u000a\u000a            self.pureData = data.history;\u000a\u000a            self.dataIsStale = false;\u000a            self.listHelper.updateItems(dataRows);\u000a            self.updatePlots();\u000a        };\u000a\u000a        self.removeFile = function(id) {\u000a            $.ajax({\u000a                url: "plugin/printhistory/history/" + id(),\u000a                type: "DELETE",\u000a                dataType: "json",\u000a                success: function(data) {\u000a                    self.fromResponse(data);\u000a                }\u000a            });\u000a        };\u000a\u000a        self.formatFilament = function() {\u000a            var tool0 = "";\u000a            var tool1 = "";\u000a            var output = "";\u000a\u000a            if (this.filamentLength() != undefined) {\u000a                tool0 += formatFilament({length: this.filamentLength(), volume: this.filamentVolume()});\u000a            }\u000a\u000a            //if (data.hasOwnProperty('filamentLength2') && data.filamentLength2 != 0) {\u000a            //    tool1 += formatFilament({length: data.filamentLength2, volume: data.filamentVolume2});\u000a            //}\u000a\u000a            if (tool0 !== "" && tool1 !== "") {\u000a                output = "Tool0: " + tool0 + "<br>Tool1: " + tool1;\u000a            } else {\u000a                if (tool0 !== "") {\u000a                    output = tool0;\u000a                } else {\u000a                    output = tool1;\u000a                }\u000a            }\u000a\u000a            return output;\u000a        };\u000a\u000a        self.export = function(type) {\u000a            if (self.listHelper.items().length > 0) {\u000a                return "plugin/printhistory/export/" + type + "?apikey=" + UI_API_KEY;\u000a            } else {\u000a                return false;\u000a            }\u000a        };\u000a\u000a        self.changeGraphRange = function (range) {\u000a            if (range == 'week') {\u000a                self.lastMonthGraphMinimum(moment(new Date()).subtract(1, 'weeks').valueOf());\u000a            } else if (range == 'month'){\u000a                self.lastMonthGraphMinimum(moment(new Date()).subtract(1, 'months').valueOf());\u000a            } else {\u000a                self.lastMonthGraphMinimum(moment(new Date()).subtract(1, 'quarter').valueOf());\u000a            }\u000a\u000a            self.updatePlots();\u000a        };\u000a\u000a        function printhistoryLabelFormatter(label, series) {\u000a            return "<div style='font-size:8pt; text-align:center; padding:2px; color: #666666;'>" + label + "<br/>" + Math.round(series.percent) + "%</div>";\u000a        }\u000a\u000a        self.updatePlots = function() {\u000a            if (!self.onHistoryTab) {\u000a                return;\u000a            }\u000a\u000a            if (self.dataIsStale) {\u000a                self.requestData();\u000a                return;\u000a            }\u000a\u000a            var lastmonth_graph = $("#printhistory-lastmonth-graph");\u000a            var success_graph = $("#printhistory-success-graph");\u000a\u000a            var lastmonthGraphOptions = {\u000a                series: {\u000a                    stack: 0,\u000a                    bars: {\u000a                        show: true,\u000a                        barWidth: 1000*60*60*24*0.6,\u000a                        lineWidth: 0,\u000a                        fill: 1,\u000a                        align: "center"\u000a                    }\u000a                },\u000a                yaxis: {\u000a                    tickDecimals: 0,\u000a                    min: 0\u000a                },\u000a                xaxis: {\u000a                    mode: "time",\u000a                    minTickSize: [1, "day"],\u000a                    min: self.lastMonthGraphMinimum(),\u000a                    max: new Date().getTime(),\u000a                    timeformat: "%m-%d"\u000a                },\u000a                legend: {\u000a                    show: false\u000a                }\u000a            };\u000a\u000a            var successGraphOptions = {\u000a                series: {\u000a                    pie: {\u000a                        show: true,\u000a                        radius: 1,\u000a                        label: {\u000a                            show: true,\u000a                            radius: 1/2,\u000a                            formatter: printhistoryLabelFormatter,\u000a                            background: {\u000a                                opacity: 0.5\u000a                            }\u000a                        }\u000a                    }\u000a                },\u000a                legend: {\u000a                    show: false\u000a                }\u000a            };\u000a\u000a            var successCount = 0;\u000a            var failureCount = 0;\u000a\u000a            var agreggateSuccess = {};\u000a            var agreggateFailure = {};\u000a\u000a            _.each(_.keys(self.pureData), function(key) {\u000a                var day = moment.unix(self.pureData[key].timestamp).hour(0).minute(0).second(0).millisecond(0).valueOf();\u000a\u000a                if (self.pureData[key].success == 1) {\u000a                    successCount += 1;\u000a\u000a                    if (!agreggateSuccess.hasOwnProperty(day)) {\u000a                        agreggateSuccess[day] = 0;\u000a                    }\u000a                    agreggateSuccess[day] += 1;\u000a                } else {\u000a                    failureCount += 1;\u000a\u000a                    if (!agreggateFailure.hasOwnProperty(day)) {\u000a                        agreggateFailure[day] = 0;\u000a                    }\u000a                    agreggateFailure[day] += 1;\u000a                }\u000a            });\u000a\u000a            var successArr = [];\u000a            var failureArr = [];\u000a\u000a            _.each(_.keys(agreggateSuccess), function(key) {\u000a                successArr.push([key, agreggateSuccess[key]]);\u000a            });\u000a\u000a            _.each(_.keys(agreggateFailure), function(key) {\u000a                failureArr.push([key, agreggateFailure[key]]);\u000a            });\u000a\u000a            var lastmonth_data = [\u000a                { label: "Success", color: '#31C448', data: successArr},\u000a                { label: "Failure", color: '#FF0000', data: failureArr}\u000a            ];\u000a\u000a            var success_data = [\u000a                { label: "Success", color: '#31C448', data: successCount},\u000a                { label: "Failure", color: '#FF0000', data: failureCount}\u000a            ];\u000a\u000a            $.plot(lastmonth_graph, lastmonth_data, lastmonthGraphOptions);\u000a            $.plot(success_graph, success_data, successGraphOptions);\u000a        };\u000a\u000a        /*\u000a         * -----------\u000a         *  SETTINGS\u000a         * -----------\u000a         */\u000a        self.addNewSpool = function() {\u000a            self.spool_inventory.push({name: "New", price:0, currency: "$"});\u000a        };\u000a\u000a        self.removeSpool = function(spool) {\u000a            self.spool_inventory.remove(spool);\u000a        };\u000a\u000a        self.onSettingsHidden = function() {\u000a            self.spool_inventory(self.spool_inventory_base.slice(0));\u000a        };\u000a\u000a        self.onSettingsBeforeSave = function () {\u000a            self.global_settings.settings.plugins.printhistory.spool_inventory(self.spool_inventory.slice(0));\u000a        }\u000a\u000a        /*\u000a         * -----------\u000a         *   DETAILS\u000a         * -----------\u000a         */\u000a        self.showDetailsDialog = function(selectedData) {\u000a            if (self.detailsDialog) {\u000a                self.itemForEditing(new HistoryItem(ko.mapping.toJS(selectedData)));\u000a\u000a                self.detailsDialog.modal("show");\u000a            }\u000a        };\u000a\u000a        self.onCancelDetails = function (event) {\u000a            if (event.target.id == "printhistory_details_dialog") {\u000a                self.itemForEditing(null);\u000a            }\u000a        }\u000a\u000a        self.addUpdateDetails = function(event) {\u000a            var icon = $(".btn-primary i", self.detailsDialog);\u000a            icon.addClass("icon-spinner icon-spin");\u000a\u000a            var payload = {\u000a                id: self.itemForEditing().id(),\u000a                note: self.itemForEditing().note(),\u000a                spool: self.itemForEditing().spool(),\u000a                user: self.itemForEditing().user(),\u000a                success: self.itemForEditing().success(),\u000a                filamentLength: self.itemForEditing().filamentLength(),\u000a                filamentVolume: self.itemForEditing().filamentVolume()\u000a            }\u000a\u000a            $.ajax({\u000a                url: "plugin/printhistory/details",\u000a                type: "PUT",\u000a                data: JSON.stringify(payload),\u000a                dataType: "json",\u000a                contentType: "application/json; charset=UTF-8",\u000a                success: self.closeDetails\u000a            }).always(function() {\u000a                icon.removeClass("icon-spinner icon-spin");\u000a            });\u000a        };\u000a\u000a        self.closeDetails = function(data) {\u000a            self.fromResponse(data);\u000a\u000a            self.listHelper.selectNone();\u000a\u000a            self.detailsDialog.modal("hide");\u000a        };\u000a\u000a        self.listHelper = new ItemListHelper(\u000a            "historyItems",\u000a            {\u000a                "fileNameAsc": function (a, b) {\u000a                    // sorts ascending\u000a                    if (a.fileName().toLocaleLowerCase() < b.fileName().toLocaleLowerCase()) return -1;\u000a                    if (a.fileName().toLocaleLowerCase() > b.fileName().toLocaleLowerCase()) return 1;\u000a                    return 0;\u000a                },\u000a                "fileNameDesc": function (a, b) {\u000a                    // sorts ascending\u000a                    if (a.fileName().toLocaleLowerCase() < b.fileName().toLocaleLowerCase()) return 1;\u000a                    if (a.fileName().toLocaleLowerCase() > b.fileName().toLocaleLowerCase()) return -1;\u000a                    return 0;\u000a                },\u000a                "timestampAsc": function (a, b) {\u000a                    // sorts descending\u000a                    if (a.timestamp() > b.timestamp()) return 1;\u000a                    if (a.timestamp() < b.timestamp()) return -1;\u000a                    return 0;\u000a                },\u000a                "timestampDesc": function (a, b) {\u000a                    // sorts descending\u000a                    if (a.timestamp() > b.timestamp()) return -1;\u000a                    if (a.timestamp() < b.timestamp()) return 1;\u000a                    return 0;\u000a                },\u000a                "printTimeAsc": function (a, b) {\u000a                    // sorts descending\u000a                    if (a.printTime() > b.printTime()) return 1;\u000a                    if (a.printTime() < b.printTime()) return -1;\u000a                    return 0;\u000a                },\u000a                "printTimeDesc": function (a, b) {\u000a                    // sorts descending\u000a                    if (a.printTime() > b.printTime()) return -1;\u000a                    if (a.printTime() < b.printTime()) return 1;\u000a                    return 0;\u000a                }\u000a            },\u000a            {\u000a                "all": function (item) {\u000a                    return true;\u000a                },\u000a                "successful": function (item) {\u000a                    return (item.success() == 1);\u000a                },\u000a                "failed": function (item) {\u000a                    return (item.success() == 0);\u000a                }\u000a            },\u000a            "timestamp", ["all"], [["all", "successful", "failed"]], 10\u000a        );\u000a\u000a        self.listHelper.items.subscribe(function(newValue) {\u000a            var totalTime = 0;\u000a            var totalUsage = {\u000a                length: 0,\u000a                volume: 0\u000a            };\u000a            var averageUsage = {\u000a                length: 0,\u000a                volume: 0\u000a            };\u000a\u000a            var itemList = newValue;\u000a            var itemListLength = itemList.length;\u000a            for (var i = 0; i < itemListLength; i++) {\u000a                totalTime += itemList[i].printTime();\u000a\u000a                totalUsage.length += itemList[i].filamentLength();\u000a                totalUsage.volume += itemList[i].filamentVolume();\u000a            }\u000a\u000a            self.totalTime(formatDuration(totalTime));\u000a            self.totalUsage(formatFilament(totalUsage));\u000a\u000a            averageUsage.length = totalUsage.length / itemListLength;\u000a            averageUsage.volume = totalUsage.volume / itemListLength;\u000a\u000a            self.averageTime(formatDuration(totalTime / itemListLength));\u000a            self.averageUsage(formatFilament(averageUsage));\u000a        });\u000a\u000a        self.fileNameSort = function() {\u000a            if (self.listHelper.currentSorting() == "fileNameAsc") {\u000a                self.listHelper.changeSorting("fileNameDesc");\u000a            } else {\u000a                self.listHelper.changeSorting("fileNameAsc");\u000a            }\u000a        };\u000a\u000a        self.timeStampSort = function() {\u000a            if (self.listHelper.currentSorting() == "timestampDesc") {\u000a                self.listHelper.changeSorting("timestampAsc");\u000a            } else {\u000a                self.listHelper.changeSorting("timestampDesc");\u000a            }\u000a        };\u000a\u000a        self.printTimeSort = function() {\u000a            if (self.listHelper.currentSorting() == "printTimeDesc") {\u000a                self.listHelper.changeSorting("printTimeAsc");\u000a            } else {\u000a                self.listHelper.changeSorting("printTimeDesc");\u000a            }\u000a        };\u000a\u000a        self.sortOrder = function(orderType) {\u000a            var order = "";\u000a\u000a            if (orderType == "fileName") {\u000a                order = (self.listHelper.currentSorting() == 'fileNameAsc') ? '(' + _('ascending') + ')' : (self.listHelper.currentSorting() == 'fileNameDesc') ? '(' + _('descending') + ')' : '';\u000a            } else if (orderType == "timestamp") {\u000a                order = (self.listHelper.currentSorting() == 'timestampAsc') ? '(' + _('ascending') + ')' : (self.listHelper.currentSorting() == 'timestampDesc') ? '(' + _('descending') + ')' : '';\u000a            } else {\u000a                order = (self.listHelper.currentSorting() == 'printTimeAsc') ? '(' + _('ascending') + ')' : (self.listHelper.currentSorting() == 'printTimeDesc') ? '(' + _('descending') + ')' : '';\u000a            }\u000a\u000a            return order;\u000a        };\u000a    }\u000a\u000a    ADDITIONAL_VIEWMODELS.push({\u000a        construct: PrintHistoryViewModel,\u000a        name: "PrintHistoryViewModel",\u000a        dependencies: ["loginStateViewModel", "settingsViewModel", "usersViewModel"],\u000a        elements: ["#tab_plugin_printhistory", "#settings_plugin_printhistory"]\u000a});\u000a});\u000a;\u000a
p0
.