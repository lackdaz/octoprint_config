V// source: plugin/octolapse/js/octolapse.profiles.printer.js\u000a/*\u000a##################################################################################\u000a# Octolapse - A plugin for OctoPrint used for making stabilized timelapse videos.\u000a# Copyright (C) 2017  Brad Hochgesang\u000a##################################################################################\u000a# This program is free software: you can redistribute it and/or modify\u000a# it under the terms of the GNU Affero General Public License as published\u000a# by the Free Software Foundation, either version 3 of the License, or\u000a# (at your option) any later version.\u000a#\u000a# This program is distributed in the hope that it will be useful,\u000a# but WITHOUT ANY WARRANTY; without even the implied warranty of\u000a# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\u000a# GNU Affero General Public License for more details.\u000a#\u000a# You should have received a copy of the GNU Affero General Public License\u000a# along with this program.  If not, see the following:\u000a# https://github.com/FormerLurker/Octolapse/blob/master/LICENSE\u000a#\u000a# You can contact the author either through the git-hub repository, or at the\u000a# following email address: FormerLurker@pm.me\u000a##################################################################################\u000a*/\u000a$(function() {\u000a    Octolapse.PrinterProfileValidationRules = {\u000a        rules: {\u000a            min_x: { lessThanOrEqual: "#octolapse_printer_max_x" },\u000a            max_x: { greaterThanOrEqual: "#octolapse_printer_min_x"},\u000a            min_y: { lessThanOrEqual: "#octolapse_printer_max_y" },\u000a            max_y: { greaterThanOrEqual: "#octolapse_printer_min_y" },\u000a            min_z: { lessThanOrEqual: "#octolapse_printer_max_z" },\u000a            max_z: { greaterThanOrEqual: "#octolapse_printer_min_z" },\u000a            auto_position_detection_commands: { csvString: true },\u000a            printer_profile_other_slicer_retract_length: {required: true},\u000a            printer_profile_slicer_other_z_hop: {required: true},\u000a            slicer_slic3r_pe_small_perimeter_speed: {slic3rPEFloatOrPercent: true, slic3rPEFloatOrPercentSteps: true},\u000a            slicer_slic3r_pe_external_perimeter_speed: {slic3rPEFloatOrPercent: true, slic3rPEFloatOrPercentSteps: true},\u000a            slicer_slic3r_pe_solid_infill_speed: {slic3rPEFloatOrPercent: true, slic3rPEFloatOrPercentSteps: true},\u000a            slicer_slic3r_pe_top_solid_infill_speed: {slic3rPEFloatOrPercent: true, slic3rPEFloatOrPercentSteps: true},\u000a            slicer_slic3r_pe_first_layer_speed: {slic3rPEFloatOrPercent: true, slic3rPEFloatOrPercentSteps: true}\u000a        },\u000a        messages: {\u000a            name: "Please enter a name for your profile",\u000a            min_x : { lessThanOrEqual: "Must be less than or equal to the 'X - Width Max' field." },\u000a            max_x : { greaterThanOrEqual: "Must be greater than or equal to the ''X - Width Min'' field." },\u000a            min_y : { lessThanOrEqual: "Must be less than or equal to the 'Y - Width Max' field." },\u000a            max_y : { greaterThanOrEqual: "Must be greater than or equal to the ''Y - Width Min'' field." },\u000a            min_z : { lessThanOrEqual: "Must be less than or equal to the 'Z - Width Max' field." },\u000a            max_z: { greaterThanOrEqual: "Must be greater than or equal to the ''Z - Width Min'' field." },\u000a            auto_position_detection_commands: { csvString:"Please enter a series of gcode commands (without parameters) separated by commas, or leave this field blank." }\u000a        }\u000a    };\u000a\u000a    Octolapse.PrinterProfileViewModel = function (values) {\u000a        var self = this;\u000a        self.profileTypeName = ko.observable("Printer")\u000a        self.guid = ko.observable(values.guid);\u000a        self.name = ko.observable(values.name);\u000a        self.description = ko.observable(values.description);\u000a        // Saved by user flag, sent from server\u000a        self.saved_by_user_flag = ko.observable(values.has_been_saved_by_user);\u000a        // has_been_saved_by_user profile setting, computed and always returns true\u000a        // This will switch has_been_saved_by_user from false to true\u000a        // after any user save\u000a        self.has_been_saved_by_user = ko.observable(true);\u000a        self.slicer_type = ko.observable(values.slicer_type);\u000a        self.snapshot_command = ko.observable(values.snapshot_command);\u000a        self.printer_position_confirmation_tolerance = ko.observable(values.printer_position_confirmation_tolerance);\u000a        self.auto_detect_position = ko.observable(values.auto_detect_position);\u000a        self.auto_position_detection_commands = ko.observable(values.auto_position_detection_commands);\u000a        self.origin_x = ko.observable(values.origin_x);\u000a        self.origin_y = ko.observable(values.origin_y);\u000a        self.origin_z = ko.observable(values.origin_z);\u000a        self.abort_out_of_bounds = ko.observable(values.abort_out_of_bounds);\u000a        self.override_octoprint_print_volume = ko.observable(values.override_octoprint_print_volume);\u000a        self.min_x = ko.observable(values.min_x);\u000a        self.max_x = ko.observable(values.max_x);\u000a        self.min_y = ko.observable(values.min_y);\u000a        self.max_y = ko.observable(values.max_y);\u000a        self.min_z = ko.observable(values.min_z);\u000a        self.max_z = ko.observable(values.max_z);\u000a        self.priming_height = ko.observable(values.priming_height);\u000a        self.e_axis_default_mode = ko.observable(values.e_axis_default_mode);\u000a        self.g90_influences_extruder = ko.observable(values.g90_influences_extruder);\u000a        self.xyz_axes_default_mode = ko.observable(values.xyz_axes_default_mode);\u000a        self.units_default = ko.observable(values.units_default);\u000a        self.axis_speed_display_units = ko.observable(values.axis_speed_display_units);\u000a        self.default_firmware_retractions = ko.observable(values.default_firmware_retractions);\u000a        self.default_firmware_retractions_zhop = ko.observable(values.default_firmware_retractions_zhop);\u000a        self.suppress_snapshot_command_always = ko.observable(values.suppress_snapshot_command_always);\u000a\u000a        self.create_helpers = function(values){\u000a            var self = this;\u000a            self.other_slicer_viewmodel = new Octolapse.create_other_slicer_viewmodel(values);\u000a            self.slic3r_pe_viewmodel = new Octolapse.create_slic3r_pe_viewmodel(values);\u000a            self.cura_viewmodel = new Octolapse.create_cura_viewmodel(values);\u000a            self.simplify_3d_viewmodel = new Octolapse.create_simplify_3d_viewmodel(values);\u000a        };\u000a        self.helpers = new self.create_helpers(values);\u000a        /*\u000a            Create a computed for each profile variable (settings.py - printer class)\u000a        */\u000a        self.retract_length = ko.pureComputed(function(){\u000a           return self.getCurrentSlicerVariables(self.slicer_type()).get_retract_length();\u000a        });\u000a        self.retract_speed = ko.pureComputed(function(){\u000a           return self.getCurrentSlicerVariables(self.slicer_type()).get_retract_speed();\u000a        });\u000a        self.detract_speed = ko.pureComputed(function(){\u000a           return self.getCurrentSlicerVariables(self.slicer_type()).get_detract_speed();\u000a        });\u000a        self.movement_speed = ko.pureComputed(function(){\u000a           return self.getCurrentSlicerVariables(self.slicer_type()).get_movement_speed();\u000a        });\u000a        self.z_hop = ko.pureComputed(function(){\u000a           return self.getCurrentSlicerVariables(self.slicer_type()).get_z_hop();\u000a        });\u000a        self.z_hop_speed = ko.pureComputed(function(){\u000a           return self.getCurrentSlicerVariables(self.slicer_type()).get_z_hop_speed();\u000a        });\u000a        self.maximum_z_speed = ko.pureComputed(function(){\u000a           var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_maximum_z_speed !== undefined)\u000a                return slicer.get_maximum_z_speed();\u000a            return null;\u000a        });\u000a        self.print_speed = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_print_speed !== undefined)\u000a                return slicer.get_print_speed();\u000a            return null;\u000a        });\u000a        self.perimeter_speed = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_perimeter_speed !== undefined)\u000a                return slicer.get_perimeter_speed();\u000a            return null;\u000a        });\u000a        self.small_perimeter_speed = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_small_perimeter_speed !== undefined)\u000a                return slicer.get_small_perimeter_speed();\u000a            return null;\u000a        });\u000a        self.external_perimeter_speed = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_external_perimeter_speed !== undefined)\u000a                return slicer.get_external_perimeter_speed();\u000a            return null;\u000a        });\u000a        self.infill_speed = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_infill_speed !== undefined)\u000a                return slicer.get_infill_speed();\u000a            return null;\u000a        });\u000a        self.solid_infill_speed = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_solid_infill_speed !== undefined)\u000a                return slicer.get_solid_infill_speed();\u000a            return null;\u000a        });\u000a        self.top_solid_infill_speed = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_top_solid_infill_speed !== undefined)\u000a                return slicer.get_top_solid_infill_speed();\u000a            return null;\u000a        });\u000a        self.support_speed = ko.pureComputed(function(){\u000a           var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_support_speed !== undefined)\u000a                return slicer.get_support_speed();\u000a            return null;\u000a        });\u000a        self.bridge_speed = ko.pureComputed(function(){\u000a           var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_bridge_speed !== undefined)\u000a                return slicer.get_bridge_speed();\u000a            return null;\u000a        });\u000a        self.gap_fill_speed = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_gap_fill_speed !== undefined)\u000a                return slicer.get_gap_fill_speed();\u000a            return null;\u000a        });\u000a        self.first_layer_speed = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_first_layer_speed !== undefined)\u000a                return slicer.get_first_layer_speed();\u000a            return null;\u000a        });\u000a        self.first_layer_travel_speed = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_first_layer_travel_speed !== undefined)\u000a                return slicer.get_first_layer_travel_speed();\u000a            return null;\u000a        });\u000a        self.skirt_brim_speed = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_skirt_brim_speed !== undefined)\u000a                return slicer.get_skirt_brim_speed();\u000a            return null;\u000a        });\u000a        self.above_raft_speed = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_above_raft_speed !== undefined)\u000a                return slicer.get_above_raft_speed();\u000a            return null;\u000a        });\u000a        self.ooze_shield_speed = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_ooze_shield_speed !== undefined)\u000a                return slicer.get_ooze_shield_speed();\u000a            return null;\u000a        });\u000a        self.prime_pillar_speed = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_prime_pillar_speed !== undefined)\u000a                return slicer.get_prime_pillar_speed();\u000a            return null;\u000a        });\u000a        self.speed_tolerance = ko.pureComputed(function(){\u000a           return self.getCurrentSlicerVariables(self.slicer_type()).get_speed_tolerance();\u000a        });\u000a        self.axis_speed_display_units = ko.pureComputed(function(){\u000a           return self.getCurrentSlicerVariables(self.slicer_type()).get_axis_speed_display_units();\u000a        });\u000a        self.first_layer_speed_multiplier = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_first_layer_speed_multiplier !== undefined)\u000a                return slicer.get_first_layer_speed_multiplier();\u000a            return null;\u000a        });\u000a        self.above_raft_speed_multiplier = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_above_raft_speed_multiplier !== undefined)\u000a                return slicer.get_above_raft_speed_multiplier();\u000a            return null;\u000a        });\u000a        self.prime_pillar_speed_multiplier = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_prime_pillar_speed_multiplier !== undefined)\u000a                return slicer.get_prime_pillar_speed_multiplier();\u000a            return null;\u000a        });\u000a        self.ooze_shield_speed_multiplier = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_ooze_shield_speed_multiplier !== undefined)\u000a                return slicer.get_ooze_shield_speed_multiplier();\u000a            return null;\u000a        });\u000a        self.outline_speed_multiplier = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_outline_speed_multiplier !== undefined)\u000a                return slicer.get_outline_speed_multiplier();\u000a            return null;\u000a        });\u000a        self.solid_infill_speed_multiplier = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_solid_infill_speed_multiplier !== undefined)\u000a                return slicer.get_solid_infill_speed_multiplier();\u000a            return null;\u000a        });\u000a        self.support_structure_speed_multiplier = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_support_structure_speed_multiplier !== undefined)\u000a                return slicer.get_support_structure_speed_multiplier();\u000a            return null;\u000a        });\u000a        self.bridging_speed_multiplier = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_bridging_speed_multiplier !== undefined)\u000a                return slicer.get_bridging_speed_multiplier();\u000a            return null;\u000a        });\u000a        self.small_perimeter_speed_multiplier = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_small_perimeter_speed_multiplier !== undefined)\u000a                return slicer.get_small_perimeter_speed_multiplier();\u000a            return null;\u000a        });\u000a        self.external_perimeter_speed_multiplier = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_external_perimeter_speed_multiplier !== undefined)\u000a                return slicer.get_external_perimeter_speed_multiplier();\u000a            return null;\u000a        });\u000a        self.top_solid_infill_speed_multiplier = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_top_solid_infill_speed_multiplier !== undefined)\u000a                return slicer.get_top_solid_infill_speed_multiplier();\u000a            return null;\u000a        });\u000a        self.small_perimeter_speed_text = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_small_perimeter_speed_text !== undefined)\u000a                return slicer.get_small_perimeter_speed_text();\u000a            return null;\u000a        });\u000a        self.external_perimeter_speed_text = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_external_perimeter_speed_text !== undefined)\u000a                return slicer.get_external_perimeter_speed_text();\u000a            return null;\u000a        });\u000a        self.solid_infill_speed_text = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_solid_infill_speed_text !== undefined)\u000a                return slicer.get_solid_infill_speed_text();\u000a            return null;\u000a        });\u000a        self.top_solid_infill_speed_text = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_top_solid_infill_speed_text !== undefined)\u000a                return slicer.get_top_solid_infill_speed_text();\u000a            return null;\u000a        });\u000a        self.first_layer_speed_text = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_first_layer_speed_text !== undefined)\u000a                return slicer.get_first_layer_speed_text();\u000a            return null;\u000a        });\u000a        self.slicer_speed_list = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.getSlicerSpeedList !== undefined)\u000a                return slicer.getSlicerSpeedList();\u000a            return [];\u000a        });\u000a        self.num_slow_layers = ko.pureComputed(function(){\u000a            var slicer = self.getCurrentSlicerVariables(self.slicer_type());\u000a            if (slicer.get_num_slow_layers !== undefined)\u000a                return slicer.get_num_slow_layers();\u000a            return null;\u000a        });\u000a        self.getNonUniqueSpeeds = ko.pureComputed(function () {\u000a            // Add all speeds to an array\u000a            var duplicate_map = {};\u000a\u000a            var speed_array = self.slicer_speed_list();\u000a\u000a            for (var index = 0, size = speed_array.length; index < size; index++) {\u000a                var cur_speed = speed_array[index];\u000a                if(cur_speed.speed != 0 && !cur_speed.speed)\u000a                    continue;\u000a                if(duplicate_map[cur_speed.speed])\u000a                    duplicate_map[cur_speed.speed].push(cur_speed.type);\u000a                else\u000a                    duplicate_map[cur_speed.speed] = [cur_speed.type];\u000a            }\u000a            var output = []\u000a            for (var key in duplicate_map) {\u000a                var dup_item = duplicate_map[key];\u000a                var is_first = true;\u000a                var num_items = dup_item.length\u000a                if(num_items > 1) {\u000a                    if(key == 0)\u000a                        key = "(previous axis speed) 0 ";\u000a                    var cur_output_string = key.toString() + " mm-min: ";\u000a\u000a                    for (var index = 0; index < num_items; index ++) {\u000a                        if (!is_first)\u000a                            cur_output_string += ", ";\u000a                        cur_output_string += dup_item[index];\u000a                        is_first = false;\u000a                    }\u000a                    cur_output_string += "";\u000a                    output.push(cur_output_string);\u000a                }\u000a            }\u000a            return output;\u000a        });\u000a        self.getMissingSpeedsList = ko.pureComputed(function () {\u000a                    // Add all speeds to an array\u000a            var missingSpeeds = [];\u000a\u000a            var speed_array = self.slicer_speed_list();\u000a            for (var index = 0, size = speed_array.length; index < size; index++) {\u000a                var cur_speed = speed_array[index];\u000a                if(cur_speed.speed != 0 && !cur_speed.speed)\u000a                    missingSpeeds.push(cur_speed.type);\u000a            }\u000a\u000a            return missingSpeeds;\u000a        });\u000a        self.getCurrentSlicerVariables = function() {\u000a            switch(self.slicer_type())\u000a            {\u000a                case 'other':\u000a                    return self.helpers.other_slicer_viewmodel;\u000a                case 'slic3r-pe':\u000a                    return self.helpers.slic3r_pe_viewmodel;\u000a                case 'cura':\u000a                    return self.helpers.cura_viewmodel;\u000a                case 'simplify-3d':\u000a                    return self.helpers.simplify_3d_viewmodel;\u000a            }\u000a        }\u000a        self.toJS = function()\u000a        {\u000a            var copy = ko.toJS(self);\u000a            delete copy.helpers;\u000a            return copy;\u000a        };\u000a\u000a    };\u000a\u000a\u000a});\u000a\u000a;\u000a
p0
.