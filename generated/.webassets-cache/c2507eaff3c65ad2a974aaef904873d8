V// source: plugin/octolapse/js/octolapse.profiles.printer.slicer.slic3r_pe.js\u000aOctolapse.create_slic3r_pe_viewmodel = function (profile_observables) {\u000a    var self = this;\u000a    self.get_axis_speed_display_units = function () {\u000a        return "mm-sec"\u000a    };\u000a    self.get_speed_tolerance = function () {\u000a        // 0.005 mm/min in mm-sec\u000a        return 0.01 / 60.0 / 2.0;\u000a    };\u000a\u000a    self.round_to_increment_mm_min = 0.00000166667;\u000a    self.round_to_increment_mm_sec = 0.0001;\u000a    self.round_to_percent = 0.0001;\u000a    self.round_to_increment_retraction_length = 0.000001;\u000a    self.round_to_increment_lift_z = 0.0001;\u000a\u000a    // Options for the round_to_increment extender for lengths\u000a    self.round_to_increment_options_retraction_length = {\u000a        round_to_increment:{round_to_increment: self.round_to_increment_retraction_length}\u000a    };\u000a\u000a    // Options for the round_to_increment extender for lengths\u000a    self.round_to_increment_options_lift_z = {\u000a        round_to_increment:{round_to_increment: self.round_to_increment_lift_z}\u000a    };\u000a    self.rounding_extender_options = {\u000a        axis_speed_unit:{\u000a            round_to_increment_mm_min: self.round_to_increment_mm_min,\u000a            round_to_increment_mm_sec:self.round_to_increment_mm_sec,\u000a            current_units_observable: self.get_axis_speed_display_units}};\u000a\u000a    self.rounding_extender_percent_options = {\u000a        axis_speed_unit:{\u000a            round_to_increment_mm_min: self.round_to_increment_mm_min,\u000a            round_to_increment_mm_sec:self.round_to_increment_mm_sec,\u000a            current_units_observable: self.get_axis_speed_display_units,\u000a            round_to_percent: self.round_to_percent,\u000a            return_text: true}};\u000a\u000a    // Initialize profile variables from observables\u000a    // Lengths\u000a    self.retract_length = ko.observable(profile_observables.retract_length).extend(self.round_to_increment_options_retraction_length);\u000a    self.z_hop = ko.observable(profile_observables.z_hop).extend(self.round_to_increment_options_lift_z);\u000a\u000a    // Speeds\u000a    self.retract_speed = ko.observable(\u000a        Octolapse.convertAxisSpeedUnit(\u000a            profile_observables.retract_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)).extend(self.rounding_extender_options);\u000a    self.detract_speed = ko.observable(\u000a        Octolapse.convertAxisSpeedUnit(\u000a            profile_observables.detract_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)).extend(self.rounding_extender_options);\u000a    self.movement_speed = ko.observable(\u000a        Octolapse.convertAxisSpeedUnit(\u000a            profile_observables.movement_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)).extend(self.rounding_extender_options);\u000a    self.perimeter_speed = ko.observable(\u000a        Octolapse.convertAxisSpeedUnit(\u000a            profile_observables.perimeter_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)).extend(self.rounding_extender_options);\u000a    self.infill_speed = ko.observable(\u000a        Octolapse.convertAxisSpeedUnit(\u000a            profile_observables.infill_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)).extend(self.rounding_extender_options);\u000a    self.support_speed = ko.observable(\u000a        Octolapse.convertAxisSpeedUnit(\u000a            profile_observables.support_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)).extend(self.rounding_extender_options);\u000a    self.bridge_speed = ko.observable(\u000a        Octolapse.convertAxisSpeedUnit(\u000a            profile_observables.bridge_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)).extend(self.rounding_extender_options);\u000a    self.gap_fill_speed = ko.observable(\u000a        Octolapse.convertAxisSpeedUnit(\u000a            profile_observables.gap_fill_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)).extend(self.rounding_extender_options);\u000a\u000a    // Speeds/Percents\u000a    var small_perimeter_speed = profile_observables.small_perimeter_speed_text || (\u000a        Octolapse.convertAxisSpeedUnit(\u000a            profile_observables.small_perimeter_speed,\u000a            self.get_axis_speed_display_units(),\u000a            profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)\u000a    );\u000a    self.small_perimeter_speed_text = ko.observable((small_perimeter_speed || "").toString()).extend(self.rounding_extender_percent_options);\u000a\u000a    var external_perimeter_speed = profile_observables.external_perimeter_speed_text || (\u000a        Octolapse.convertAxisSpeedUnit(\u000a            profile_observables.external_perimeter_speed,\u000a            self.get_axis_speed_display_units(),\u000a            profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)\u000a    );\u000a    self.external_perimeter_speed_text = ko.observable((external_perimeter_speed || "").toString()).extend(self.rounding_extender_percent_options);\u000a\u000a    var solid_infill_speed = profile_observables.solid_infill_speed_text || (\u000a        Octolapse.convertAxisSpeedUnit(\u000a            profile_observables.solid_infill_speed,\u000a            self.get_axis_speed_display_units(),\u000a            profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)\u000a    );\u000a    self.solid_infill_speed_text = ko.observable((solid_infill_speed || "").toString()).extend(self.rounding_extender_percent_options);\u000a\u000a    var top_solid_infill_speed = profile_observables.top_solid_infill_speed_text || (\u000a        Octolapse.convertAxisSpeedUnit(\u000a            profile_observables.top_solid_infill_speed,\u000a            self.get_axis_speed_display_units(),\u000a            profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)\u000a    );\u000a    self.top_solid_infill_speed_text = ko.observable((top_solid_infill_speed || "").toString()).extend(self.rounding_extender_percent_options);\u000a\u000a    var first_layer_speed = profile_observables.first_layer_speed_text || (\u000a        Octolapse.convertAxisSpeedUnit(\u000a            profile_observables.first_layer_speed,\u000a            self.get_axis_speed_display_units(),\u000a            profile_observables.axis_speed_display_units, self.round_to_increment_mm_sec)\u000a    );\u000a    self.first_layer_speed_text = ko.observable((first_layer_speed || "").toString()).extend(self.rounding_extender_percent_options);\u000a    /*\u000a        Create a getter for each profile variable (settings.py - printer class)\u000a    */\u000a    self.get_retract_length = function () {\u000a        return self.retract_length();\u000a    };\u000a    self.get_retract_speed = function () {\u000a        return self.retract_speed();\u000a    };\u000a    self.get_detract_speed = function () {\u000a        if(self.detract_speed() === 0)\u000a            return self.retract_speed();\u000a\u000a        return self.detract_speed();\u000a    };\u000a    self.get_movement_speed = function () {\u000a        return self.movement_speed();\u000a    };\u000a    self.get_z_hop = function () {\u000a        return self.z_hop();\u000a    };\u000a    self.get_z_hop_speed = function () {\u000a        return self.movement_speed();\u000a    };\u000a    self.get_maximum_z_speed = function () {\u000a        return null;\u000a    };\u000a    self.get_print_speed = function () {\u000a        return null;\u000a    };\u000a    self.get_perimeter_speed = function () {\u000a        return self.perimeter_speed();\u000a    };\u000a    self.get_small_perimeter_speed = function () {\u000a        var value = self.small_perimeter_speed_text();\u000a        if (Octolapse.isPercent(value)) {\u000a            var percent = Octolapse.parsePercent(value);\u000a            if (percent != null && self.perimeter_speed() != null)\u000a                return self.perimeter_speed() * percent / 100.0;\u000a        }\u000a        else {\u000a            return Octolapse.parseFloat(value);\u000a        }\u000a        return null;\u000a    };\u000a    self.get_small_perimeter_speed_multiplier = function () {\u000a        var value = self.small_perimeter_speed_text();\u000a        if (!Octolapse.isPercent(value))\u000a            return null;\u000a        return Octolapse.parsePercent(value);\u000a    }\u000a    self.get_external_perimeter_speed = function () {\u000a        var value = self.external_perimeter_speed_text();\u000a        if (Octolapse.isPercent(value)) {\u000a            var percent = Octolapse.parsePercent(value);\u000a            if (percent != null && self.perimeter_speed() != null)\u000a                return self.perimeter_speed() * percent / 100.0;\u000a        }\u000a        else {\u000a            return Octolapse.parseFloat(value);\u000a        }\u000a        return null;\u000a    };\u000a    self.get_external_perimeter_speed_multiplier = function () {\u000a        var value = self.external_perimeter_speed_text();\u000a        if (!Octolapse.isPercent(value))\u000a            return null;\u000a        return Octolapse.parsePercent(value);\u000a    }\u000a\u000a    self.get_infill_speed = function () {\u000a        return self.infill_speed();\u000a    };\u000a    self.get_solid_infill_speed = function () {\u000a        var value = self.solid_infill_speed_text();\u000a        if (Octolapse.isPercent(value)) {\u000a            var percent = Octolapse.parsePercent(value);\u000a            if (percent != null && self.infill_speed() != null)\u000a                return self.infill_speed() * percent / 100.0;\u000a        }\u000a        else {\u000a            return Octolapse.parseFloat(value);\u000a        }\u000a        return null;\u000a    };\u000a    self.get_solid_infill_speed_multiplier = function () {\u000a        var value = self.solid_infill_speed_text();\u000a        if (!Octolapse.isPercent(value))\u000a            return null;\u000a        return Octolapse.parsePercent(value);\u000a    }\u000a    self.get_top_solid_infill_speed = function () {\u000a        var value = self.top_solid_infill_speed_text();\u000a        if (Octolapse.isPercent(value)) {\u000a            var percent = Octolapse.parsePercent(value);\u000a            if (percent != null && self.get_solid_infill_speed() != null)\u000a                return self.get_solid_infill_speed() * percent / 100.0;\u000a        }\u000a        else {\u000a            return Octolapse.parseFloat(value);\u000a        }\u000a        return null;\u000a    };\u000a    self.get_top_solid_infill_speed_multiplier = function () {\u000a        var value = self.top_solid_infill_speed_text();\u000a        if (!Octolapse.isPercent(value))\u000a            return null;\u000a        return Octolapse.parsePercent(value);\u000a    }\u000a\u000a    self.get_support_speed = function () {\u000a        return self.support_speed();\u000a    };\u000a    self.get_bridge_speed = function () {\u000a        return self.bridge_speed();\u000a    };\u000a    self.get_gap_fill_speed = function () {\u000a        return self.gap_fill_speed();\u000a    };\u000a    self.get_first_layer_speed = function () {\u000a        var value = self.first_layer_speed_text();\u000a        if (Octolapse.isPercent(value))\u000a            return null;\u000a\u000a        return Octolapse.parseFloat(value);\u000a    };\u000a    self.get_first_layer_speed_multiplier = function () {\u000a        var value = self.first_layer_speed_text();\u000a        if (!Octolapse.isPercent(value))\u000a            return null;\u000a        return Octolapse.parsePercent(value);\u000a    };\u000a\u000a    self.get_first_layer_travel_speed = function () {\u000a        return self.movement_speed();\u000a    };\u000a\u000a    self.get_small_perimeter_speed_text = function () {\u000a        return self.small_perimeter_speed_text();\u000a    };\u000a    self.get_external_perimeter_speed_text = function () {\u000a        return self.external_perimeter_speed_text();\u000a    };\u000a    self.get_solid_infill_speed_text = function () {\u000a        return self.solid_infill_speed_text();\u000a    };\u000a    self.get_top_solid_infill_speed_text = function () {\u000a        return self.top_solid_infill_speed_text();\u000a    };\u000a    self.get_first_layer_speed_text = function () {\u000a        return self.first_layer_speed_text();\u000a    };\u000a\u000a    self.get_num_slow_layers = function () {\u000a        return 1;\u000a    }\u000a    // Get a list of speeds for use with feature detection\u000a\u000a    self.getSlicerSpeedList = function () {\u000a        var inc = 0.01;\u000a        var ret_det_inc = 1;\u000a        var speed_list = [\u000a            {speed: Octolapse.roundToIncrement(self.get_retract_speed(), ret_det_inc) * 60, type: "Retraction"},\u000a            {speed: Octolapse.roundToIncrement(self.get_detract_speed(), ret_det_inc) * 60, type: "Detraction"},\u000a            {speed: Octolapse.roundToIncrement(self.get_perimeter_speed() * 60, inc), type: "Perimeters"},\u000a            {speed: Octolapse.roundToIncrement(self.get_small_perimeter_speed() * 60, inc), type: "Small Perimeters"},\u000a            {\u000a                speed: Octolapse.roundToIncrement(self.get_external_perimeter_speed() * 60, inc),\u000a                type: "External Perimeters"\u000a            },\u000a            {speed: Octolapse.roundToIncrement(self.get_infill_speed() * 60, inc), type: "Infill"},\u000a            {speed: Octolapse.roundToIncrement(self.get_solid_infill_speed() * 60, inc), type: "Solid Infill"},\u000a            {speed: Octolapse.roundToIncrement(self.get_top_solid_infill_speed() * 60, inc), type: "Top Solid Infill"},\u000a            {speed: Octolapse.roundToIncrement(self.get_support_speed() * 60, inc), type: "Supports"},\u000a            {speed: Octolapse.roundToIncrement(self.get_bridge_speed() * 60, inc), type: "Bridges"},\u000a            {speed: Octolapse.roundToIncrement(self.get_gap_fill_speed() * 60, inc), type: "Gaps"},\u000a            {speed: Octolapse.roundToIncrement(self.get_movement_speed() * 60, inc), type: "Movement"}\u000a        ];\u000a\u000a        if (self.get_first_layer_speed_multiplier() == null)\u000a            speed_list.push({speed: self.get_first_layer_speed(), type: "First Layer"})\u000a        else {\u000a            Array.prototype.push.apply(speed_list, [\u000a                {\u000a                    speed: Octolapse.roundToIncrement(self.get_perimeter_speed() * self.get_first_layer_speed_multiplier() / 100.0 * 60, inc),\u000a                    type: "First Layer Perimeters"\u000a                },\u000a                {\u000a                    speed: Octolapse.roundToIncrement(self.get_small_perimeter_speed() * self.get_first_layer_speed_multiplier() * 60 / 100.0, inc),\u000a                    type: "First Layer Small Perimeters"\u000a                },\u000a                {\u000a                    speed: Octolapse.roundToIncrement(self.get_external_perimeter_speed() * self.get_first_layer_speed_multiplier() * 60 / 100.0, inc),\u000a                    type: "First Layer External Perimeters"\u000a                },\u000a                {\u000a                    speed: Octolapse.roundToIncrement(self.get_infill_speed() * self.get_first_layer_speed_multiplier() * 60 / 100.0, inc),\u000a                    type: "First Layer Infill"\u000a                },\u000a                {\u000a                    speed: Octolapse.roundToIncrement(self.get_solid_infill_speed() * self.get_first_layer_speed_multiplier() * 60 / 100.0, inc),\u000a                    type: "First Layer Solid Infill"\u000a                },\u000a                {\u000a                    speed: Octolapse.roundToIncrement(self.get_top_solid_infill_speed() * self.get_first_layer_speed_multiplier() * 60 / 100.0, inc),\u000a                    type: "First Layer Top Solid Infill"\u000a                },\u000a                {\u000a                    speed: Octolapse.roundToIncrement(self.get_support_speed() * self.get_first_layer_speed_multiplier() * 60 / 100.0, inc),\u000a                    type: "First Layer Supports"\u000a                },\u000a                {\u000a                    speed: Octolapse.roundToIncrement(self.get_gap_fill_speed() * self.get_first_layer_speed_multiplier() * 60 / 100.0, inc),\u000a                    type: "First Layer Gaps"\u000a                }\u000a            ]);\u000a        }\u000a\u000a        return speed_list;\u000a    };\u000a};\u000a\u000a;\u000a
p0
.