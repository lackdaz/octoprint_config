V// source: plugin/octolapse/js/octolapse.status.js\u000a/*\u000a##################################################################################\u000a# Octolapse - A plugin for OctoPrint used for making stabilized timelapse videos.\u000a# Copyright (C) 2017  Brad Hochgesang\u000a##################################################################################\u000a# This program is free software: you can redistribute it and/or modify\u000a# it under the terms of the GNU Affero General Public License as published\u000a# by the Free Software Foundation, either version 3 of the License, or\u000a# (at your option) any later version.\u000a#\u000a# This program is distributed in the hope that it will be useful,\u000a# but WITHOUT ANY WARRANTY; without even the implied warranty of\u000a# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\u000a# GNU Affero General Public License for more details.\u000a#\u000a# You should have received a copy of the GNU Affero General Public License\u000a# along with this program.  If not, see the following:\u000a# https://github.com/FormerLurker/Octolapse/blob/master/LICENSE\u000a#\u000a# You can contact the author either through the git-hub repository, or at the\u000a# following email address: FormerLurker@pm.me\u000a##################################################################################\u000a*/\u000a$(function () {\u000a        Octolapse.StatusViewModel = function () {\u000a            // Create a reference to this object\u000a            var self = this;\u000a            // Add this object to our Octolapse namespace\u000a            Octolapse.Status = this;\u000a            // Assign the Octoprint settings to our namespace\u000a\u000a            self.is_timelapse_active = ko.observable(false);\u000a            self.is_taking_snapshot = ko.observable(false);\u000a            self.is_rendering = ko.observable(false);\u000a            self.current_snapshot_time = ko.observable(0);\u000a            self.total_snapshot_time = ko.observable(0);\u000a            self.snapshot_count = ko.observable(0);\u000a            self.snapshot_error = ko.observable(false);\u000a            self.waiting_to_render = ko.observable();\u000a            self.current_printer_profile_guid = ko.observable();\u000a            self.current_stabilization_profile_guid = ko.observable();\u000a            self.current_snapshot_profile_guid = ko.observable();\u000a            self.current_rendering_profile_guid = ko.observable();\u000a            self.current_debug_profile_guid = ko.observable();\u000a            self.current_settings_showing = ko.observable(true);\u000a            self.profiles = ko.observable({\u000a                'printers': ko.observableArray([{name: "Unknown", guid: "", has_been_saved_by_user: false}]),\u000a                'stabilizations': ko.observableArray([{name: "Unknown", guid: ""}]),\u000a                'snapshots': ko.observableArray([{name: "Unknown", guid: ""}]),\u000a                'renderings': ko.observableArray([{name: "Unknown", guid: ""}]),\u000a                'cameras': ko.observableArray([{name: "Unknown", guid: "", enabled: false}]),\u000a                'debug_profiles': ko.observableArray([{name: "Unknown", guid: ""}])\u000a            });\u000a\u000a            self.current_camera_guid = ko.observable()\u000a            self.PositionState = new Octolapse.positionStateViewModel();\u000a            self.Position = new Octolapse.positionViewModel();\u000a            self.ExtruderState = new Octolapse.extruderStateViewModel();\u000a            self.TriggerState = new Octolapse.triggersStateViewModel();\u000a            self.IsTabShowing = false;\u000a            self.IsLatestSnapshotDialogShowing = false;\u000a\u000a\u000a            self.showLatestSnapshotDialog = function () {\u000a\u000a                var $SnapshotDialog = $("#octolapse_latest_snapshot_dialog");\u000a                // configure the modal hidden event.  Isn't it funny that bootstrap's own shortening of their name is BS?\u000a                $SnapshotDialog.on("hidden.bs.modal", function () {\u000a                    //console.log("Snapshot dialog hidden.");\u000a                    self.IsLatestSnapshotDialogShowing = false;\u000a                });\u000a                // configure the dialog shown event\u000a\u000a                $SnapshotDialog.on("shown.bs.modal", function () {\u000a                    //console.log("Snapshot dialog shown.");\u000a                    self.IsLatestSnapshotDialogShowing = true;\u000a                    self.updateLatestSnapshotImage(true);\u000a                });\u000a\u000a                // configure the dialog show event\u000a                $SnapshotDialog.on("show.bs.modal", function () {\u000a                    //console.log("Snapshot dialog showing.");\u000a                    self.IsLatestSnapshotDialogShowing = true;\u000a\u000a                });\u000a\u000a                // cancel button click handler\u000a                $SnapshotDialog.find('.cancel').one('click', function () {\u000a                    //console.log("Hiding snapshot dialog.");\u000a                    self.IsLatestSnapshotDialogShowing = false;\u000a                    $SnapshotDialog.modal("hide");\u000a                });\u000a\u000a\u000a                self.IsLatestSnapshotDialogShowing = true;\u000a                self.erasePreviousSnapshotImages('octolapse_snapshot_image_container');\u000a                $SnapshotDialog.modal();\u000a\u000a            };\u000a\u000a            self.SETTINGS_VISIBLE_KEY = "settings_visible";\u000a            self.onBeforeBinding = function () {\u000a                var settingsVisible = Octolapse.getLocalStorage(self.SETTINGS_VISIBLE_KEY);\u000a                //console.log("Local Storage for " + self.SETTINGS_VISIBLE_KEY + ": " + settingsVisible);\u000a\u000a                if(settingsVisible == null || settingsVisible.toLowerCase() === "true")\u000a                {\u000a                    self.current_settings_showing(true);\u000a                }\u000a                else\u000a                {\u000a                    self.current_settings_showing(false);\u000a                }\u000a\u000a            };\u000a\u000a            self.onAfterBinding = function () {\u000a                    self.current_settings_showing.subscribe(function (newData) {\u000a                    //console.log("Setting local storage (" + self.SETTINGS_VISIBLE_KEY + ") to " + newData);\u000a                    Octolapse.setLocalStorage(self.SETTINGS_VISIBLE_KEY,newData)\u000a                });\u000a\u000a\u000a            }\u000a\u000a            self.hasOneCameraEnabled = ko.pureComputed(function(){\u000a                var hasConfigIssue = true;\u000a                for (var i = 0; i < self.profiles().cameras().length; i++)\u000a                {\u000a                    if(self.profiles().cameras()[i].enabled)\u000a                    {\u000a                        return true\u000a                    }\u000a                }\u000a                return false;\u000a\u000a            },this);\u000a\u000a            self.hasPrinterSelected = ko.pureComputed(function(){\u000a                return ! (Octolapse.Status.current_printer_profile_guid() == null || Octolapse.Status.current_printer_profile_guid()=="");\u000a            },this);\u000a\u000a            self.has_configured_printer_profile = ko.pureComputed(function(){\u000a                //console.log("detecting configured printers.")\u000a                var current_printer = self.getCurrentProfileByGuid(self.profiles().printers(),Octolapse.Status.current_printer_profile_guid());\u000a                if (current_printer != null)\u000a                    return current_printer.has_been_saved_by_user;\u000a                return true;\u000a            },this);\u000a\u000a            self.getCurrentProfileByGuid = function(profiles, guid){\u000a                if (guid != null) {\u000a                    for (var i = 0; i < profiles.length; i++) {\u000a                        if (profiles[i].guid == guid) {\u000a                            return profiles[i]\u000a                        }\u000a                    }\u000a                }\u000a                return null;\u000a            }\u000a            self.hasConfigIssues = ko.computed(function(){\u000a                var hasConfigIssues = !self.hasOneCameraEnabled() || !self.hasPrinterSelected() || !self.has_configured_printer_profile();\u000a                return hasConfigIssues;\u000a            },this);\u000a\u000a\u000a            self.onTabChange = function (current, previous) {\u000a                if (current != null && current === "#tab_plugin_octolapse") {\u000a                    //console.log("Octolapse Tab is showing");\u000a                    self.IsTabShowing = true;\u000a                    self.updateLatestSnapshotThumbnail(true);\u000a\u000a                }\u000a                else if (previous != null && previous === "#tab_plugin_octolapse") {\u000a                    //console.log("Octolapse Tab is not showing");\u000a                    self.IsTabShowing = false;\u000a                }\u000a            };\u000a            /*\u000a                Snapshot client animation preview functions\u000a            */\u000a            self.refreshLatestImage = function (targetId, isThumbnail) {\u000a                isThumbnail = isThumbnail || false;\u000a                //console.log("Refreshing Snapshot Thumbnail");\u000a                if (isThumbnail)\u000a                    self.updateLatestSnapshotThumbnail(true);\u000a                else\u000a                    self.updateLatestSnapshotImage(true);\u000a            };\u000a\u000a            self.startSnapshotAnimation = function (targetId) {\u000a                //console.log("Refreshing Snapshot Thumbnail");\u000a                // Hide and show the play/refresh button\u000a                if (Octolapse.Globals.auto_reload_latest_snapshot()) {\u000a                    $('#' + targetId + ' .snapshot_refresh_container a.start-animation').fadeOut();\u000a                }\u000a\u000a\u000a                //console.log("Starting animation on " + targetId);\u000a                // Get the images\u000a                var $images = $('#' + targetId + ' .snapshot_container .previous-snapshots img');\u000a                // Remove any existing visible class\u000a                $images.each(function (index, element) {\u000a                    $(element).removeClass('visible');\u000a                });\u000a                // Set a delay to unblock\u000a                setTimeout(function () {\u000a                    // Remove any hidden class and add visible to trigger the animation.\u000a                    $images.each(function (index, element) {\u000a                        $(element).removeClass('hidden');\u000a                        $(element).addClass('visible');\u000a                    });\u000a                    if (Octolapse.Globals.auto_reload_latest_snapshot()) {\u000a                        $('#' + targetId + ' .snapshot_refresh_container a.start-animation').fadeIn();\u000a                    }\u000a                }, 1)\u000a\u000a            };\u000a\u000a            self.updateLatestSnapshotThumbnail = function (force) {\u000a                force = force || false;\u000a                //console.log("Trying to update the latest snapshot thumbnail.");\u000a                if (!force) {\u000a                    if (!self.IsTabShowing) {\u000a                        //console.log("The tab is not showing, not updating the thumbnail.  Clearing the image history.");\u000a                        return\u000a                    }\u000a                    else if (!Octolapse.Globals.auto_reload_latest_snapshot()) {\u000a                        //console.log("Not updating the thumbnail, auto-reload is disabled.");\u000a                        return\u000a                    }\u000a                }\u000a                self.updateSnapshotAnimation('octolapse_snapshot_thumbnail_container', getLatestSnapshotThumbnailUrl(self.current_camera_guid())\u000a                    + "&time=" + new Date().getTime());\u000a\u000a            };\u000a\u000a            self.erasePreviousSnapshotImages = function (targetId, eraseCurrentImage) {\u000a                eraseCurrentImage = eraseCurrentImage || false;\u000a                if (eraseCurrentImage) {\u000a                    $('#' + targetId + ' .snapshot_container .latest-snapshot img').each(function () {\u000a                        $(this).remove();\u000a                    });\u000a                }\u000a                $('#' + targetId + ' .snapshot_container .previous-snapshots img').each(function () {\u000a                    $(this).remove();\u000a                });\u000a            };\u000a\u000a            // takes the list of images, update the frames in the target accordingly and starts any animations\u000a            self.IsAnimating = false;\u000a            self.updateSnapshotAnimation = function (targetId, newSnapshotAddress) {\u000a                //console.log("Updating animation for target id: " + targetId);\u000a                // Get the snapshot_container within the target\u000a                var $target = $('#' + targetId + ' .snapshot_container');\u000a                // Get the latest image\u000a                var $latestSnapshotContainer = $target.find('.latest-snapshot');\u000a                var $latestSnapshot = $latestSnapshotContainer.find('img');\u000a                if (Octolapse.Globals.auto_reload_latest_snapshot()) {\u000a                    // Get the previous snapshot container\u000a                    var $previousSnapshotContainer = $target.find('.previous-snapshots');\u000a\u000a                    // Add the latest image to the previous snapshots list\u000a                    if ($latestSnapshot.length > 0) {\u000a                        var srcAttr = $latestSnapshot.attr('src');\u000a                        // If the image has a src, and that src is not empty\u000a                        if (typeof srcAttr !== typeof undefined && srcAttr !== false && srcAttr.length > 0) {\u000a                            //console.log("Moving the latest image into the previous image container");\u000a                            $latestSnapshot.appendTo($previousSnapshotContainer);\u000a                        }\u000a                        else {\u000a                            $latestSnapshot.remove();\u000a                        }\u000a                    }\u000a\u000a                    // Get all of the images within the $previousSnapshotContainer, included the latest image we copied in\u000a                    var $previousSnapshots = $previousSnapshotContainer.find("img");\u000a\u000a                    var numSnapshots = $previousSnapshots.length;\u000a\u000a                    while (numSnapshots > parseInt(Octolapse.Globals.auto_reload_frames())) {\u000a                        //console.log("Removing overflow previous images according to Auto Reload Frames setting.");\u000a                        var $element = $previousSnapshots.first();\u000a                        $element.remove();\u000a\u000a                        numSnapshots--;\u000a                    }\u000a\u000a                    // Set the total animation duration based on the number of snapshots\u000a                    $previousSnapshotContainer.removeClass().addClass('previous-snapshots snapshot-animation-duration-' + numSnapshots);\u000a\u000a                    // TODO: Do we need to do this??  Find out\u000a                    $previousSnapshots = $previousSnapshotContainer.find("img");\u000a                    var numPreviousSnapshots = $previousSnapshots.length;\u000a                    var newestImageIndex = numPreviousSnapshots - 1;\u000a                    //console.log("Updating classes for previous " + numPreviousSnapshots + " images.");\u000a                    for (var previousImageIndex = 0; previousImageIndex < numPreviousSnapshots; previousImageIndex++) {\u000a                        $element = $($previousSnapshots.eq(previousImageIndex));\u000a                        $element.removeClass();\u000a                        if (previousImageIndex === newestImageIndex) {\u000a                            //console.log("Updating classes for the newest image.");\u000a                            $element.addClass("newest");\u000a                        }\u000a                        else {\u000a                            $element.addClass("hidden");\u000a                        }\u000a                        var previousImageDelayClass = "effect-delay-" + previousImageIndex;\u000a                        //console.log("Updating classes for the previous image delay " + previousImageDelayClass+ ".");\u000a                        $element.addClass(previousImageDelayClass);\u000a\u000a\u000a                    }\u000a\u000a                }\u000a\u000a\u000a                // create the newest image\u000a                var $newSnapshot = $(document.createElement('img'));\u000a                // append the image to the container\u000a\u000a                //console.log("Adding the new snapshot image to the latest snapshot container.");\u000a                // create on load event for the newest image\u000a                if (Octolapse.Globals.auto_reload_latest_snapshot()) {\u000a                    // Add the new snapshot to the container\u000a                    $newSnapshot.appendTo($latestSnapshotContainer);\u000a                    $newSnapshot.one('load', function () {\u000a                        self.IsAnimating = false;\u000a                        self.startSnapshotAnimation(targetId);\u000a                    });\u000a                    // create an error handler for the newest image\u000a\u000a                }\u000a                else {\u000a\u000a                    $newSnapshot.one('load', function () {\u000a                        // Hide the latest image\u000a                        $latestSnapshot.fadeOut(250, function () {\u000a                            // Remove the latest image\u000a                            $latestSnapshot.remove();\u000a                            // Set the new snapshot to hidden initially\u000a                            $newSnapshot.css('display', 'none');\u000a                            // Add the new snapshot to the container\u000a                            $newSnapshot.appendTo($latestSnapshotContainer);\u000a                            // fade it in.  Ahhh..\u000a                            $newSnapshot.fadeIn(250);\u000a                        });\u000a                    });\u000a\u000a\u000a                }\u000a                $newSnapshot.one('error', function () {\u000a                    //console.log("An error occurred loading the newest image, reverting to previous image.");\u000a                    // move the latest preview image back into the newest image section\u000a                    self.IsAnimating = false;\u000a                    $latestSnapshot.removeClass();\u000a                    $newSnapshot.addClass('latest');\u000a                    $latestSnapshot.appendTo($latestSnapshotContainer)\u000a\u000a                });\u000a\u000a                // set the class\u000a                $newSnapshot.addClass('latest');\u000a                // set the src and start to load\u000a                $newSnapshot.attr('src', newSnapshotAddress)\u000a            };\u000a\u000a            self.updateLatestSnapshotImage = function (force) {\u000a                force = force || false;\u000a                //console.log("Trying to update the latest snapshot image.");\u000a                if (!force) {\u000a                    if (!Octolapse.Globals.auto_reload_latest_snapshot()) {\u000a                        //console.log("Auto-Update latest snapshot image is disabled.");\u000a                        return\u000a                    }\u000a                    else if (!self.IsLatestSnapshotDialogShowing) {\u000a                        //console.log("The full screen dialog is not showing, not updating the latest snapshot.");\u000a                        return\u000a                    }\u000a                }\u000a                //console.log("Requesting image for camera:" + Octolapse.Status.current_camera_guid())\u000a                self.updateSnapshotAnimation('octolapse_snapshot_image_container', getLatestSnapshotUrl(Octolapse.Status.current_camera_guid()) + "&time=" + new Date().getTime());\u000a\u000a            };\u000a\u000a            self.toggleInfoPanel = function (panelType){\u000a                $.ajax({\u000a                    url: "./plugin/octolapse/toggleInfoPanel",\u000a                    type: "POST",\u000a                    data: JSON.stringify({panel_type: panelType}),\u000a                    contentType: "application/json",\u000a                    dataType: "json",\u000a                    error: function (XMLHttpRequest, textStatus, errorThrown) {\u000a                        alert("Unable to toggle the panel.  Status: " + textStatus + ".  Error: " + errorThrown);\u000a                    }\u000a                });\u000a            };\u000a\u000a            /**\u000a             * @return {string}\u000a             */\u000a            self.GetTriggerStateTemplate = function (type) {\u000a                switch (type) {\u000a                    case "gcode":\u000a                        return "gcode-trigger-status-template";\u000a                    case "layer":\u000a                        return "layer-trigger-status-template";\u000a                    case "timer":\u000a                        return "timer-trigger-status-template";\u000a                    default:\u000a                        return "trigger-status-template"\u000a                }\u000a            };\u000a\u000a            self.getStateSummaryText = ko.pureComputed(function () {\u000a                if(!self.is_timelapse_active()) {\u000a                    if(self.waiting_to_render())\u000a                        return "Octolapse is waiting for print to complete.";\u000a                    if( self.is_rendering())\u000a                        return "Octolapse is rendering a timelapse.";\u000a                    if(!Octolapse.Globals.enabled())\u000a                        return 'Octolapse is disabled.';\u000a                    return 'Octolapse is enabled and idle.';\u000a                }\u000a                if(!Octolapse.Globals.enabled())\u000a                    return 'Octolapse is disabled.';\u000a                if(!self.PositionState.IsInitialized())\u000a                    return 'Octolapse is waiting for more information from the server.';\u000a                if( self.PositionState.hasPositionStateErrors())\u000a                    return 'Octolapse is waiting to initialize.';\u000a                if( self.is_taking_snapshot())\u000a                    return "Octolapse is taking a snapshot.";\u000a                return "Octolapse is waiting to take snapshot.";\u000a\u000a            }, self);\u000a            self.getTimelapseStateText =  ko.pureComputed(function () {\u000a                //console.log("GettingTimelapseStateText")\u000a                if(!self.is_timelapse_active())\u000a                    return 'Octolapse is not running';\u000a                if(!self.PositionState.IsInitialized())\u000a                    return 'Waiting for update from server.  You may have to turn on the "Position State Info Panel" from the "Current Settings" below to receive an update.';\u000a                if( self.PositionState.hasPositionStateErrors())\u000a                    return 'Waiting to initialize';\u000a                return 'Octolapse is initialized and running';\u000a            }, self);\u000a\u000a            self.getTimelapseStateColor =  ko.pureComputed(function () {\u000a                if(!self.is_timelapse_active())\u000a                    return '';\u000a                if(!self.PositionState.IsInitialized() || self.PositionState.hasPositionStateErrors())\u000a                    return 'orange';\u000a                return 'greenyellow';\u000a            }, self);\u000a\u000a            self.getStatusText = ko.pureComputed(function () {\u000a                if (self.is_timelapse_active())\u000a                    return 'Octolapse - Running';\u000a                if (self.is_rendering())\u000a                    return 'Octolapse - Rendering';\u000a                if (self.waiting_to_render())\u000a                    return 'Octolapse - Waiting to Render';\u000a                if (Octolapse.Globals.enabled())\u000a                    return 'Octolapse';\u000a                return 'Octolapse - Disabled';\u000a            }, self);\u000a\u000a            self.updatePositionState = function (state) {\u000a                // State variables\u000a                self.PositionState.update(state);\u000a            };\u000a\u000a            self.updatePosition = function (state) {\u000a                // State variables\u000a                self.Position.update(state);\u000a            };\u000a\u000a            self.updateExtruderState = function (state) {\u000a                // State variables\u000a                self.ExtruderState.update(state);\u000a            };\u000a\u000a            self.updateTriggerStates = function (states) {\u000a                self.TriggerState.update(states);\u000a            };\u000a\u000a            self.update = function (settings) {\u000a                self.is_timelapse_active(settings.is_timelapse_active);\u000a                self.snapshot_count(settings.snapshot_count);\u000a                self.is_taking_snapshot(settings.is_taking_snapshot);\u000a                self.is_rendering(settings.is_rendering);\u000a                self.total_snapshot_time(settings.total_snapshot_time);\u000a                self.current_snapshot_time(settings.current_snapshot_time);\u000a                self.waiting_to_render(settings.waiting_to_render);\u000a                //console.log("Updating Profiles");\u000a                self.profiles().printers(settings.profiles.printers);\u000a                self.profiles().stabilizations(settings.profiles.stabilizations);\u000a                self.profiles().snapshots(settings.profiles.snapshots);\u000a                self.profiles().renderings(settings.profiles.renderings);\u000a                self.profiles().cameras(settings.profiles.cameras);\u000a                self.profiles().debug_profiles(settings.profiles.debug_profiles);\u000a                self.current_printer_profile_guid(settings.profiles.current_printer_profile_guid);\u000a                self.current_stabilization_profile_guid(settings.profiles.current_stabilization_profile_guid);\u000a                self.current_snapshot_profile_guid(settings.profiles.current_snapshot_profile_guid);\u000a                self.current_rendering_profile_guid(settings.profiles.current_rendering_profile_guid);\u000a                self.current_debug_profile_guid(settings.profiles.current_debug_profile_guid);\u000a                // Only update the current camera guid if there is no value\u000a                if(self.current_camera_guid() == null)\u000a                    self.current_camera_guid(settings.profiles.current_camera_profile_guid);\u000a            };\u000a\u000a            self.onTimelapseStart = function () {\u000a                self.TriggerState.removeAll();\u000a                self.PositionState.IsInitialized(false);\u000a            };\u000a\u000a            self.onTimelapseStop = function () {\u000a                self.is_timelapse_active(false);\u000a                self.is_taking_snapshot(false);\u000a                self.waiting_to_render(true);\u000a            };\u000a\u000a            self.stopTimelapse = function () {\u000a                if (Octolapse.Globals.is_admin()) {\u000a                    //console.log("octolapse.status.js - ButtonClick: StopTimelapse");\u000a                    if (confirm("Warning: You cannot restart octolapse once it is stopped until the next print.  Do you want to stop Octolapse?")) {\u000a                        $.ajax({\u000a                            url: "./plugin/octolapse/stopTimelapse",\u000a                            type: "POST",\u000a                            contentType: "application/json",\u000a                            success: function (data) {\u000a                                //console.log("octolapse.status.js - stopTimelapse - success" + data);\u000a                            },\u000a                            error: function (XMLHttpRequest, textStatus, errorThrown) {\u000a                                alert("Unable to stop octolapse!.  Status: " + textStatus + ".  Error: " + errorThrown);\u000a                            }\u000a                        });\u000a                    }\u000a                }\u000a            };\u000a\u000a            self.snapshotTime = function () {\u000a                var date = new Date(null);\u000a                date.setSeconds(this.total_snapshot_time());\u000a                return date.toISOString().substr(11, 8);\u000a            };\u000a\u000a            self.navbarClicked = function () {\u000a                $("#tab_plugin_octolapse_link").find("a").click();\u000a            };\u000a\u000a            self.nameSort = function (observable) {\u000a                //console.log("Sorting profiles on primary tab.")\u000a                return observable().sort(\u000a                    function (left, right) {\u000a                        var leftName = left.name.toLowerCase();\u000a                        var rightName = right.name.toLowerCase();\u000a                        return leftName === rightName ? 0 : (leftName < rightName ? -1 : 1);\u000a                    });\u000a            };\u000a\u000a            // Printer Profile Settings\u000a            self.printers_sorted = ko.computed(function() { return self.nameSort(self.profiles().printers) });\u000a            self.openCurrentPrinterProfile = function () {\u000a                //console.log("Opening current printer profile from tab.")\u000a                Octolapse.Printers.showAddEditDialog(self.current_printer_profile_guid(), false);\u000a            };\u000a            self.defaultPrinterChanged = function (obj, event) {\u000a                if (Octolapse.Globals.is_admin()) {\u000a                    if (event.originalEvent) {\u000a                        // Get the current guid\u000a                        var guid = $("#octolapse_tab_printer_profile").val();\u000a                        //console.log("Default Printer is changing to " + guid);\u000a                        Octolapse.Printers.setCurrentProfile(guid);\u000a                        return true;\u000a                    }\u000a                }\u000a            };\u000a\u000a            // Stabilization Profile Settings\u000a            self.stabilizations_sorted = ko.computed(function() { return self.nameSort(self.profiles().stabilizations) });\u000a            self.openCurrentStabilizationProfile = function () {\u000a                //console.log("Opening current stabilization profile from tab.")\u000a                Octolapse.Stabilizations.showAddEditDialog(self.current_stabilization_profile_guid(), false);\u000a            };\u000a            self.defaultStabilizationChanged = function (obj, event) {\u000a                if (Octolapse.Globals.is_admin()) {\u000a                    if (event.originalEvent) {\u000a                        // Get the current guid\u000a                        var guid = $("#octolapse_tab_stabilization_profile").val();\u000a                        //console.log("Default stabilization is changing to " + guid + " from " + self.current_stabilization_profile_guid());\u000a                        Octolapse.Stabilizations.setCurrentProfile(guid);\u000a                        return true;\u000a                    }\u000a                }\u000a            };\u000a\u000a            // Snapshot Profile Settings\u000a            self.snapshots_sorted = ko.computed(function() { return self.nameSort(self.profiles().snapshots) });\u000a            self.openCurrentSnapshotProfile = function () {\u000a                //console.log("Opening current snapshot profile from tab.")\u000a                Octolapse.Snapshots.showAddEditDialog(self.current_snapshot_profile_guid(), false);\u000a            };\u000a            self.defaultSnapshotChanged = function (obj, event) {\u000a                if (Octolapse.Globals.is_admin()) {\u000a                    if (event.originalEvent) {\u000a                        // Get the current guid\u000a                        var guid = $("#octolapse_tab_snapshot_profile").val();\u000a                        //console.log("Default Snapshot is changing to " + guid);\u000a                        Octolapse.Snapshots.setCurrentProfile(guid);\u000a                        return true;\u000a                    }\u000a                }\u000a            };\u000a\u000a            // Rendering Profile Settings\u000a            self.renderings_sorted = ko.computed(function() { return self.nameSort(self.profiles().renderings) });\u000a            self.openCurrentRenderingProfile = function () {\u000a                //console.log("Opening current rendering profile from tab.")\u000a                Octolapse.Renderings.showAddEditDialog(self.current_rendering_profile_guid(), false);\u000a            };\u000a            self.defaultRenderingChanged = function (obj, event) {\u000a                if (Octolapse.Globals.is_admin()) {\u000a                    if (event.originalEvent) {\u000a                        // Get the current guid\u000a                        var guid = $("#octolapse_tab_rendering_profile").val();\u000a                        //console.log("Default Rendering is changing to " + guid);\u000a                        Octolapse.Renderings.setCurrentProfile(guid);\u000a                        return true;\u000a                    }\u000a                }\u000a            };\u000a\u000a            // Camera Profile Settings\u000a            self.cameras_sorted = ko.computed(function() { return self.nameSort(self.profiles().cameras) });\u000a\u000a            self.openCameraProfile = function (guid) {\u000a                //console.log("Opening current camera profile from tab.")\u000a                Octolapse.Cameras.showAddEditDialog(guid, false);\u000a            };\u000a\u000a            self.addNewCameraProfile = function () {\u000a                //console.log("Opening current camera profile from tab.")\u000a                Octolapse.Cameras.showAddEditDialog(null, false);\u000a            };\u000a\u000a            self.toggleCamera = function (guid) {\u000a                //console.log("Opening current camera profile from tab.")\u000a                Octolapse.Cameras.getProfileByGuid(guid).toggleCamera();\u000a            };\u000a            self.snapshotCameraChanged = function(obj, event) {\u000a                // Update the current camera profile\u000a                var guid = $("#octolapse_current_snapshot_camera").val();\u000a                //console.log("Updating current snapshot camera preview: " + guid)\u000a                if(event.originalEvent) {\u000a                    if (Octolapse.Globals.is_admin()) {\u000a                        var data = {'guid': guid};\u000a                        $.ajax({\u000a                            url: "./plugin/octolapse/setCurrentCameraProfile",\u000a                            type: "POST",\u000a                            data: JSON.stringify(data),\u000a                            contentType: "application/json",\u000a                            dataType: "json",\u000a                            success: function (result) {\u000a                                // Set the current profile guid observable.  This will cause the UI to react to the change.\u000a                                //console.log("current profile guid updated: " + result.guid)\u000a                            },\u000a                            error: function (XMLHttpRequest, textStatus, errorThrown) {\u000a                                alert("Unable to set the current camera profile!.  Status: " + textStatus + ".  Error: " + errorThrown);\u000a                            }\u000a                        });\u000a                    }\u000a                }\u000a\u000a                //console.log("Updating the latest snapshot from: " + Octolapse.Status.current_camera_guid() + " to " + guid);\u000a                Octolapse.Status.current_camera_guid(guid);\u000a                self.erasePreviousSnapshotImages('octolapse_snapshot_image_container',true);\u000a                self.erasePreviousSnapshotImages('octolapse_snapshot_thumbnail_container',true);\u000a                self.updateLatestSnapshotThumbnail(self.current_camera_guid());\u000a                self.updateLatestSnapshotImage(self.current_camera_guid());\u000a            }\u000a\u000a            // Debug Profile Settings\u000a            self.debug_sorted = ko.computed(function() { return self.nameSort(self.profiles().debug_profiles) });\u000a            self.openCurrentDebugProfile = function () {\u000a                //console.log("Opening current debug profile from tab.")\u000a                Octolapse.DebugProfiles.showAddEditDialog(self.current_debug_profile_guid(), false);\u000a            };\u000a            self.defaultDebugProfileChanged = function (obj, event) {\u000a                if (Octolapse.Globals.is_admin()) {\u000a                    if (event.originalEvent) {\u000a                        // Get the current guid\u000a                        var guid = $("#octolapse_tab_debug_profile").val();\u000a                        //console.log("Default Debug Profile is changing to " + guid);\u000a                        Octolapse.DebugProfiles.setCurrentProfile(guid);\u000a                        return true;\u000a                    }\u000a                }\u000a            };\u000a\u000a        };\u000a        /*\u000a            Status Tab viewmodels\u000a        */\u000a        Octolapse.positionStateViewModel = function () {\u000a            var self = this;\u000a            self.GCode = ko.observable("");\u000a            self.XHomed = ko.observable(false);\u000a            self.YHomed = ko.observable(false);\u000a            self.ZHomed = ko.observable(false);\u000a            self.IsLayerChange = ko.observable(false);\u000a            self.IsHeightChange = ko.observable(false);\u000a            self.IsInPosition = ko.observable(false);\u000a            self.InPathPosition = ko.observable(false);\u000a            self.IsZHop = ko.observable(false);\u000a            self.IsRelative = ko.observable(null);\u000a            self.IsExtruderRelative = ko.observable(null);\u000a            self.Layer = ko.observable(0);\u000a            self.Height = ko.observable(0).extend({numeric: 2});\u000a            self.LastExtrusionHeight = ko.observable(0).extend({numeric: 2});\u000a            self.HasPositionError = ko.observable(false);\u000a            self.PositionError = ko.observable(false);\u000a            self.IsMetric = ko.observable(null);\u000a            self.IsInitialized = ko.observable(false);\u000a\u000a            self.update = function (state) {\u000a                this.GCode(state.GCode);\u000a                this.XHomed(state.XHomed);\u000a                this.YHomed(state.YHomed);\u000a                this.ZHomed(state.ZHomed);\u000a                this.IsLayerChange(state.IsLayerChange);\u000a                this.IsHeightChange(state.IsHeightChange);\u000a                this.IsInPosition(state.IsInPosition);\u000a                this.InPathPosition(state.InPathPosition);\u000a                this.IsZHop(state.IsZHop);\u000a                this.IsRelative(state.IsRelative);\u000a                this.IsExtruderRelative(state.IsExtruderRelative);\u000a                this.Layer(state.Layer);\u000a                this.Height(state.Height);\u000a                this.LastExtrusionHeight(state.LastExtrusionHeight);\u000a                this.HasPositionError(state.HasPositionError);\u000a                this.PositionError(state.PositionError);\u000a                this.IsMetric(state.IsMetric);\u000a                this.IsInitialized(true);\u000a            };\u000a\u000a            self.getCheckedIconClass = function (value, trueClass, falseClass, nullClass) {\u000a                return ko.computed({\u000a                    read: function () {\u000a                        if (value == null)\u000a                            return nullClass;\u000a                        else if (value)\u000a                            return trueClass;\u000a                        else\u000a                            return falseClass;\u000a                    }\u000a                });\u000a            };\u000a\u000a\u000a            self.getColor = function (value, trueColor, falseColor, nullColor) {\u000a                return ko.computed({\u000a                    read: function () {\u000a                        if (value == null)\u000a                            return nullColor;\u000a                        else if(!value)\u000a                            return falseColor;\u000a                        if (value)\u000a                            return trueColor;\u000a                    }\u000a                });\u000a            };\u000a\u000a            self.hasPositionStateErrors = ko.pureComputed(function(){\u000a                if (Octolapse.Status.is_timelapse_active() && self.IsInitialized())\u000a\u000a                    if (!(self.XHomed() && self.YHomed() && self.ZHomed())\u000a                        || self.IsRelative() == null\u000a                        || self.IsExtruderRelative() == null\u000a                        || !self.IsMetric()\u000a                        || self.HasPositionError())\u000a                        return true;\u000a                return false;\u000a            },self);\u000a\u000a            self.getYHomedStateText = ko.pureComputed(function () {\u000a                if (self.YHomed())\u000a                    return "Homed";\u000a                else\u000a                    return "Not homed";\u000a            }, self);\u000a            self.getZHomedStateText = ko.pureComputed(function () {\u000a                if (self.ZHomed())\u000a                    return "Homed";\u000a                else\u000a                    return "Not homed";\u000a            }, self);\u000a            self.getIsZHopStateText = ko.pureComputed(function () {\u000a                if (self.IsZHop())\u000a                    return "Zhop detected";\u000a                else\u000a                    return "Not a zhop";\u000a            }, self);\u000a\u000a            self.getIsInPositionStateText = ko.pureComputed(function () {\u000a                if (self.IsInPosition())\u000a                    return "In position";\u000a                else if (self.InPathPosition())\u000a                    return "In path position"\u000a                else\u000a                    return "Not in position";\u000a            }, self);\u000a\u000a            self.getIsMetricStateText = ko.pureComputed(function () {\u000a                if (self.IsMetric())\u000a                    return "Metric";\u000a                else if (self.IsMetric() === null)\u000a                    return "Unknown";\u000a                else\u000a                    return "Not Metric";\u000a            }, self);\u000a            self.getIsExtruderRelativeStateText = ko.pureComputed(function () {\u000a                if (self.IsExtruderRelative() == null)\u000a                    return "Not Set";\u000a                else if (self.IsExtruderRelative())\u000a                    return "Relative";\u000a                else\u000a                    return "Absolute";\u000a            }, self);\u000a\u000a            self.getExtruderModeText = ko.pureComputed(function () {\u000a                if (self.IsExtruderRelative() == null)\u000a                    return "Mode";\u000a                else if (self.IsExtruderRelative())\u000a                    return "Relative";\u000a                else\u000a                    return "Absolute";\u000a            }, self);\u000a            self.getXYZModeText = ko.pureComputed(function () {\u000a                if (self.IsRelative() == null)\u000a                    return "Mode";\u000a                else if (self.IsRelative())\u000a                    return "Relative";\u000a                else\u000a                    return "Absolute";\u000a            }, self);\u000a            self.getIsRelativeStateText = ko.pureComputed(function () {\u000a                if (self.IsRelative() == null)\u000a                    return "Not Set";\u000a                else if (self.IsRelative())\u000a                    return "Relative";\u000a                else\u000a                    return "Absolute";\u000a            }, self);\u000a\u000a            self.getHasPositionErrorStateText = ko.pureComputed(function () {\u000a                if (self.HasPositionError())\u000a                    return "A position error was detected";\u000a                else\u000a                    return "No current position errors";\u000a            }, self);\u000a            self.getIsLayerChangeStateText = ko.pureComputed(function () {\u000a                if (self.IsLayerChange())\u000a                    return "Layer change detected";\u000a                else\u000a                    return "Not changing layers";\u000a            }, self);\u000a        };\u000a        Octolapse.positionViewModel = function () {\u000a            var self = this;\u000a            self.F = ko.observable(0).extend({numeric: 2});\u000a            self.X = ko.observable(0).extend({numeric: 2});\u000a            self.XOffset = ko.observable(0).extend({numeric: 2});\u000a            self.Y = ko.observable(0).extend({numeric: 2});\u000a            self.YOffset = ko.observable(0).extend({numeric: 2});\u000a            self.Z = ko.observable(0).extend({numeric: 2});\u000a            self.ZOffset = ko.observable(0).extend({numeric: 2});\u000a            self.E = ko.observable(0).extend({numeric: 2});\u000a            self.EOffset = ko.observable(0).extend({numeric: 2});\u000a            self.Features = ko.observableArray([]);\u000a            self.update = function (state) {\u000a                this.F(state.F);\u000a                this.X(state.X);\u000a                this.XOffset(state.XOffset);\u000a                this.Y(state.Y);\u000a                this.YOffset(state.YOffset);\u000a                this.Z(state.Z);\u000a                this.ZOffset(state.ZOffset);\u000a                this.E(state.E);\u000a                this.EOffset(state.EOffset);\u000a                this.Features(state.Features);\u000a                //console.log(this.Features());\u000a                //self.plotPosition(state.X, state.Y, state.Z);\u000a            };\u000a            /*\u000a            self.plotPosition = function(x, y,z)\u000a            {\u000a                //console.log("Plotting Position")\u000a                var canvas = document.getElementById("octolapse_position_canvas");\u000a                canvas.width = 250;\u000a                canvas.height = 200;\u000a                var ctx = canvas.getContext("2d");\u000a                ctx.clearRect(0, 0, canvas.width, canvas.height);\u000a                ctx.fillRect(x + 2, x - 2,4, 4);\u000a\u000a            }*/\u000a        };\u000a        Octolapse.extruderStateViewModel = function () {\u000a            var self = this;\u000a            // State variables\u000a            self.ExtrusionLengthTotal = ko.observable(0).extend({numeric: 2});\u000a            self.ExtrusionLength = ko.observable(0).extend({numeric: 2});\u000a            self.RetractionLength = ko.observable(0).extend({numeric: 2});\u000a            self.DetractionLength = ko.observable(0).extend({numeric: 2});\u000a            self.IsExtrudingStart = ko.observable(false);\u000a            self.IsExtruding = ko.observable(false);\u000a            self.IsPrimed = ko.observable(false);\u000a            self.IsRetractingStart = ko.observable(false);\u000a            self.IsRetracting = ko.observable(false);\u000a            self.IsRetracted = ko.observable(false);\u000a            self.IsPartiallyRetracted = ko.observable(false);\u000a            self.IsDetractingStart = ko.observable(false);\u000a            self.IsDetracting = ko.observable(false);\u000a            self.IsDetracted = ko.observable(false);\u000a            self.HasChanged = ko.observable(false);\u000a\u000a            self.update = function (state) {\u000a                this.ExtrusionLengthTotal(state.ExtrusionLengthTotal);\u000a                this.ExtrusionLength(state.ExtrusionLength);\u000a                this.RetractionLength(state.RetractionLength);\u000a                this.DetractionLength(state.DetractionLength);\u000a                this.IsExtrudingStart(state.IsExtrudingStart);\u000a                this.IsExtruding(state.IsExtruding);\u000a                this.IsPrimed(state.IsPrimed);\u000a                this.IsRetractingStart(state.IsRetractingStart);\u000a                this.IsRetracting(state.IsRetracting);\u000a                this.IsRetracted(state.IsRetracted);\u000a                this.IsPartiallyRetracted(state.IsPartiallyRetracted);\u000a                this.IsDetractingStart(state.IsDetractingStart);\u000a                this.IsDetracting(state.IsDetracting);\u000a                this.IsDetracted(state.IsDetracted);\u000a                this.HasChanged(state.HasChanged);\u000a            };\u000a\u000a            self.getRetractionStateIconClass = ko.pureComputed(function () {\u000a                if (self.IsRetracting()) {\u000a                    if (self.IsPartiallyRetracted() && !self.IsRetracted())\u000a                        return "fa-angle-up";\u000a                    else if (self.IsRetracted() && !self.IsPartiallyRetracted())\u000a                        return "fa-angle-double-up";\u000a                }\u000a                return "fa-times-circle";\u000a            }, self);\u000a            self.getRetractionStateText = ko.pureComputed(function () {\u000a\u000a                if (self.IsRetracting()) {\u000a                    var text = "";\u000a\u000a\u000a                    if (self.IsPartiallyRetracted() && !self.IsRetracted()) {\u000a                        if (self.IsRetractingStart())\u000a                            text += "Start: ";\u000a                        text += self.RetractionLength() + "mm";\u000a                        return text;\u000a                    }\u000a                    else if (self.IsRetracted() && !self.IsPartiallyRetracted()) {\u000a                        if (self.IsRetractingStart())\u000a                            return "Retracted Start: " + self.RetractionLength() + "mm";\u000a                        else\u000a                            return "Retracted: " + self.RetractionLength() + "mm";\u000a                    }\u000a                }\u000a                return "None";\u000a            }, self);\u000a            self.getDetractionIconClass = ko.pureComputed(function () {\u000a\u000a                if (self.IsRetracting() && self.IsDetracting())\u000a                    return "fa-exclamation-circle";\u000a                if (self.IsDetracting() && self.IsDetractingStart)\u000a                    return "fa-level-down";\u000a                if (self.IsDetracting())\u000a                    return "fa-long-arrow-down";\u000a                return "fa-times-circle";\u000a            }, self);\u000a            self.getDetractionStateText = ko.pureComputed(function () {\u000a\u000a                var text = "";\u000a                if (self.IsRetracting() && self.IsDetracting())\u000a                    text = "Error";\u000a                else if (self.IsDetracted()) {\u000a                    text = "Detracted: " + self.DetractionLength() + "mm";\u000a                }\u000a                else if (self.IsDetracting()) {\u000a                    if (self.IsDetractingStart())\u000a                        text += "Start: ";\u000a                    text += self.DetractionLength() + "mm";\u000a                }\u000a                else\u000a                    text = "None";\u000a                return text;\u000a            }, self);\u000a\u000a\u000a            self.getExtrudingStateIconClass = ko.pureComputed(function () {\u000a\u000a                if (self.IsExtrudingStart() && !self.IsExtruding())\u000a                    return "exclamation-circle";\u000a\u000a                if (self.IsPrimed())\u000a                    return "fa-arrows-h";\u000a                if (self.IsExtrudingStart())\u000a                    return "fa-play-circle-o";\u000a                if (self.IsExtruding())\u000a                    return "fa-play";\u000a                return "fa-times-circle";\u000a            }, self);\u000a            self.getExtrudingStateText = ko.pureComputed(function () {\u000a                if (self.IsExtrudingStart() && !self.IsExtruding())\u000a                    return "Error";\u000a                if (self.IsPrimed())\u000a                    return "Primed";\u000a                if (self.IsExtrudingStart())\u000a                    return "Start: " + self.ExtrusionLength() + "mm";\u000a                if (self.IsExtruding())\u000a                    return self.ExtrusionLength() + "mm";\u000a                return "None";\u000a            }, self);\u000a        };\u000a        Octolapse.triggersStateViewModel = function () {\u000a            var self = this;\u000a\u000a            // State variables\u000a            self.Name = ko.observable();\u000a            self.Triggers = ko.observableArray();\u000a            self.HasBeenCreated = false;\u000a            self.create = function (trigger) {\u000a                var newTrigger = null;\u000a                switch (trigger.Type) {\u000a                    case "gcode":\u000a                        newTrigger = new Octolapse.gcodeTriggerStateViewModel(trigger);\u000a                        break;\u000a                    case "layer":\u000a                        newTrigger = new Octolapse.layerTriggerStateViewModel(trigger);\u000a                        break;\u000a                    case "timer":\u000a                        newTrigger = new Octolapse.timerTriggerStateViewModel(trigger);\u000a                        break;\u000a                    default:\u000a                        newTrigger = new Octolapse.genericTriggerStateViewModel(trigger);\u000a                        break;\u000a                }\u000a                self.Triggers.push(newTrigger);\u000a            };\u000a\u000a            self.removeAll = function () {\u000a                self.Triggers.removeAll();\u000a            };\u000a\u000a            self.update = function (states) {\u000a                //console.log("Updating trigger states")\u000a                self.Name(states.Name);\u000a                var triggers = states.Triggers;\u000a                for (var sI = 0; sI < triggers.length; sI++) {\u000a                    var state = triggers[sI];\u000a                    var foundState = false;\u000a                    for (var i = 0; i < self.Triggers().length; i++) {\u000a                        var currentTrigger = self.Triggers()[i];\u000a                        if (state.Type === currentTrigger.Type()) {\u000a                            currentTrigger.update(state);\u000a                            foundState = true;\u000a                            break;\u000a                        }\u000a                    }\u000a                    if (!foundState) {\u000a                        self.create(state);\u000a                    }\u000a                }\u000a            };\u000a\u000a        };\u000a        Octolapse.genericTriggerStateViewModel = function (state) {\u000a            //console.log("creating generic trigger state view model");\u000a            var self = this;\u000a            self.Type = ko.observable(state.Type);\u000a            self.Name = ko.observable(state.Name);\u000a            self.IsTriggered = ko.observable(state.IsTriggered);\u000a            self.IsWaiting = ko.observable(state.IsWaiting);\u000a            self.IsWaitingOnZHop = ko.observable(state.IsWaitingOnZHop);\u000a            self.IsWaitingOnExtruder = ko.observable(state.IsWaitingOnExtruder);\u000a            self.RequireZHop = ko.observable(state.RequireZHop);\u000a            self.TriggeredCount = ko.observable(state.TriggeredCount).extend({compactint: 1});\u000a            self.IsHomed = ko.observable(state.IsHomed);\u000a            self.IsInPosition = ko.observable(state.IsInPosition);\u000a            self.InPathPosition = ko.observable(state.IsInPathPosition);\u000a            self.IsFeatureAllowed = ko.observable(state.IsFeatureAllowed);\u000a            self.IsWaitingOnFeature = ko.observable(state.IsWaitingOnFeature);\u000a            self.update = function (state) {\u000a                self.Type(state.Type);\u000a                self.Name(state.Name);\u000a                self.IsTriggered(state.IsTriggered);\u000a                self.IsWaiting(state.IsWaiting);\u000a                self.IsWaitingOnZHop(state.IsWaitingOnZHop);\u000a                self.IsWaitingOnExtruder(state.IsWaitingOnExtruder);\u000a                self.RequireZHop(state.RequireZHop);\u000a                self.TriggeredCount(state.TriggeredCount);\u000a                self.IsHomed(state.IsHomed);\u000a                self.IsInPosition(state.IsInPosition);\u000a                self.InPathPosition(state.InPathPosition);\u000a                self.IsFeatureAllowed(state.IsFeatureAllowed);\u000a                self.IsWaitingOnFeature(state.IsWaitingOnFeature);\u000a            };\u000a            self.triggerBackgroundIconClass = ko.pureComputed(function () {\u000a                if (!self.IsHomed())\u000a                    return "bg-not-homed";\u000a                else if (!self.IsTriggered() && Octolapse.PrinterStatus.isPaused())\u000a                    return " bg-paused";\u000a                else\u000a                    return "";\u000a            }, self);\u000a            /* style related computed functions */\u000a            self.triggerStateText = ko.pureComputed(function () {\u000a                //console.log("Calculating trigger state text.");\u000a                if (!self.IsHomed())\u000a                    return "Idle until all axes are homed";\u000a                else if (self.IsTriggered())\u000a                    return "Triggering a snapshot";\u000a                else if (Octolapse.PrinterStatus.isPaused())\u000a                    return "The trigger is paused";\u000a                else if (self.IsWaiting()) {\u000a                    // Create a list of things we are waiting on\u000a                    var waitText = "Waiting";\u000a                    var waitList = [];\u000a                    if (self.IsWaitingOnZHop())\u000a                        waitList.push("zhop");\u000a                    if (self.IsWaitingOnExtruder())\u000a                        waitList.push("extruder");\u000a                    if (!self.IsInPosition() && !self.InPathPosition())\u000a                        waitList.push("position");\u000a                    if (self.IsWaitingOnFeature())\u000a                        waitList.push("feature");\u000a                    if (waitList.length > 1) {\u000a                        waitText += " for " + waitList.join(" and ");\u000a                        waitText += " to trigger";\u000a                    }\u000a                    else if (waitList.length === 1)\u000a                        waitText += " for " + waitList[0] + " to trigger";\u000a                    return waitText;\u000a                }\u000a\u000a                else\u000a                    return "Waiting to trigger";\u000a\u000a            }, self);\u000a            self.triggerIconClass = ko.pureComputed(function () {\u000a                if (!self.IsHomed())\u000a                    return "not-homed";\u000a                if (self.IsTriggered())\u000a                    return "trigger";\u000a                if (Octolapse.PrinterStatus.isPaused())\u000a                    return "paused";\u000a                if (self.IsWaiting())\u000a                    return "wait";\u000a                else\u000a                    return "fa-inverse";\u000a            }, self);\u000a\u000a            self.getInfoText = ko.pureComputed(function () {\u000a                return "No info for this trigger";\u000a            }, self);\u000a            self.getInfoIconText = ko.pureComputed(function () {\u000a                return "";\u000a            }, self);\u000a        };\u000a        Octolapse.gcodeTriggerStateViewModel = function (state) {\u000a            //console.log("creating gcode trigger state view model");\u000a            var self = this;\u000a            self.Type = ko.observable(state.Type);\u000a            self.Name = ko.observable(state.Name);\u000a            self.IsTriggered = ko.observable(state.IsTriggered);\u000a            self.IsWaiting = ko.observable(state.IsWaiting);\u000a            self.IsWaitingOnZHop = ko.observable(state.IsWaitingOnZHop);\u000a            self.IsWaitingOnExtruder = ko.observable(state.IsWaitingOnExtruder);\u000a            self.SnapshotCommand = ko.observable(state.SnapshotCommand);\u000a            self.RequireZHop = ko.observable(state.RequireZHop);\u000a            self.TriggeredCount = ko.observable(state.TriggeredCount).extend({compactint: 1});\u000a            self.IsHomed = ko.observable(state.IsHomed);\u000a            self.IsInPosition = ko.observable(state.IsInPosition);\u000a            self.InPathPosition = ko.observable(state.IsInPathPosition);\u000a            self.IsWaitingOnFeature = ko.observable(state.IsWaitingOnFeature);\u000a            self.update = function (state) {\u000a                self.Type(state.Type);\u000a                self.Name(state.Name);\u000a                self.IsTriggered(state.IsTriggered);\u000a                self.IsWaiting(state.IsWaiting);\u000a                self.IsWaitingOnZHop(state.IsWaitingOnZHop);\u000a                self.IsWaitingOnExtruder(state.IsWaitingOnExtruder);\u000a                self.SnapshotCommand(state.SnapshotCommand);\u000a                self.RequireZHop(state.RequireZHop);\u000a                self.TriggeredCount(state.TriggeredCount);\u000a                self.IsHomed(state.IsHomed);\u000a                self.IsInPosition(state.IsInPosition);\u000a                self.InPathPosition(state.InPathPosition);\u000a                self.IsWaitingOnFeature(state.IsWaitingOnFeature);\u000a            };\u000a\u000a            self.triggerBackgroundIconClass = ko.pureComputed(function () {\u000a                if (!self.IsHomed())\u000a                    return "bg-not-homed";\u000a                else if (!self.IsTriggered() && Octolapse.PrinterStatus.isPaused())\u000a                    return " bg-paused";\u000a                else\u000a                    return "";\u000a            }, self);\u000a\u000a            /* style related computed functions */\u000a            self.triggerStateText = ko.pureComputed(function () {\u000a                if (!self.IsHomed())\u000a                    return "Idle until all axes are homed";\u000a                else if (self.IsTriggered())\u000a                    return "Triggering a snapshot";\u000a                else if (Octolapse.PrinterStatus.isPaused())\u000a                    return "Paused";\u000a                else if (self.IsWaiting()) {\u000a                    // Create a list of things we are waiting on\u000a                    var waitText = "Waiting";\u000a                    var waitList = [];\u000a                    if (self.IsWaitingOnZHop())\u000a                        waitList.push("zhop");\u000a                    if (self.IsWaitingOnExtruder())\u000a                        waitList.push("extruder");\u000a                    if (!self.IsInPosition() && !self.InPathPosition())\u000a                        waitList.push("position");\u000a                    if (self.IsWaitingOnFeature())\u000a                        waitList.push("feature");\u000a                    if (waitList.length > 1) {\u000a                        waitText += " for " + waitList.join(" and ");\u000a                        waitText += " to trigger";\u000a                    }\u000a                    else if (waitList.length === 1)\u000a                        waitText += " for " + waitList[0] + " to trigger";\u000a                    return waitText;\u000a                }\u000a\u000a                else\u000a                    return "Looking for snapshot gcode";\u000a\u000a            }, self);\u000a            self.triggerIconClass = ko.pureComputed(function () {\u000a                if (!self.IsHomed())\u000a                    return "not-homed";\u000a                if (self.IsTriggered())\u000a                    return "trigger";\u000a                if (Octolapse.PrinterStatus.isPaused())\u000a                    return "paused";\u000a                if (self.IsWaiting())\u000a                    return "wait";\u000a                else\u000a                    return "fa-inverse";\u000a            }, self);\u000a\u000a            self.getInfoText = ko.pureComputed(function () {\u000a                return "Triggering on gcode command: " + self.SnapshotCommand();\u000a\u000a\u000a            }, self);\u000a            self.getInfoIconText = ko.pureComputed(function () {\u000a                return self.SnapshotCommand()\u000a            }, self);\u000a\u000a        };\u000a        Octolapse.layerTriggerStateViewModel = function (state) {\u000a            //console.log("creating layer trigger state view model");\u000a            var self = this;\u000a            self.Type = ko.observable(state.Type);\u000a            self.Name = ko.observable(state.Name);\u000a            self.IsTriggered = ko.observable(state.IsTriggered);\u000a            self.IsWaiting = ko.observable(state.IsWaiting);\u000a            self.IsWaitingOnZHop = ko.observable(state.IsWaitingOnZHop);\u000a            self.IsWaitingOnExtruder = ko.observable(state.IsWaitingOnExtruder);\u000a            self.CurrentIncrement = ko.observable(state.CurrentIncrement);\u000a            self.IsLayerChange = ko.observable(state.IsLayerChange);\u000a            self.IsLayerChangeWait = ko.observable(state.IsLayerChangeWait);\u000a            self.IsHeightChange = ko.observable(state.IsHeightChange);\u000a            self.IsHeightChangeWait = ko.observable(state.IsHeightChangeWait);\u000a            self.HeightIncrement = ko.observable(state.HeightIncrement).extend({numeric: 2});\u000a            self.RequireZHop = ko.observable(state.RequireZHop);\u000a            self.TriggeredCount = ko.observable(state.TriggeredCount).extend({compactint: 1});\u000a            self.IsHomed = ko.observable(state.IsHomed);\u000a            self.Layer = ko.observable(state.Layer);\u000a            self.IsInPosition = ko.observable(state.IsInPosition);\u000a            self.InPathPosition = ko.observable(state.IsInPathPosition);\u000a            self.IsWaitingOnFeature = ko.observable(state.IsWaitingOnFeature);\u000a            self.update = function (state) {\u000a                self.Type(state.Type);\u000a                self.Name(state.Name);\u000a                self.IsTriggered(state.IsTriggered);\u000a                self.IsWaiting(state.IsWaiting);\u000a                self.IsWaitingOnZHop(state.IsWaitingOnZHop);\u000a                self.IsWaitingOnExtruder(state.IsWaitingOnExtruder);\u000a                self.CurrentIncrement(state.CurrentIncrement);\u000a                self.IsLayerChange(state.IsLayerChange);\u000a                self.IsLayerChangeWait(state.IsLayerChangeWait);\u000a                self.IsHeightChange(state.IsHeightChange);\u000a                self.IsHeightChangeWait(state.IsHeightChangeWait);\u000a                self.HeightIncrement(state.HeightIncrement);\u000a                self.RequireZHop(state.RequireZHop);\u000a                self.TriggeredCount(state.TriggeredCount);\u000a                self.IsHomed(state.IsHomed);\u000a                self.Layer(state.Layer);\u000a                self.IsInPosition(state.IsInPosition);\u000a                self.InPathPosition(state.InPathPosition);\u000a                self.IsWaitingOnFeature(state.IsWaitingOnFeature);\u000a            };\u000a            self.triggerBackgroundIconClass = ko.pureComputed(function () {\u000a                if (!self.IsHomed())\u000a                    return "bg-not-homed";\u000a                else if (!self.IsTriggered() && Octolapse.PrinterStatus.isPaused())\u000a                    return " bg-paused";\u000a            }, self);\u000a\u000a            /* style related computed functions */\u000a            self.triggerStateText = ko.pureComputed(function () {\u000a                if (!self.IsHomed())\u000a                    return "Idle until all axes are homed";\u000a                else if (self.IsTriggered())\u000a                    return "Triggering a snapshot";\u000a                else if (Octolapse.PrinterStatus.isPaused())\u000a                    return "Paused";\u000a                else if (self.IsWaiting()) {\u000a                    // Create a list of things we are waiting on\u000a                    //console.log("Generating wait state text for LayerTrigger");\u000a                    var waitText = "Waiting";\u000a                    var waitList = [];\u000a                    if (self.IsWaitingOnZHop())\u000a                        waitList.push("zhop");\u000a                    if (self.IsWaitingOnExtruder())\u000a                        waitList.push("extruder");\u000a                    if (!self.IsInPosition() && !self.InPathPosition())\u000a                    {\u000a                        waitList.push("position");\u000a                        //console.log("Waiting on position.");\u000a                    }\u000a                    if (self.IsWaitingOnFeature())\u000a                        waitList.push("feature");\u000a                    if (waitList.length > 1) {\u000a                        waitText += " for " + waitList.join(" and ");\u000a                        waitText += " to trigger";\u000a                    }\u000a\u000a                    else if (waitList.length === 1)\u000a                        waitText += " for " + waitList[0] + " to trigger";\u000a                    return waitText;\u000a                }\u000a                else if (self.HeightIncrement() > 0) {\u000a                    var heightToTrigger = self.HeightIncrement() * self.CurrentIncrement();\u000a                    return "Triggering when height reaches " + heightToTrigger.toFixed(1) + " mm";\u000a                }\u000a                else\u000a                    return "Triggering on next layer change";\u000a\u000a            }, self);\u000a\u000a            self.triggerIconClass = ko.pureComputed(function () {\u000a                if (!self.IsHomed())\u000a                    return "not-homed";\u000a                if (self.IsTriggered())\u000a                    return "trigger";\u000a                if (Octolapse.PrinterStatus.isPaused())\u000a                    return "paused";\u000a                if (self.IsWaiting())\u000a                    return " wait";\u000a                else\u000a                    return " fa-inverse";\u000a            }, self);\u000a\u000a            self.getInfoText = ko.pureComputed(function () {\u000a                var val = 0;\u000a                if (self.HeightIncrement() > 0)\u000a\u000a                    val = self.HeightIncrement() + " mm";\u000a\u000a                else\u000a                    val = "layer";\u000a                return "Triggering every " + Octolapse.ToCompactInt(val);\u000a\u000a\u000a            }, self);\u000a            self.getInfoIconText = ko.pureComputed(function () {\u000a                var val = 0;\u000a                if (self.HeightIncrement() > 0)\u000a                    val = self.CurrentIncrement();\u000a                else\u000a                    val = self.Layer();\u000a                return Octolapse.ToCompactInt(val);\u000a            }, self);\u000a\u000a        };\u000a        Octolapse.timerTriggerStateViewModel = function (state) {\u000a            //console.log("creating timer trigger state view model");\u000a            var self = this;\u000a            self.Type = ko.observable(state.Type);\u000a            self.Name = ko.observable(state.Name);\u000a            self.IsTriggered = ko.observable(state.IsTriggered);\u000a            self.IsWaiting = ko.observable(state.IsWaiting);\u000a            self.IsWaitingOnZHop = ko.observable(state.IsWaitingOnZHop);\u000a            self.IsWaitingOnExtruder = ko.observable(state.IsWaitingOnExtruder);\u000a            self.SecondsToTrigger = ko.observable(state.SecondsToTrigger);\u000a            self.IntervalSeconds = ko.observable(state.IntervalSeconds);\u000a            self.TriggerStartTime = ko.observable(state.TriggerStartTime).extend({time: null});\u000a            self.PauseTime = ko.observable(state.PauseTime).extend({time: null});\u000a            self.RequireZHop = ko.observable(state.RequireZHop);\u000a            self.TriggeredCount = ko.observable(state.TriggeredCount);\u000a            self.IsHomed = ko.observable(state.IsHomed);\u000a            self.IsInPosition = ko.observable(state.IsInPosition);\u000a            self.InPathPosition = ko.observable(state.IsInPathPosition);\u000a            self.IsWaitingOnFeature = ko.observable(state.IsWaitingOnFeature);\u000a            self.update = function (state) {\u000a                self.Type(state.Type);\u000a                self.Name(state.Name);\u000a                self.IsTriggered(state.IsTriggered);\u000a                self.IsWaiting(state.IsWaiting);\u000a                self.IsWaitingOnZHop(state.IsWaitingOnZHop);\u000a                self.IsWaitingOnExtruder(state.IsWaitingOnExtruder);\u000a                self.RequireZHop(state.RequireZHop);\u000a                self.SecondsToTrigger(state.SecondsToTrigger);\u000a                self.TriggerStartTime(state.TriggerStartTime);\u000a                self.PauseTime(state.PauseTime);\u000a                self.IntervalSeconds(state.IntervalSeconds);\u000a                self.TriggeredCount(state.TriggeredCount);\u000a                self.IsHomed(state.IsHomed);\u000a                self.IsInPosition(state.IsInPosition);\u000a                self.InPathPosition(state.InPathPosition);\u000a                self.IsWaitingOnFeature(state.IsWaitingOnFeature);\u000a            };\u000a\u000a\u000a            /* style related computed functions */\u000a            self.triggerStateText = ko.pureComputed(function () {\u000a                if (!self.IsHomed())\u000a                    return "Idle until all axes are homed";\u000a                else if (self.IsTriggered())\u000a                    return "Triggering a snapshot";\u000a                else if (Octolapse.PrinterStatus.isPaused())\u000a                    return "Paused";\u000a                else if (self.IsWaiting()) {\u000a                    // Create a list of things we are waiting on\u000a                    var waitText = "Waiting";\u000a                    var waitList = [];\u000a                    if (self.IsWaitingOnZHop())\u000a                        waitList.push("zhop");\u000a                    if (self.IsWaitingOnExtruder())\u000a                        waitList.push("extruder");\u000a                    if (!self.IsInPosition() && !self.InPathPosition())\u000a                        waitList.push("position");\u000a                    if (self.IsWaitingOnFeature())\u000a                        waitList.push("feature");\u000a                    if (waitList.length > 1) {\u000a                        waitText += " for " + waitList.join(" and ");\u000a                        waitText += " to trigger";\u000a                    }\u000a                    else if (waitList.length === 1)\u000a                        waitText += " for " + waitList[0] + " to trigger";\u000a                    return waitText;\u000a                }\u000a\u000a                else\u000a                    return "Triggering in " + self.SecondsToTrigger() + " seconds";\u000a\u000a            }, self);\u000a            self.triggerBackgroundIconClass = ko.pureComputed(function () {\u000a                if (!self.IsHomed())\u000a                    return "bg-not-homed";\u000a                else if (!self.IsTriggered() && Octolapse.PrinterStatus.isPaused())\u000a                    return " bg-paused";\u000a            }, self);\u000a            self.triggerIconClass = ko.pureComputed(function () {\u000a                if (!self.IsHomed())\u000a                    return "not-homed";\u000a                if (self.IsTriggered())\u000a                    return "trigger";\u000a                if (Octolapse.PrinterStatus.isPaused())\u000a                    return "paused";\u000a                if (self.IsWaiting())\u000a                    return " wait";\u000a                else\u000a                    return " fa-inverse";\u000a            }, self);\u000a            self.getInfoText = ko.pureComputed(function () {\u000a                return "Triggering every " + Octolapse.ToTimer(self.IntervalSeconds());\u000a            }, self);\u000a            self.getInfoIconText = ko.pureComputed(function () {\u000a                return "Triggering every " + Octolapse.ToTimer(self.IntervalSeconds());\u000a            }, self);\u000a        };\u000a\u000a// Bind the settings view model to the plugin settings element\u000a        OCTOPRINT_VIEWMODELS.push([\u000a            Octolapse.StatusViewModel\u000a            , []\u000a            , ["#octolapse_tab", "#octolapse_navbar"]\u000a        ]);\u000a    }\u000a);\u000a\u000a;\u000a
p0
.