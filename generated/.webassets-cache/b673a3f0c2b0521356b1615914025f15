V// source: plugin/octolapse/js/octolapse.profiles.printer.slicer.other.js\u000aOctolapse.create_other_slicer_viewmodel = function (profile_observables) {\u000a    var self = this;\u000a    self.round_to_increment_mm_min = 0.001;\u000a    self.round_to_increment_mm_sec = 0.000001;\u000a\u000a    self.axis_speed_display_units = ko.observable(profile_observables.axis_speed_display_units);\u000a    self.retract_length = ko.observable(profile_observables.retract_length).extend({numeric: 4});\u000a\u000a    self.z_hop = ko.observable(profile_observables.z_hop).extend({numeric: 4});\u000a\u000a    self.rounding_extender_options = {axis_speed_unit:{round_to_increment_mm_min: self.round_to_increment_mm_min,round_to_increment_mm_sec:self.round_to_increment_mm_sec,current_units_observable: self.axis_speed_display_units}};\u000a    self.speed_tolerance = ko.observable(profile_observables.speed_tolerance).extend(self.rounding_extender_options);\u000a    self.movement_speed = ko.observable(profile_observables.movement_speed).extend(self.rounding_extender_options);\u000a    self.retract_speed = ko.observable(profile_observables.retract_speed).extend(self.rounding_extender_options);\u000a    self.detract_speed = ko.observable(profile_observables.detract_speed).extend(self.rounding_extender_options);\u000a    self.print_speed = ko.observable(profile_observables.print_speed).extend(self.rounding_extender_options);\u000a    self.z_hop_speed = ko.observable(profile_observables.z_hop_speed).extend(self.rounding_extender_options);\u000a    self.perimeter_speed = ko.observable(profile_observables.perimeter_speed).extend(self.rounding_extender_options);\u000a    self.small_perimeter_speed = ko.observable(profile_observables.small_perimeter_speed).extend(self.rounding_extender_options);\u000a    self.external_perimeter_speed = ko.observable(profile_observables.external_perimeter_speed).extend(self.rounding_extender_options);\u000a    self.infill_speed = ko.observable(profile_observables.infill_speed).extend(self.rounding_extender_options);\u000a    self.solid_infill_speed = ko.observable(profile_observables.solid_infill_speed).extend(self.rounding_extender_options);\u000a    self.top_solid_infill_speed = ko.observable(profile_observables.top_solid_infill_speed).extend(self.rounding_extender_options);\u000a    self.support_speed = ko.observable(profile_observables.support_speed).extend(self.rounding_extender_options);\u000a    self.bridge_speed = ko.observable(profile_observables.bridge_speed).extend(self.rounding_extender_options);\u000a    self.gap_fill_speed = ko.observable(profile_observables.gap_fill_speed).extend(self.rounding_extender_options);\u000a    self.first_layer_speed = ko.observable(profile_observables.first_layer_speed).extend(self.rounding_extender_options);\u000a    self.first_layer_travel_speed = ko.observable(profile_observables.first_layer_travel_speed).extend(self.rounding_extender_options);\u000a    self.skirt_brim_speed = ko.observable(profile_observables.skirt_brim_speed).extend(self.rounding_extender_options);\u000a    self.above_raft_speed = ko.observable(profile_observables.above_raft_speed).extend(self.rounding_extender_options);\u000a    self.ooze_shield_speed = ko.observable(profile_observables.ooze_shield_speed).extend(self.rounding_extender_options);\u000a    self.prime_pillar_speed = ko.observable(profile_observables.prime_pillar_speed).extend(self.rounding_extender_options);\u000a\u000a    /*\u000a        Create a getter for each profile variable (settings.py - printer class)\u000a    */\u000a    self.get_retract_length = function () {\u000a        return self.retract_length();\u000a    };\u000a    self.get_retract_speed = function () {\u000a        return self.retract_speed();\u000a    };\u000a    self.get_detract_speed = function () {\u000a        return self.detract_speed();\u000a    };\u000a    self.get_movement_speed = function () {\u000a        return self.movement_speed();\u000a    };\u000a    self.get_z_hop = function () {\u000a        return self.z_hop();\u000a    };\u000a    self.get_z_hop_speed = function () {\u000a        return self.z_hop_speed();\u000a    };\u000a    self.get_maximum_z_speed = function () {\u000a        return null;\u000a    };\u000a    self.get_print_speed = function () {\u000a        return self.print_speed();\u000a    };\u000a    self.get_perimeter_speed = function () {\u000a        return self.perimeter_speed();\u000a    };\u000a    self.get_small_perimeter_speed = function () {\u000a        return self.small_perimeter_speed();\u000a    };\u000a    self.get_external_perimeter_speed = function () {\u000a        return self.external_perimeter_speed();\u000a    };\u000a    self.get_infill_speed = function () {\u000a        return self.infill_speed();\u000a    };\u000a    self.get_solid_infill_speed = function () {\u000a        return self.solid_infill_speed();\u000a    };\u000a    self.get_top_solid_infill_speed = function () {\u000a        return self.top_solid_infill_speed();\u000a    };\u000a    self.get_support_speed = function () {\u000a        return self.support_speed();\u000a    };\u000a    self.get_bridge_speed = function () {\u000a        return self.bridge_speed();\u000a    };\u000a    self.get_gap_fill_speed = function () {\u000a        return self.gap_fill_speed();\u000a    };\u000a    self.get_first_layer_speed = function () {\u000a        return self.first_layer_speed();\u000a    };\u000a    self.get_first_layer_travel_speed = function () {\u000a        return self.first_layer_travel_speed();\u000a    };\u000a    self.get_skirt_brim_speed = function () {\u000a        return self.skirt_brim_speed();\u000a    };\u000a    self.get_above_raft_speed = function () {\u000a        return self.above_raft_speed();\u000a    };\u000a    self.get_ooze_shield_speed = function () {\u000a        return self.ooze_shield_speed();\u000a    };\u000a    self.get_prime_pillar_speed = function () {\u000a        return self.prime_pillar_speed();\u000a    };\u000a    self.get_speed_tolerance = function () {\u000a        return self.speed_tolerance();\u000a    };\u000a    self.get_axis_speed_display_units = function () {\u000a        return self.axis_speed_display_units();\u000a    };\u000a    // get the time component of the axis speed units (min/mm)\u000a    self.getAxisSpeedTimeUnit = ko.pureComputed(function () {\u000a        if (self.axis_speed_display_units() === "mm-min")\u000a            return 'min';\u000a        if (self.axis_speed_display_units() === "mm-sec")\u000a            return 'sec';\u000a        return '?';\u000a    }, self);\u000a    self.get_num_slow_layers = function () {\u000a        return 0;\u000a    }\u000a    // Get a list of speeds for use with feature detection\u000a    self.getSlicerSpeedList = function () {\u000a        var conv = 1;\u000a        if (self.axis_speed_display_units() === "mm-sec")\u000a            conv = 60;\u000a\u000a        var speedTolerance = self.get_speed_tolerance()\u000a\u000a        return [\u000a            {speed: Octolapse.roundToIncrement(self.movement_speed() * conv, self.get_speed_tolerance() * conv), type: "Movement"},\u000a            {speed: Octolapse.roundToIncrement(self.z_hop_speed() * conv, self.get_speed_tolerance() * conv), type: "Z Movement"},\u000a            {speed: Octolapse.roundToIncrement(self.retract_speed() * conv, self.get_speed_tolerance() * conv), type: "Retraction"},\u000a            {speed: Octolapse.roundToIncrement(self.detract_speed() * conv, self.get_speed_tolerance() * conv), type: "Detraction"},\u000a            {speed: Octolapse.roundToIncrement(self.print_speed() * conv, self.get_speed_tolerance() * conv), type: "Print"},\u000a            {speed: Octolapse.roundToIncrement(self.perimeter_speed() * conv, self.get_speed_tolerance() * conv), type: "Perimeter"},\u000a            {speed: Octolapse.roundToIncrement(self.small_perimeter_speed() * conv, self.get_speed_tolerance() * conv), type: "Small Perimeter"},\u000a            {speed: Octolapse.roundToIncrement(self.external_perimeter_speed() * conv, self.get_speed_tolerance() * conv), type: "External Perimeter"},\u000a            {speed: Octolapse.roundToIncrement(self.infill_speed() * conv, self.get_speed_tolerance() * conv), type: "Infill"},\u000a            {speed: Octolapse.roundToIncrement(self.solid_infill_speed() * conv, self.get_speed_tolerance() * conv), type: "Solid Infill"},\u000a            {speed: Octolapse.roundToIncrement(self.top_solid_infill_speed() * conv, self.get_speed_tolerance() * conv), type: "Top Solid Infill"},\u000a            {speed: Octolapse.roundToIncrement(self.support_speed() * conv, self.get_speed_tolerance() * conv), type: "Support"},\u000a            {speed: Octolapse.roundToIncrement(self.bridge_speed() * conv, self.get_speed_tolerance() * conv), type: "Bridge"},\u000a            {speed: Octolapse.roundToIncrement(self.gap_fill_speed() * conv, self.get_speed_tolerance() * conv), type: "Gap Fill"},\u000a            {speed: Octolapse.roundToIncrement(self.first_layer_speed() * conv, self.get_speed_tolerance() * conv), type: "First Layer"},\u000a            {speed: Octolapse.roundToIncrement(self.first_layer_travel_speed() * conv, self.get_speed_tolerance() * conv), type: "First Layer Travel"},\u000a            {speed: Octolapse.roundToIncrement(self.above_raft_speed() * conv, self.get_speed_tolerance() * conv), type: "Above Raft"},\u000a            {speed: Octolapse.roundToIncrement(self.ooze_shield_speed() * conv, self.get_speed_tolerance() * conv), type: "Ooze Shield"},\u000a            {speed: Octolapse.roundToIncrement(self.prime_pillar_speed() * conv, self.get_speed_tolerance() * conv), type: "Prime Pillar"},\u000a            {speed: Octolapse.roundToIncrement(self.skirt_brim_speed() * conv, self.get_speed_tolerance() * conv), type: "Skirt/Brim"}\u000a\u000a        ];\u000a    };\u000a    self.axisSpeedDisplayUnitsChanged = function (obj, event) {\u000a\u000a        if (Octolapse.Globals.is_admin()) {\u000a            if (event.originalEvent) {\u000a                // Get the current guid\u000a                var newUnit = $("#octolapse_axis_speed_display_unit_options").val();\u000a                var previousUnit = self.get_axis_speed_display_units();\u000a                if (newUnit === previousUnit) {\u000a                    //console.log("Axis speed display units, no change detected!")\u000a                    return false;\u000a\u000a                }\u000a                //console.log("Changing axis speed from " + previousUnit + " to " + newUnit)\u000a                // in case we want to have more units in the future, check all cases\u000a                // Convert all from mm-min to mm-sec\u000a\u000a                var axis_speed_round_to_increment = 0.000001;\u000a                var axis_speed_round_to_unit = 'mm-sec';\u000a                self.speed_tolerance(Octolapse.convertAxisSpeedUnit(self.get_speed_tolerance(), newUnit, previousUnit, axis_speed_round_to_increment, axis_speed_round_to_unit));\u000a\u000a                self.retract_speed(Octolapse.convertAxisSpeedUnit(self.get_retract_speed(), newUnit, previousUnit, self.round_to_increment_mm_min, previousUnit));\u000a                self.detract_speed(Octolapse.convertAxisSpeedUnit(self.get_detract_speed(), newUnit, previousUnit, self.round_to_increment_mm_min, previousUnit));\u000a                self.movement_speed(Octolapse.convertAxisSpeedUnit(self.get_movement_speed(), newUnit, previousUnit, self.round_to_increment_mm_min, previousUnit));\u000a                self.z_hop_speed(Octolapse.convertAxisSpeedUnit(self.get_z_hop_speed(), newUnit, previousUnit, self.round_to_increment_mm_min, previousUnit));\u000a\u000a                // Optional values\u000a                self.print_speed(Octolapse.convertAxisSpeedUnit(self.get_print_speed(), newUnit, previousUnit, self.round_to_increment_mm_min, previousUnit));\u000a                self.perimeter_speed(Octolapse.convertAxisSpeedUnit(self.get_perimeter_speed(), newUnit, previousUnit, self.round_to_increment_mm_min, previousUnit));\u000a                self.small_perimeter_speed(Octolapse.convertAxisSpeedUnit(self.get_small_perimeter_speed(), newUnit, previousUnit, self.round_to_increment_mm_min, previousUnit));\u000a                self.external_perimeter_speed(Octolapse.convertAxisSpeedUnit(self.get_external_perimeter_speed(), newUnit, previousUnit, self.round_to_increment_mm_min, previousUnit));\u000a                self.infill_speed(Octolapse.convertAxisSpeedUnit(self.get_infill_speed(), newUnit, previousUnit, self.round_to_increment_mm_min, previousUnit));\u000a                self.solid_infill_speed(Octolapse.convertAxisSpeedUnit(self.get_solid_infill_speed(), newUnit, previousUnit, self.round_to_increment_mm_min, previousUnit));\u000a                self.top_solid_infill_speed(Octolapse.convertAxisSpeedUnit(self.get_top_solid_infill_speed(), newUnit, previousUnit, self.round_to_increment_mm_min, previousUnit));\u000a                self.support_speed(Octolapse.convertAxisSpeedUnit(self.get_support_speed(), newUnit, previousUnit, self.round_to_increment_mm_min, previousUnit));\u000a                self.bridge_speed(Octolapse.convertAxisSpeedUnit(self.get_bridge_speed(), newUnit, previousUnit, self.round_to_increment_mm_min, previousUnit));\u000a\u000a                self.gap_fill_speed(Octolapse.convertAxisSpeedUnit(self.get_gap_fill_speed(), newUnit, previousUnit, self.round_to_increment_mm_min, previousUnit));\u000a                self.first_layer_speed(Octolapse.convertAxisSpeedUnit(self.get_first_layer_speed(), newUnit, previousUnit, self.round_to_increment_mm_min, previousUnit));\u000a                self.first_layer_travel_speed(Octolapse.convertAxisSpeedUnit(self.get_first_layer_travel_speed(), newUnit, previousUnit, self.round_to_increment_mm_min, previousUnit));\u000a                self.skirt_brim_speed(Octolapse.convertAxisSpeedUnit(self.get_skirt_brim_speed(), newUnit, previousUnit, self.round_to_increment_mm_min, previousUnit));\u000a\u000a                self.above_raft_speed(Octolapse.convertAxisSpeedUnit(self.get_above_raft_speed(), newUnit, previousUnit, self.round_to_increment_mm_min, previousUnit));\u000a                self.ooze_shield_speed(Octolapse.convertAxisSpeedUnit(self.get_ooze_shield_speed(), newUnit, previousUnit, self.round_to_increment_mm_min, previousUnit));\u000a                self.prime_pillar_speed(Octolapse.convertAxisSpeedUnit(self.get_prime_pillar_speed(), newUnit, previousUnit, self.round_to_increment_mm_min, previousUnit));\u000a                return true;\u000a            }\u000a        }\u000a    };\u000a};\u000a\u000a;\u000a
p0
.