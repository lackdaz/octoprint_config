V// source: plugin/octolapse/js/octolapse.profiles.printer.slicer.simplify_3d.js\u000aOctolapse.create_simplify_3d_viewmodel = function (profile_observables) {\u000a    var self = this;\u000a    self.get_axis_speed_display_units = function () {\u000a        return 'mm-min';\u000a    };\u000a    self.get_speed_tolerance = function () {\u000a        return 1;\u000a    };\u000a\u000a    self.round_to_increment_percent = 1;\u000a    self.round_to_increment_speed_mm_min = 0.1;\u000a    self.round_to_increment_length = 0.01;\u000a    self.percent_value_default = 100.0;\u000a\u000a    // Options for the round_to_increment extender for lengths\u000a    self.round_to_increment_options_length = {\u000a        round_to_increment:{round_to_increment: self.round_to_increment_length}\u000a    };\u000a    // Options for the round_to_increment extender for percents\u000a    self.round_to_increment_options_percent = {\u000a        round_to_increment:{round_to_increment: self.round_to_increment_percent}\u000a    };\u000a    // Options for the round_to_increment extender for speeds\u000a    self.rounding_extender_options_speed = {\u000a        axis_speed_unit:{\u000a            round_to_increment_mm_min: self.round_to_increment_speed_mm_min,\u000a            round_to_increment_mm_sec: self.round_to_increment_speed_mm_min/60,\u000a            current_units_observable: self.get_axis_speed_display_units}};\u000a\u000a    // Initialize profile variables from observables\u000a    // Lengths\u000a    self.retraction_distance = ko.observable(Octolapse.roundToIncrement(profile_observables.retract_length, self.round_to_increment_length))\u000a        .extend(self.round_to_increment_options_length);\u000a    self.retraction_vertical_lift = ko.observable(Octolapse.roundToIncrement(profile_observables.z_hop, self.round_to_increment_length))\u000a        .extend(self.round_to_increment_options_length);\u000a    // Speeds\u000a    self.retraction_retract_speed = ko.observable(Octolapse.convertAxisSpeedUnit(profile_observables.retract_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_speed_mm_min, 'mm-min'))\u000a        .extend(self.rounding_extender_options_speed);\u000a    self.default_printing_speed = ko.observable(Octolapse.convertAxisSpeedUnit(profile_observables.print_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_speed_mm_min, 'mm-min'))\u000a        .extend(self.rounding_extender_options_speed);\u000a    self.xy_axis_movement_speed = ko.observable(Octolapse.convertAxisSpeedUnit(profile_observables.movement_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_speed_mm_min, 'mm-min'))\u000a        .extend(self.rounding_extender_options_speed);\u000a    self.z_axis_movement_speed = ko.observable(Octolapse.convertAxisSpeedUnit(profile_observables.z_hop_speed, self.get_axis_speed_display_units(), profile_observables.axis_speed_display_units, self.round_to_increment_speed_mm_min, 'mm-min'))\u000a        .extend(self.rounding_extender_options_speed);\u000a    // Percents\u000a    self.first_layer_speed_multiplier = ko.observable(profile_observables.first_layer_speed_multiplier || self.percent_value_default).extend(self.round_to_increment_options_percent);\u000a    self.above_raft_speed_multiplier = ko.observable(profile_observables.above_raft_speed_multiplier || self.percent_value_default).extend(self.round_to_increment_options_percent);\u000a    self.prime_pillar_speed_multiplier = ko.observable(profile_observables.prime_pillar_speed_multiplier || self.percent_value_default).extend(self.round_to_increment_options_percent);\u000a    self.ooze_shield_speed_multiplier = ko.observable(profile_observables.ooze_shield_speed_multiplier || self.percent_value_default).extend(self.round_to_increment_options_percent);\u000a    self.outline_speed_multiplier = ko.observable(profile_observables.outline_speed_multiplier || self.percent_value_default).extend(self.round_to_increment_options_percent);\u000a    self.solid_infill_speed_multiplier = ko.observable(profile_observables.solid_infill_speed_multiplier || self.percent_value_default).extend(self.round_to_increment_options_percent);\u000a    self.support_structure_speed_multiplier = ko.observable(profile_observables.support_structure_speed_multiplier || self.percent_value_default).extend(self.round_to_increment_options_percent);\u000a    self.bridging_speed_multiplier = ko.observable(profile_observables.bridging_speed_multiplier || self.percent_value_default).extend(self.round_to_increment_options_percent);\u000a\u000a    /*\u000a        Create a getter for each profile variable (settings.py - printer class)\u000a    */\u000a    self.get_retract_length = function () {\u000a        return self.retraction_distance();\u000a    };\u000a    self.get_retract_speed = function () {\u000a        return self.retraction_retract_speed();\u000a    };\u000a    self.get_detract_speed = function () {\u000a        return self.retraction_retract_speed();\u000a    };\u000a    self.get_movement_speed = function () {\u000a        return self.xy_axis_movement_speed();\u000a    };\u000a    self.get_z_hop = function () {\u000a        return self.retraction_vertical_lift();\u000a    };\u000a    self.get_z_hop_speed = function () {\u000a        return self.z_axis_movement_speed();\u000a    };\u000a    self.get_print_speed = function () {\u000a        return self.default_printing_speed();\u000a    };\u000a    self.get_perimeter_speed = function () {\u000a        if (self.default_printing_speed() == null || self.outline_speed_multiplier() == null)\u000a            return null;\u000a        var perimeter_speed_multiplier = 100.0 - ((100 - self.outline_speed_multiplier()) / 2.0)\u000a        return Octolapse.roundToIncrement(self.default_printing_speed() * (perimeter_speed_multiplier / 100.0), self.get_speed_tolerance());\u000a    };\u000a    self.get_small_perimeter_speed = function () {\u000a        if (self.default_printing_speed() == null || self.outline_speed_multiplier() == null)\u000a            return null;\u000a        var perimeter_speed_multiplier = 100.0 - ((100 - self.outline_speed_multiplier()) / 2.0)\u000a        return Octolapse.roundToIncrement(self.default_printing_speed() * (perimeter_speed_multiplier / 100.0), self.get_speed_tolerance());\u000a    };\u000a    self.get_external_perimeter_speed = function () {\u000a        if (self.default_printing_speed() == null || self.outline_speed_multiplier() == null)\u000a            return null;\u000a        return Octolapse.roundToIncrement(self.default_printing_speed() * (self.outline_speed_multiplier() / 100.0), self.get_speed_tolerance());\u000a    };\u000a    self.get_infill_speed = function () {\u000a        return self.default_printing_speed();\u000a    };\u000a    self.get_solid_infill_speed = function () {\u000a        if (self.default_printing_speed() == null || self.solid_infill_speed_multiplier() == null)\u000a            return null;\u000a        return Octolapse.roundToIncrement(self.default_printing_speed() * (self.solid_infill_speed_multiplier() / 100.0), self.get_speed_tolerance());\u000a    };\u000a    self.get_top_solid_infill_speed = function () {\u000a        if (self.default_printing_speed() == null || self.solid_infill_speed_multiplier() == null)\u000a            return null;\u000a        return Octolapse.roundToIncrement(self.default_printing_speed() * (self.solid_infill_speed_multiplier() / 100.0), self.get_speed_tolerance());\u000a    };\u000a    self.get_support_speed = function () {\u000a        if (self.default_printing_speed() == null || self.support_structure_speed_multiplier() == null)\u000a            return null;\u000a        return Octolapse.roundToIncrement(self.default_printing_speed() * (self.support_structure_speed_multiplier() / 100.0), self.get_speed_tolerance());\u000a    };\u000a    self.get_bridge_speed = function () {\u000a        if (self.default_printing_speed() == null || self.bridging_speed_multiplier() == null)\u000a            return null;\u000a        return Octolapse.roundToIncrement(self.default_printing_speed() * (self.bridging_speed_multiplier() / 100.0), self.get_speed_tolerance());\u000a    };\u000a    self.get_gap_fill_speed = function () {\u000a        return self.default_printing_speed();\u000a    };\u000a    self.get_print_speed = function () {\u000a        return self.default_printing_speed();\u000a    }\u000a    self.get_first_layer_speed = function () {\u000a        if (self.default_printing_speed() == null || self.first_layer_speed_multiplier() == null)\u000a            return null;\u000a        return Octolapse.roundToIncrement(self.default_printing_speed() * (self.first_layer_speed_multiplier() / 100.0), self.get_speed_tolerance());\u000a    };\u000a    self.get_first_layer_travel_speed = function () {\u000a        return self.xy_axis_movement_speed();\u000a    };\u000a    self.get_skirt_brim_speed = function () {\u000a        return self.default_printing_speed();\u000a    };\u000a    self.get_first_layer_speed_multiplier = function () {\u000a        return self.first_layer_speed_multiplier();\u000a    };\u000a    self.get_above_raft_speed_multiplier = function () {\u000a        return self.above_raft_speed_multiplier();\u000a    };\u000a    self.get_prime_pillar_speed_multiplier = function () {\u000a        return self.prime_pillar_speed_multiplier();\u000a    };\u000a    self.get_ooze_shield_speed_multiplier = function () {\u000a        return self.ooze_shield_speed_multiplier();\u000a    };\u000a    self.get_outline_speed_multiplier = function () {\u000a        return self.outline_speed_multiplier();\u000a    };\u000a    self.get_solid_infill_speed_multiplier = function () {\u000a        return self.solid_infill_speed_multiplier();\u000a    };\u000a    self.get_support_structure_speed_multiplier = function () {\u000a        return self.support_structure_speed_multiplier();\u000a    };\u000a    self.get_bridging_speed_multiplier = function () {\u000a        return self.bridging_speed_multiplier();\u000a    };\u000a\u000a    self.get_above_raft_speed = function () {\u000a        if (self.default_printing_speed() == null || self.above_raft_speed_multiplier() == null)\u000a            return null;\u000a        return Octolapse.roundToIncrement(self.default_printing_speed() * (self.above_raft_speed_multiplier() / 100.0), self.get_speed_tolerance());\u000a    };\u000a    self.get_ooze_shield_speed = function () {\u000a        if (self.default_printing_speed() == null || self.ooze_shield_speed_multiplier() == null)\u000a            return null;\u000a        return Octolapse.roundToIncrement(self.default_printing_speed() * (self.ooze_shield_speed_multiplier() / 100.0), self.get_speed_tolerance());\u000a    };\u000a    self.get_prime_pillar_speed = function () {\u000a        if (self.default_printing_speed() == null || self.prime_pillar_speed_multiplier() == null)\u000a            return null;\u000a        return Octolapse.roundToIncrement(self.default_printing_speed() * (self.prime_pillar_speed_multiplier() / 100.0), self.get_speed_tolerance());\u000a    };\u000a\u000a    self.get_num_slow_layers = function () {\u000a        return 1;\u000a    }\u000a\u000a    self.roundSpeedForUniqueCheck = function (speed) {\u000a        if (speed == null)\u000a            return null;\u000a        speed -= 0.1;\u000a        var rounded_value = Octolapse.roundToIncrement(speed, 1);\u000a        return rounded_value;\u000a    }\u000a    // Get a list of speeds for use with feature detection\u000a    self.getSlicerSpeedList = function () {\u000a        return [\u000a            {speed: self.roundSpeedForUniqueCheck(self.get_retract_speed()), type: "Retraction"},\u000a            {speed: self.roundSpeedForUniqueCheck(self.get_first_layer_speed()), type: "First Layer"},\u000a            {speed: self.roundSpeedForUniqueCheck(self.get_above_raft_speed()), type: "Above Raft"},\u000a            {speed: self.roundSpeedForUniqueCheck(self.get_prime_pillar_speed()), type: "Prime Pillar"},\u000a            {speed: self.roundSpeedForUniqueCheck(self.get_ooze_shield_speed()), type: "Ooze Shield"},\u000a            {speed: self.roundSpeedForUniqueCheck(self.get_print_speed()), type: "Default Printing"},\u000a            {speed: self.roundSpeedForUniqueCheck(self.get_external_perimeter_speed()), type: "Exterior Outlines"},\u000a            {speed: self.roundSpeedForUniqueCheck(self.get_perimeter_speed()), type: "Interior Outlines"},\u000a            {speed: self.roundSpeedForUniqueCheck(self.get_solid_infill_speed()), type: "Solid Infill"},\u000a            {speed: self.roundSpeedForUniqueCheck(self.get_support_speed()), type: "Support Structure"},\u000a            {speed: self.roundSpeedForUniqueCheck(self.get_movement_speed()), type: "X/Y Movement"},\u000a            {speed: self.roundSpeedForUniqueCheck(self.get_z_hop_speed()), type: "Z Movement"},\u000a            {speed: self.roundSpeedForUniqueCheck(self.get_bridge_speed()), type: "Bridging"},\u000a\u000a        ];\u000a    };\u000a\u000a};\u000a\u000a;\u000a
p0
.