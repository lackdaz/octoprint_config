V// source: plugin/octolapse/js/octolapse.js\u000a/*\u000a##################################################################################\u000a# Octolapse - A plugin for OctoPrint used for making stabilized timelapse videos.\u000a# Copyright (C) 2017  Brad Hochgesang\u000a##################################################################################\u000a# This program is free software: you can redistribute it and/or modify\u000a# it under the terms of the GNU Affero General Public License as published\u000a# by the Free Software Foundation, either version 3 of the License, or\u000a# (at your option) any later version.\u000a#\u000a# This program is distributed in the hope that it will be useful,\u000a# but WITHOUT ANY WARRANTY; without even the implied warranty of\u000a# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\u000a# GNU Affero General Public License for more details.\u000a#\u000a# You should have received a copy of the GNU Affero General Public License\u000a# along with this program.  If not, see the following:\u000a# https://github.com/FormerLurker/Octolapse/blob/master/LICENSE\u000a#\u000a# You can contact the author either through the git-hub repository, or at the\u000a# following email address: FormerLurker@pm.me\u000a##################################################################################\u000a*/\u000aOctolapse = {};\u000a Octolapse.Printers = { 'current_profile_guid': function () {return null;}}\u000aOctolapseViewModel = {};\u000a\u000a$(function () {\u000a    // Finds the first index of an array with the matching predicate\u000a    Octolapse.IsShowingSettingsChangedPopup = false;\u000a\u000a    Octolapse.toggleContentFunction = function ($elm, options, updateObservable)\u000a    {\u000a\u000a        if(options.toggle_observable){\u000a            //console.log("Toggling element.");\u000a            if(updateObservable) {\u000a                options.toggle_observable(!options.toggle_observable());\u000a                //console.log("Observable updated - " + options.toggle_observable())\u000a            }\u000a            if (options.toggle_observable()) {\u000a                if (options.class_showing) {\u000a                    $elm.children('[class^="icon-"]').addClass(options.class_showing);\u000a                    $elm.children('[class^="fa"]').addClass(options.class_showing);\u000a                }\u000a                if (options.class_hiding) {\u000a                    $elm.children('[class^="icon-"]').removeClass(options.class_hiding);\u000a                    $elm.children('[class^="fa"]').removeClass(options.class_hiding);\u000a                }\u000a                if(options.container) {\u000a                    if (options.parent) {\u000a                        $elm.parents(options.parent).find(options.container).stop().slideDown('fast', options.onComplete);\u000a                    } else {\u000a                        $(options.container).stop().slideDown('fast', options.onComplete);\u000a                    }\u000a                }\u000a            }\u000a            else\u000a             {\u000a                 if (options.class_hiding) {\u000a                     $elm.children('[class^="icon-"]').addClass(options.class_hiding);\u000a                     $elm.children('[class^="fa"]').addClass(options.class_hiding);\u000a                 }\u000a                if (options.class_showing) {\u000a                    $elm.children('[class^="icon-"]').removeClass(options.class_showing);\u000a                    $elm.children('[class^="fa"]').removeClass(options.class_showing);\u000a                }\u000a                if(options.container) {\u000a                    if (options.parent) {\u000a                        $elm.parents(options.parent).find(options.container).stop().slideUp('fast', options.onComplete);\u000a                    } else {\u000a                        $(options.container).stop().slideUp('fast', options.onComplete);\u000a                    }\u000a                }\u000a            }\u000a        }\u000a        else {\u000a            if (options.class) {\u000a                $elm.children('[class^="icon-"]').toggleClass(options.class_hiding + ' ' + options.class_showing);\u000a                $elm.children('[class^="fa"]').toggleClass(options.class_hiding + ' ' + options.class_showing);\u000a            }\u000a            if (options.container) {\u000a                if (options.parent) {\u000a                    $elm.parents(options.parent).find(options.container).stop().slideToggle('fast', options.onComplete);\u000a                } else {\u000a                    $(options.container).stop().slideToggle('fast', options.onComplete);\u000a                }\u000a            }\u000a        }\u000a\u000a    };\u000a\u000a    Octolapse.toggleContent = {\u000a            init: function(element, valueAccessor) {\u000a                var $elm = $(element),\u000a                    options = $.extend({\u000a                        class_showing: null,\u000a                        class_hiding: null,\u000a                        container: null,\u000a                        parent: null,\u000a                        toggle_observable: null,\u000a                        onComplete: function() {\u000a                            $(document).trigger("slideCompleted");\u000a                        }\u000a                    }, valueAccessor());\u000a\u000a                    if(options.toggle_observable) {\u000a                        Octolapse.toggleContentFunction($elm, options, false);\u000a                    }\u000a\u000a\u000a                $elm.on("click", function(e) {\u000a                    e.preventDefault();\u000a                    Octolapse.toggleContentFunction($elm,options, true);\u000a\u000a                });\u000a            }\u000a        };\u000a    ko.bindingHandlers.octolapseToggle = Octolapse.toggleContent ;\u000a\u000a    Octolapse.arrayFirstIndexOf = function (array, predicate, predicateOwner) {\u000a        for (var i = 0, j = array.length; i < j; i++) {\u000a            if (predicate.call(predicateOwner, array[i])) {\u000a                return i;\u000a            }\u000a        }\u000a        return -1;\u000a    };\u000a    // Creates a pseudo-guid\u000a    Octolapse.guid = function () {\u000a        function s4() {\u000a            return Math.floor((1 + Math.random()) * 0x10000)\u000a                .toString(16)\u000a                .substring(1);\u000a        }\u000a        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\u000a            s4() + '-' + s4() + s4() + s4();\u000a    };\u000a    Octolapse.HasTakenFirstSnapshot = false;\u000a    // Returns an observable sorted by name(), case insensitive\u000a    Octolapse.nameSort = function (observable) {\u000a        return observable().sort(\u000a            function (left, right) {\u000a                var leftName = left.name().toLowerCase();\u000a                var rightName = right.name().toLowerCase();\u000a                return leftName === rightName ? 0 : (leftName < rightName ? -1 : 1);\u000a            });\u000a    };\u000a    // Toggles an element based on the data-toggle attribute.  Expects list of elements containing a selector, onClass and offClass.\u000a    // It will apply the on or off class to the result of each selector, which should return exactly one result.\u000a    Octolapse.toggle = function (caller, args) {\u000a        var elements = args.elements;\u000a        elements.forEach(function (item) {\u000a            var element = $(item.selector);\u000a            var onClass = item.onClass;\u000a            var offClass = item.offClass;\u000a            if (element.hasClass(onClass)) {\u000a                element.removeClass(onClass);\u000a                element.addClass(offClass);\u000a            } else {\u000a                element.removeClass(offClass);\u000a                element.addClass(onClass);\u000a            }\u000a        });\u000a    };\u000a\u000a    // Cookies (only for UI display purposes, not for any tracking\u000a    Octolapse.COOKIE_EXPIRE_DAYS = 30;\u000a\u000a    Octolapse.setLocalStorage = function (name, value) {\u000a        localStorage.setItem("octolapse_"+name,value)\u000a    }\u000a    Octolapse.getLocalStorage = function (name, value) {\u000a        return localStorage.getItem("octolapse_"+name)\u000a    }\u000a\u000a    Octolapse.displayPopup = function (options) {\u000a        new PNotify(options);\u000a    };\u000a\u000a     // Create Helpers\u000a    Octolapse.convertAxisSpeedUnit = function (speed, newUnit, previousUnit, tolerance, tolerance_unit){\u000a        if (speed == null)\u000a            return null;\u000a        if(tolerance_unit != newUnit)\u000a        {\u000a            switch (newUnit){\u000a                case "mm-min":\u000a                    tolerance = tolerance * 60.0;\u000a                case "mm-sec":\u000a                    tolerance = tolerance / 60.0;\u000a            }\u000a        }\u000a        if(newUnit == previousUnit)\u000a            return Octolapse.roundToIncrement(speed, tolerance);\u000a\u000a        switch (newUnit){\u000a            case "mm-min":\u000a                return Octolapse.roundToIncrement(speed*60.0, tolerance);\u000a            case "mm-sec":\u000a                return Octolapse.roundToIncrement(speed/60.0, tolerance);\u000a        }\u000a        return null;\u000a    };\u000a\u000a\u000a    // rounding to an increment\u000a    Octolapse.roundToIncrement = function (num, increment) {\u000a        if (increment == 0)\u000a            return 0;\u000a        if (num == null)\u000a            return null;\u000a\u000a        if (num != parseFloat(num))\u000a            return num;\u000a\u000a        var div = Math.round(num / increment);\u000a        var value = increment * div\u000a\u000a        // Find the number of decimals in the increment\u000a        var numDecimals = 0;\u000a        if ((increment % 1) != 0)\u000a            numDecimals = increment.toString().split(".")[1].length;\u000a\u000a        // tofixed can only support 20 decimals, reduce if necessary\u000a        if(numDecimals > 20) {\u000a            //console.log("Too much precision for tofixed:" + numDecimals + " - Reducing to 20");\u000a            numDecimals = 20;\u000a        }\u000a        // truncate value to numDecimals decimals\u000a        value = parseFloat(value.toFixed(numDecimals).toString())\u000a\u000a        return value;\u000a    }\u000a\u000a    Octolapse.Popups = {};\u000a    Octolapse.displayPopupForKey = function (options, key) {\u000a        if (key in Octolapse.Popups) {\u000a            Octolapse.Popups[key].remove();\u000a        }\u000a        Octolapse.Popups[key] = new PNotify(options);\u000a    };\u000a\u000a    Octolapse.ConfirmDialogs = {};\u000a    Octolapse.showConfirmDialog = function(key, title, text, onConfirm, onCancel)\u000a    {\u000a        if (key in Octolapse.ConfirmDialogs) {\u000a            Octolapse.ConfirmDialogs[key].remove();\u000a        }\u000a        Octolapse.ConfirmDialogs[key] = (\u000a            new PNotify({\u000a                title: title,\u000a                text: text,\u000a                icon: 'fa fa-question',\u000a                hide: false,\u000a                addclass: "octolapse",\u000a                confirm: {\u000a                    confirm: true\u000a                },\u000a                buttons: {\u000a                    closer: false,\u000a                    sticker: false\u000a                },\u000a                history: {\u000a                    history: false\u000a                }\u000a            })\u000a        ).get().on('pnotify.confirm', onConfirm).on('pnotify.cancel', onCancel);\u000a    };\u000a\u000a    Octolapse.ToggleElement = function (element) {\u000a        var args = $(this).attr("data-toggle");\u000a        Octolapse.toggle(this, JSON.parse(args));\u000a    };\u000a\u000a    // Add custom validator for csv strings (no inner whitespace)\u000a    $.validator.addMethod('csvString', function (value) {\u000a        var csvStringRegex = /^(\u005cs*[A-Z]\u005cd+\u005cs*(?:$|,))+$/gim;\u000a        var csvStringComponentRegex = /[A-Z]\u005cd+/gim;\u000a        //console.log("Validating csvString: " + value);\u000a        // We will allow 0 length trimmed strings\u000a        if (value.length > 0) {\u000a            if (!value.match(csvStringRegex))\u000a                return false;\u000a            var values = value.split(",");\u000a            for (var index = 0; index < values.length; index++) {\u000a                if (!values[index].match(csvStringComponentRegex))\u000a                    return false;\u000a            }\u000a        }\u000a        return true;\u000a    }, 'Please enter a list of strings separated by commas.');\u000a\u000a\u000a    $.validator.addMethod("check_one", function(value, elem, param)\u000a        {\u000a            //console.log("Validating trigger checks");\u000a            $(param).val()\u000a                if($(param + ":checkbox:checked").length > 0){\u000a                   return true;\u000a                }else {\u000a                   return false;\u000a                }\u000a        }\u000a    );\u000a\u000a    // Add custom validator for csv floats\u000a    $.validator.addMethod('csvFloat', function (value) {\u000a        return /^(\u005cs*-?\u005cd+(\u005c.\u005cd+)?)(\u005cs*,\u005cs*-?\u005cd+(\u005c.\u005cd+)?)*\u005cs*$/.test(value);\u000a    }, 'Please enter a list of decimals separated by commas.');\u000a    // Add a custom validator for csv floats between 0 and 100\u000a    $.validator.addMethod('csvRelative', function (value) {\u000a        return /^(\u005cs*\u005cd{0,2}(\u005c.\u005cd+)?|100(\u005c.0+)?)(\u005cs*,\u005cs*\u005cd{0,2}(\u005c.\u005cd+)?|100(\u005c.0+)?)*\u005cs*$/.test(value);\u000a    }, 'Please enter a list of decimals between 0.0 and 100.0 separated by commas.');\u000a    // Add a custom validator for integers\u000a    $.validator.addMethod('integer',\u000a        function (value) {\u000a            return /^-?\u005cd+$/.test(value);\u000a        }, 'Please enter an integer value.');\u000a\u000a    Octolapse.isPercent = function(value){\u000a\u000a        if(typeof value != 'string')\u000a            return false;\u000a        if (!value)\u000a            return false;\u000a        var value = value.trim();\u000a        if(value.length > 1 && value[value.length-1] == "%")\u000a            value = value.substr(0,value.length-2);\u000a        else\u000a            return false;\u000a\u000a        return Octolapse.isFloat(value)\u000a    };\u000a    Octolapse.isFloat = function(value){\u000a        if (!value)\u000a            return false;\u000a        return !isNaN(parseFloat(value))\u000a    };\u000a\u000a    Octolapse.parseFloat = function(value){\u000a        var ret = parseFloat(value);\u000a        if(!isNaN(ret))\u000a            return ret;\u000a        return null;\u000a    };\u000a\u000a    Octolapse.parsePercent = function(value){\u000a        var value = value.trim();\u000a        if(value.length > 1 && value[value.length-1] == "%")\u000a            value = value.substr(0,value.length-1);\u000a        else\u000a            return null;\u000a        return Octolapse.parseFloat(value)\u000a    }\u000a\u000a    $.validator.addMethod('slic3rPEFloatOrPercent',\u000a        function (value) {\u000a            if (!value)\u000a                return true;\u000a            if(!Octolapse.isPercent(value) && !Octolapse.isFloat(value))\u000a            {\u000a                return false;\u000a            }\u000a            return true;\u000a        }, 'Please enter a decimal or a percent.');\u000a\u000a    $.validator.addMethod('slic3rPEFloatOrPercentSteps',\u000a        function (value) {\u000a            if (!value)\u000a                return true;\u000a            if(Octolapse.isPercent(value))\u000a                value = Octolapse.parsePercent(value);\u000a            else if(Octolapse.isFloat(value))\u000a                value = Octolapse.parseFloat(value);\u000a            var rounded_value = Octolapse.roundToIncrement(value, 0.0001);\u000a            if (rounded_value == value)\u000a                return true;\u000a            return false\u000a\u000a        }, 'Please enter a multiple of 0.0001.');\u000a\u000a    // Add a custom validator for positive\u000a    $.validator.addMethod('integerPositive',\u000a        function (value) {\u000a            try {\u000a                var r = /^\u005cd+$/.test(value); // Check the number against a regex to ensure it contains only digits.\u000a                var n = +value; // Try to convert to number.\u000a                return r && !isNaN(n) && n > 0 && n % 1 == 0;\u000a            } catch (e) {\u000a                return false;\u000a            }\u000a        }, 'Please enter a positive integer value.');\u000a    $.validator.addMethod('ffmpegBitRate',\u000a        function (value) {\u000a            return /^\u005cd+[KkMm]$/.test(value);\u000a        }, 'Enter a bitrate, K for kBit/s and M for MBit/s.  Example: 1000K');\u000a    $.validator.addMethod('lessThanOrEqual',\u000a        function (value, element, param) {\u000a            var i = parseFloat(value);\u000a            var j = parseFloat($(param).val());\u000a            return (i <= j);\u000a        });\u000a    $.validator.addMethod('greaterThanOrEqual',\u000a        function (value, element, param) {\u000a            var i = parseFloat(value);\u000a            var j = parseFloat($(param).val());\u000a            return (i >= j);\u000a        });\u000a    $.validator.addMethod('lessThan',\u000a        function (value, element, param) {\u000a            var i = parseFloat(value);\u000a            var $target = $(param);\u000a\u000a            // I we didn't find a target, return true\u000a            if ($target.length === 0)\u000a                return true;\u000a            var j = parseFloat($target.val());\u000a            return (i < j);\u000a        });\u000a    $.validator.addMethod('greaterThan',\u000a        function (value, element, param) {\u000a            var i = parseFloat(value);\u000a            var $target = $(param);\u000a\u000a            // I we didn't find a target, return true\u000a            if ($target.length === 0)\u000a                return true;\u000a            var j = parseFloat($target.val());\u000a            return (i > j);\u000a        });\u000a    $.validator.addMethod('octolapseSnapshotTemplate',\u000a        function (value, element) {\u000a            var testUrl = value.toUpperCase().replace("{CAMERA_ADDRESS}", 'http://w.com/');\u000a            return jQuery.validator.methods.url.call(this, testUrl, element);\u000a        });\u000a    $.validator.addMethod('octolapseCameraRequestTemplate',\u000a        function (value, element) {\u000a            var testUrl = value.toUpperCase().replace("{CAMERA_ADDRESS}", 'http://w.com/').replace("{value}", "1");\u000a            return jQuery.validator.methods.url.call(this, testUrl, element);\u000a        });\u000a    $.validator.addMethod('octolapseRenderingTemplate',\u000a        function (value, element) {\u000a            var data = {"rendering_template":value};\u000a            $.ajax({\u000a                url: "./plugin/octolapse/validateRenderingTemplate",\u000a                type: "POST",\u000a                tryCount: 0,\u000a                retryLimit: 3,\u000a                data: JSON.stringify(data),\u000a                contentType: "application/json",\u000a                dataType: "json",\u000a                success: function (result) {\u000a                    if(result.success)\u000a                        return true;\u000a                    return false;\u000a                },\u000a                error: function (XMLHttpRequest, textStatus, errorThrown) {\u000a                    alert("Octolapse could not validate the rendering template.");\u000a                    return false;\u000a                }\u000a            });\u000a\u000a        });\u000a\u000a    jQuery.extend(jQuery.validator.messages, {\u000a        name: "Please enter a name.",\u000a        required: "This field is required.",\u000a        url: "Please enter a valid URL.",\u000a        number: "Please enter a valid number.",\u000a        equalTo: "Please enter the same value again.",\u000a        maxlength: jQuery.validator.format("Please enter no more than {0} characters."),\u000a        minlength: jQuery.validator.format("Please enter at least {0} characters."),\u000a        rangelength: jQuery.validator.format("Please enter a value between {0} and {1} characters long."),\u000a        range: jQuery.validator.format("Please enter a value between {0} and {1}."),\u000a        max: jQuery.validator.format("Please enter a value less than or equal to {0}."),\u000a        min: jQuery.validator.format("Please enter a value greater than or equal to {0}."),\u000a        octolapseCameraRequestTemplate: "The value is not a url.  You may use {camera_address} or {value} tokens.",\u000a        octolapseSnapshotTemplate: "The value is not a url.  You may use {camera_address} to refer to the web camera address."\u000a    });\u000a    // Knockout numeric binding\u000a    Octolapse.NullNumericText = "none";\u000a\u000a    Octolapse.round_axis_speed_unit = function (val, options) {\u000a        var round_to_increment_mm_min = options.round_to_increment_mm_min;\u000a        var round_to_increment_mm_sec = options.round_to_increment_mm_sec;\u000a        var current_units_observable = options.current_units_observable;\u000a        var round_to_percent = options.round_to_percent;\u000a        var return_text = options.return_text || false;\u000a\u000a        if (val == null)\u000a            return null;\u000a\u000a        // Check to see if it is a percent\u000a        var is_percent = Octolapse.isPercent(val)\u000a        if(is_percent)\u000a        {\u000a            if(round_to_percent)\u000a            {\u000a                val = Octolapse.parsePercent(val);\u000a            }\u000a            else\u000a                return null;\u000a        }\u000a        else\u000a            val = Octolapse.parseFloat(val)\u000a\u000a        if (val == null || isNaN(val))\u000a            return null;\u000a        try{\u000a            var round_to_increment = round_to_increment_mm_min;\u000a            if (is_percent) {\u000a                round_to_increment = round_to_percent\u000a            }\u000a            else if (current_units_observable() == 'mm-sec') {\u000a                round_to_increment = round_to_increment_mm_sec;\u000a            }\u000a            var rounded = Octolapse.roundToIncrement(val, round_to_increment);\u000a            if(is_percent && return_text)\u000a                return rounded.toString() + "%";\u000a            else if (return_text)\u000a                return rounded.toString();\u000a            return rounded;\u000a        }\u000a        catch (e){\u000a            console.log("Error rounding axis_speed_unit");\u000a        }\u000a\u000a    };\u000a\u000a    ko.extenders.axis_speed_unit = function (target, options) {\u000a        //console.log("rounding to axis speed units");\u000a        var result = ko.pureComputed({\u000a            read: target,\u000a            write: function (newValue) {\u000a                var current = target();\u000a                var valueToWrite = Octolapse.round_axis_speed_unit(newValue, options);\u000a                //only write if it changed\u000a                if (valueToWrite !== current) {\u000a                    target(valueToWrite);\u000a                } else {\u000a                    //if the rounded value is the same, but a different value was written, force a notification for the current field\u000a                    if (newValue !== current) {\u000a                        target.notifySubscribers(valueToWrite);\u000a                    }\u000a                }\u000a\u000a            }\u000a        }).extend({ notify: 'always' });\u000a\u000a        result(target());\u000a\u000a        return result;\u000a    };\u000a\u000a    ko.extenders.round_to_increment = function (target, options) {\u000a        //console.log("rounding to axis speed units");\u000a        var round_to_increment = options.round_to_increment;\u000a        var result = ko.pureComputed({\u000a            read: target,\u000a            write: function (newValue) {\u000a                var current = target();\u000a                var valueToWrite = Octolapse.roundToIncrement(newValue, round_to_increment);\u000a                //only write if it changed\u000a                if (valueToWrite !== current) {\u000a                    target(valueToWrite);\u000a                } else {\u000a                    //if the rounded value is the same, but a different value was written, force a notification for the current field\u000a                    if (newValue !== current) {\u000a                        target.notifySubscribers(valueToWrite);\u000a                    }\u000a                }\u000a\u000a            }\u000a        }).extend({ notify: 'always' });\u000a\u000a        result(target());\u000a\u000a        return result;\u000a    };\u000a\u000a    ko.extenders.numeric = function (target, precision) {\u000a        var result = ko.dependentObservable({\u000a            read: function () {\u000a                var val = target();\u000a                val = Octolapse.parseFloat(val)\u000a                if (val == null)\u000a                    return val;\u000a                try{\u000a                    // safari doesn't seem to like toFixed with a precision > 20\u000a                    if(precision > 20)\u000a                        precision = 20;\u000a                    return val.toFixed(precision);\u000a                }\u000a                catch (e){\u000a                    console.log("Error converting toFixed");\u000a                }\u000a\u000a            },\u000a            write: target\u000a        });\u000a\u000a        result.raw = target;\u000a        return result;\u000a    };\u000a    /**\u000a     * @return {string}\u000a     */\u000a    Octolapse.ToTime = function (seconds) {\u000a        if (val == null)\u000a            return Octolapse.NullTimeText;\u000a        var utcSeconds = seconds;\u000a        var d = new Date(0); // The 0 there is the key, which sets the date to the epoch\u000a        d.setUTCSeconds(utcSeconds);\u000a        return d.getHours() + ":"\u000a            + d.getMinutes() + ":"\u000a            + d.getSeconds();\u000a    };\u000a\u000a    /**\u000a     * @return {string}\u000a     */\u000a    Octolapse.ToTimer = function (seconds) {\u000a        if (seconds == null)\u000a            return "";\u000a        if (seconds <= 0)\u000a            return "0:00";\u000a\u000a        var hours = Math.floor(seconds / 3600);\u000a        if (hours > 0) {\u000a            return ("" + hours).slice(-2) + " Hrs"\u000a        }\u000a\u000a        seconds %= 3600;\u000a        var minutes = Math.floor(seconds / 60);\u000a        seconds = seconds % 60;\u000a        return ("0" + minutes).slice(-2) + ":" + ("0" + seconds).slice(-2);\u000a    };\u000a\u000a    Octolapse.ToCompactInt = function (value) {\u000a        var newValue = value;\u000a        if (value >= 1000) {\u000a            var suffixes = ["", "k", "m", "b", "t"];\u000a            var suffixNum = Math.floor(("" + value).length / 3);\u000a            var shortValue = '';\u000a            for (var precision = 2; precision >= 1; precision--) {\u000a                shortValue = parseFloat((suffixNum !== 0 ? (value / Math.pow(1000, suffixNum)) : value).toPrecision(precision));\u000a                var dotLessShortValue = (shortValue + '').replace(/[^a-zA-Z 0-9]+/g, '');\u000a                if (dotLessShortValue.length <= 2) { break; }\u000a            }\u000a\u000a            if (shortValue % 1 !== 0) shortValue = shortValue.toFixed(1);\u000a\u000a            newValue = shortValue + suffixes[suffixNum];\u000a        }\u000a        return newValue;\u000a    };\u000a\u000a\u000a    Octolapse.NullTimeText = "none";\u000a    ko.extenders.time = function (target, options) {\u000a        var result = ko.dependentObservable({\u000a            read: function () {\u000a                val = target();\u000a                return Octolapse.ToTime(val)\u000a            },\u000a            write: target\u000a        });\u000a\u000a        result.raw = target;\u000a        return result;\u000a    };\u000a\u000a    OctolapseViewModel = function (parameters) {\u000a        var self = this;\u000a        Octolapse.Globals = self;\u000a\u000a        self.loginState = parameters[0];\u000a        Octolapse.PrinterStatus = parameters[1];\u000a        // Global Values\u000a        self.show_position_state_changes = ko.observable(false);\u000a        self.show_position_changes = ko.observable(false);\u000a        self.show_extruder_state_changes = ko.observable(false);\u000a        self.show_trigger_state_changes = ko.observable(false);\u000a        self.auto_reload_latest_snapshot = ko.observable(false);\u000a        self.auto_reload_frames = ko.observable(5);\u000a        self.is_admin = ko.observable(false);\u000a        self.enabled = ko.observable(false);\u000a        self.navbar_enabled = ko.observable(false);\u000a        self.show_navbar_when_not_printing = ko.observable(false);\u000a        self.show_real_snapshot_time = ko.observable(false);\u000a        self.cancel_print_on_startup_error = ko.observable(true);\u000a\u000a        self.version = ko.observable("unknown");\u000a        // Create a guid to uniquely identify this client.\u000a        self.client_id = Octolapse.guid();\u000a        // Have we loaded the state yet?\u000a        self.HasLoadedState = false;\u000a\u000a\u000a        self.onBeforeBinding = function () {\u000a            self.is_admin(self.loginState.isAdmin());\u000a        };\u000a\u000a        self.startup_complete = false;\u000a        self.onStartupComplete = function () {\u000a            //console.log("Startup Complete")\u000a            self.getInitialState();\u000a            self.startup_complete = true;\u000a\u000a        };\u000a        self.onDataUpdaterReconnect = function () {\u000a            //console.log("Reconnected Client")\u000a            self.getInitialState();\u000a\u000a        };\u000a\u000a        self.getInitialState = function(){\u000a            //console.log("Getting initial state");\u000a            if(!self.startup_complete && self.is_admin()) {\u000a                //console.log("octolapse.js - Loading settings for current user after startup.");\u000a                Octolapse.Settings.loadSettings();\u000a            }\u000a            self.loadState();\u000a            // reset snapshot error state\u000a            Octolapse.Status.snapshot_error(false);\u000a            //console.log("Finished loading initial state.");\u000a\u000a        }\u000a\u000a        self.loadState = function () {\u000a            //console.log("octolapse.js - Loading State");\u000a            $.ajax({\u000a                url: "./plugin/octolapse/loadState",\u000a                type: "POST",\u000a                tryCount: 0,\u000a                retryLimit: 3,\u000a                ccontentType: "application/json",\u000a                dataType: "json",\u000a                success: function (result) {\u000a                    //console.log("The state has been loaded.  Waiting for message");\u000a                    self.initial_state_loaded = true;\u000a                },\u000a                error: function (XMLHttpRequest, textStatus, errorThrown) {\u000a\u000a                    //console.log("Octolapse was unable to retrieve the current state, trying again in 5 seconds");\u000a                    setTimeout(self.getInitialState, 5000);\u000a                    // Todo:  update the UI to show we're waiting for our state!\u000a                }\u000a            });\u000a        };\u000a\u000a\u000a        self.onUserLoggedIn = function (user) {\u000a            self.is_admin(self.loginState.isAdmin());\u000a            if(self.is_admin() && self.startup_complete) {\u000a                //console.log("octolapse.js - User Logged In after startup - Loading settings.  User: " + user.name);\u000a                Octolapse.Settings.loadSettings();\u000a            }\u000a            //else\u000a            //    console.log("octolapse.js - User Logged In before startup - waiting to load settings.  User: " + user.name);\u000a        };\u000a\u000a        self.onUserLoggedOut = function () {\u000a            //console.log("octolapse.js - User Logged Out");\u000a            self.is_admin(false);\u000a            Octolapse.Settings.clearSettings();\u000a        };\u000a\u000a        self.updateState = function (state) {\u000a            //console.log(state);\u000a            if (state.Position != null) {\u000a                //console.log('octolapse.js - state-changed - Position');\u000a                Octolapse.Status.updatePosition(state.Position);\u000a            }\u000a            if (state.PositionState != null) {\u000a                //console.log('octolapse.js - state-changed - Position State');\u000a                Octolapse.Status.updatePositionState(state.PositionState);\u000a            }\u000a            if (state.Extruder != null) {\u000a                //console.log('octolapse.js - state-changed - Extruder State');\u000a                Octolapse.Status.updateExtruderState(state.Extruder);\u000a            }\u000a            if (state.TriggerState != null) {\u000a                //console.log('octolapse.js - state-changed - Trigger State');\u000a                Octolapse.Status.updateTriggerStates(state.TriggerState);\u000a\u000a            }\u000a            if (state.MainSettings != null) {\u000a                //console.log('octolapse.js - state-changed - Trigger State');\u000a                // Do not update the main settings unless they are saved.\u000a                //Octolapse.SettingsMain.update(state.MainSettings);\u000a                // detect changes to auto_reload_latest_snapshot\u000a                var cur_auto_reload_latest_snapshot = Octolapse.Globals.auto_reload_latest_snapshot();\u000a\u000a                Octolapse.Globals.update(state.MainSettings);\u000a                Octolapse.SettingsMain.setSettingsVisibility(Octolapse.Globals.enabled());\u000a                if (cur_auto_reload_latest_snapshot !== Octolapse.Globals.auto_reload_latest_snapshot()) {\u000a                    //console.log('octolapse.js - Octolapse.Globals.auto_reload_latest_snapshot changed, erasing previous snapshot images');\u000a                    Octolapse.Status.erasePreviousSnapshotImages('octolapse_snapshot_image_container');\u000a                    Octolapse.Status.erasePreviousSnapshotImages('octolapse_snapshot_thumbnail_container');\u000a                }\u000a\u000a            }\u000a            if (state.Status != null) {\u000a                //console.log('octolapse.js - state-changed - Trigger State');\u000a                Octolapse.Status.update(state.Status);\u000a            }\u000a            if (!self.HasLoadedState) {\u000a                Octolapse.Status.updateLatestSnapshotImage(true);\u000a                Octolapse.Status.updateLatestSnapshotThumbnail(true);\u000a            }\u000a\u000a            self.HasLoadedState = true;\u000a        };\u000a\u000a        self.update = function (settings) {\u000a            // enabled\u000a            if (ko.isObservable(settings.is_octolapse_enabled))\u000a                self.enabled(settings.is_octolapse_enabled());\u000a            else\u000a                self.enabled(settings.is_octolapse_enabled);\u000a\u000a            if (ko.isObservable(settings.version))\u000a                self.version(settings.version());\u000a            else\u000a                self.version(settings.version);\u000a\u000a            // self.auto_reload_latest_snapshot\u000a            if (ko.isObservable(settings.auto_reload_latest_snapshot))\u000a                self.auto_reload_latest_snapshot(settings.auto_reload_latest_snapshot());\u000a            else\u000a                self.auto_reload_latest_snapshot(settings.auto_reload_latest_snapshot);\u000a            //auto_reload_frames\u000a            if (ko.isObservable(settings.auto_reload_frames))\u000a                self.auto_reload_frames(settings.auto_reload_frames());\u000a            else\u000a                self.auto_reload_frames(settings.auto_reload_frames);\u000a            // navbar_enabled\u000a            if (ko.isObservable(settings.show_navbar_icon))\u000a                self.navbar_enabled(settings.show_navbar_icon());\u000a            else\u000a                self.navbar_enabled(settings.show_navbar_icon);\u000a\u000a            if (ko.isObservable(settings.show_navbar_when_not_printing))\u000a                self.show_navbar_when_not_printing(settings.show_navbar_when_not_printing());\u000a            else\u000a                self.show_navbar_when_not_printing(settings.show_navbar_when_not_printing);\u000a\u000a\u000a            if (ko.isObservable(settings.show_position_state_changes))\u000a                self.show_position_state_changes(settings.show_position_state_changes());\u000a            else\u000a                self.show_position_state_changes(settings.show_position_state_changes);\u000a\u000a            if (ko.isObservable(settings.show_position_changes))\u000a                self.show_position_changes(settings.show_position_changes());\u000a            else\u000a                self.show_position_changes(settings.show_position_changes);\u000a\u000a            if (ko.isObservable(settings.show_extruder_state_changes))\u000a                self.show_extruder_state_changes(settings.show_extruder_state_changes());\u000a            else\u000a                self.show_extruder_state_changes(settings.show_extruder_state_changes);\u000a\u000a            if (ko.isObservable(settings.show_trigger_state_changes))\u000a                self.show_trigger_state_changes(settings.show_trigger_state_changes());\u000a            else\u000a                self.show_trigger_state_changes(settings.show_trigger_state_changes)\u000a\u000a            if (ko.isObservable(settings.show_real_snapshot_time))\u000a                self.show_real_snapshot_time(settings.show_real_snapshot_time());\u000a            else\u000a                self.show_real_snapshot_time(settings.show_real_snapshot_time)\u000a\u000a            if (ko.isObservable(settings.cancel_print_on_startup_error))\u000a                self.cancel_print_on_startup_error(settings.cancel_print_on_startup_error());\u000a            else\u000a                self.cancel_print_on_startup_error(settings.cancel_print_on_startup_error)\u000a\u000a\u000a\u000a        };\u000a\u000a        // Handle Plugin Messages from Server\u000a        self.onDataUpdaterPluginMessage = function (plugin, data) {\u000a            if (plugin !== "octolapse") {\u000a                return;\u000a            }\u000a            switch (data.type) {\u000a                case "settings-changed":\u000a                    {\u000a                        // Was this from us?\u000a                        if (self.client_id !== data.client_id && self.is_admin())\u000a                        {\u000a                            Octolapse.showConfirmDialog(\u000a                                "reload-settings",\u000a                                "Reload Settings",\u000a                                "A settings change was detected from another client.  Reload settings?",\u000a                                function(){\u000a                                    Octolapse.Settings.loadSettings();\u000a                                });\u000a                        }\u000a                        self.updateState(data);\u000a                    }\u000a                    break;\u000a                case "state-loaded":\u000a                    {\u000a                        //console.log('octolapse.js - state-loaded');\u000a                        self.updateState(data);\u000a                    }\u000a                    break;\u000a                case "state-changed":\u000a                    {\u000a                        //console.log('octolapse.js - state-changed');\u000a                        self.updateState(data);\u000a                    }\u000a                    break;\u000a                case "popup":\u000a                    {\u000a                        //console.log('octolapse.js - popup');\u000a                        var options = {\u000a                            title: 'Octolapse Notice',\u000a                            text: data.msg,\u000a                            type: 'notice',\u000a                            hide: true,\u000a                            addclass: "octolapse",\u000a                            desktop: {\u000a                                desktop: true\u000a                            }\u000a                        };\u000a                        Octolapse.displayPopup(options);\u000a                    }\u000a                    break;\u000a                case "popup-error":\u000a                    {\u000a                        //console.log('octolapse.js - popup-error');\u000a                        self.updateState(data);\u000a                        var options = {\u000a                            title: 'Error',\u000a                            text: data.msg,\u000a                            type: 'error',\u000a                            hide: false,\u000a                            addclass: "octolapse",\u000a                            desktop: {\u000a                                desktop: true\u000a                            }\u000a                        };\u000a                        Octolapse.displayPopup(options);\u000a                        break;\u000a                    }\u000a                case "print-start-error":\u000a                    {\u000a                        //console.log('octolapse.js - popup-error');\u000a                        self.updateState(data);\u000a                        var options = {\u000a                            title: 'Octolapse Startup Failed',\u000a                            text: data.msg,\u000a                            type: 'error',\u000a                            hide: false,\u000a                            addclass: "octolapse",\u000a                            desktop: {\u000a                                desktop: true\u000a                            }\u000a                        };\u000a                        Octolapse.displayPopupForKey(options,"print-start-error")\u000a                        break;\u000a                    }\u000a                case "timelapse-start":\u000a                    {\u000a                        //console.log('octolapse.js - timelapse-start');\u000a                        // Erase any previous images\u000a                        Octolapse.HasTakenFirstSnapshot = false;\u000a                        // let the status tab know that a timelapse is starting\u000a                        Octolapse.Status.onTimelapseStart();\u000a                        self.updateState(data);\u000a                        Octolapse.Status.snapshot_error(false);\u000a                    }\u000a                    break;\u000a                case "timelapse-complete":\u000a                    {\u000a                        //console.log('octolapse.js - timelapse-complete');\u000a                        self.updateState(data)\u000a                    }\u000a                    break;\u000a                case "camera-settings-error":\u000a                    // If only the camera image acquisition failed, use the camera error message\u000a                    var options = {\u000a                        title: 'Octolapse - Camera Settings Error',\u000a                        text: data.msg,\u000a                        type: 'error',\u000a                        hide: false,\u000a                        addclass: "octolapse"\u000a                    };\u000a                    Octolapse.displayPopupForKey(options, "snapshot_error");\u000a                    break;\u000a                case "snapshot-start":\u000a                    {\u000a                        //console.log('octolapse.js - snapshot-start');\u000a                        self.updateState(data);\u000a                        Octolapse.Status.snapshot_error(false);\u000a                    }\u000a                    break;\u000a                case "snapshot-complete":\u000a                    {\u000a                        //console.log('octolapse.js - snapshot-complete');\u000a                        //console.log(data);\u000a                        self.updateState(data);\u000a\u000a                        Octolapse.Status.snapshot_error(data.error || data.snapshot_error);\u000a                        if(!data.snapshot_success)\u000a                        {\u000a                            // If only the camera image acquisition failed, use the camera error message\u000a                            Octolapse.Status.snapshot_error(true);\u000a                            var options = {\u000a                                title: 'Octolapse - Camera Error',\u000a                                text: data.snapshot_error,\u000a                                type: 'error',\u000a                                hide: false,\u000a                                addclass: "octolapse"\u000a                            };\u000a                            Octolapse.displayPopupForKey(options, "snapshot_error")\u000a                        }\u000a                        else if(!data.success)\u000a                        {\u000a                            var options = {\u000a                                title: 'Octolapse - Stabilization Error',\u000a                                text: data.error,\u000a                                type: 'error',\u000a                                hide: false,\u000a                                addclass: "octolapse"\u000a                            };\u000a                            Octolapse.displayPopupForKey(options, "stabilization_error")\u000a                        }\u000a\u000a                        if (!Octolapse.HasTakenFirstSnapshot) {\u000a                            Octolapse.HasTakenFirstSnapshot = true;\u000a                            Octolapse.Status.erasePreviousSnapshotImages('octolapse_snapshot_image_container',true);\u000a                            Octolapse.Status.erasePreviousSnapshotImages('octolapse_snapshot_thumbnail_container', true);\u000a                            Octolapse.Status.updateLatestSnapshotThumbnail(true);\u000a                            Octolapse.Status.updateLatestSnapshotImage();\u000a                        }\u000a                        else\u000a                        {\u000a                            Octolapse.Status.updateLatestSnapshotThumbnail();\u000a                            Octolapse.Status.updateLatestSnapshotImage();\u000a                        }\u000a                    }\u000a                    break;\u000a                case "render-start":\u000a                    {\u000a                        //console.log('octolapse.js - render-start');\u000a                        self.updateState(data);\u000a                        Octolapse.Status.snapshot_error(false);\u000a\u000a                        var options = {\u000a                            title: 'Octolapse Rendering Started',\u000a                            text: data.msg,\u000a                            type: 'notice',\u000a                            hide: true,\u000a                            addclass: "octolapse",\u000a                            desktop: {\u000a                                desktop: true\u000a                            }\u000a                        };\u000a                        Octolapse.displayPopup(options);\u000a                    }\u000a                    break;\u000a                case "render-failed":{\u000a                        //console.log('octolapse.js - render-failed');\u000a                        self.updateState(data);\u000a                        var options = {\u000a                            title: 'Octolapse Rendering Failed',\u000a                            text: data.msg,\u000a                            type: 'error',\u000a                            hide: false,\u000a                            addclass: "octolapse",\u000a                            desktop: {\u000a                                desktop: true\u000a                            }\u000a                        };\u000a                        Octolapse.displayPopup(options);\u000a                        break;\u000a                }\u000a                case "before-after-render-error": {\u000a                    // If only the camera image acquisition failed, use the camera error message\u000a                    var options = {\u000a                        title: 'Octolapse - Before/After Render Script Error',\u000a                        text: data.msg,\u000a                        type: 'error',\u000a                        hide: false,\u000a                        addclass: "octolapse"\u000a                    };\u000a                    Octolapse.displayPopupForKey(options, "before_after_render_script_error");\u000a                    break;\u000a                }\u000a                case "render-complete":\u000a                    {\u000a                        //console.log('octolapse.js - render-complete');\u000a                    }\u000a                    break;\u000a                case "render-end":\u000a                    {\u000a                        //console.log('octolapse.js - render-end');\u000a                        self.updateState(data);\u000a                        if (!data.is_synchronized) {\u000a                            // Make sure we aren't synchronized, else there's no reason to display a popup\u000a                            if (!data.is_synchronized && data.success) {\u000a                                var options = {\u000a                                    title: 'Octolapse Rendering Complete',\u000a                                    text: data.msg,\u000a                                    type: 'success',\u000a                                    hide: false,\u000a                                    addclass: "octolapse",\u000a                                    desktop: {\u000a                                        desktop: true\u000a                                    }\u000a                                };\u000a                                Octolapse.displayPopup(options);\u000a                            }\u000a                        }\u000a\u000a                    }\u000a                    break;\u000a                case "synchronize-failed":\u000a                    {\u000a                        //console.log('octolapse.js - synchronize-failed');\u000a                        var options = {\u000a                            title: 'Octolapse Synchronization Failed',\u000a                            text: data.msg,\u000a                            type: 'error',\u000a                            hide: false,\u000a                            addclass: "octolapse",\u000a                            desktop: {\u000a                                desktop: true\u000a                            }\u000a                        };\u000a                        Octolapse.displayPopup(options);\u000a                    }\u000a                    break;\u000a                case "timelapse-stopping":\u000a                    {\u000a                        //console.log('octolapse.js - timelapse-stoping');\u000a                        Octolapse.Status.is_timelapse_active(false);\u000a                        var options = {\u000a                            title: 'Octolapse Timelapse Stopping',\u000a                            text: data.msg,\u000a                            type: 'notice',\u000a                            hide: true,\u000a                            addclass: "octolapse",\u000a                            desktop: {\u000a                                desktop: true\u000a                            }\u000a                        };\u000a                        Octolapse.displayPopup(options);\u000a                    }\u000a                    break;\u000a                case "timelapse-stopped":\u000a                    {\u000a                        //console.log('octolapse.js - timelapse-stopped');\u000a                        Octolapse.Status.onTimelapseStop();\u000a                        Octolapse.Status.snapshot_error(false);\u000a                        var options = {\u000a                            title: 'Octolapse Timelapse Stopped',\u000a                            text: data.msg,\u000a                            type: 'notice',\u000a                            hide: true,\u000a                            addclass: "octolapse",\u000a                            desktop: {\u000a                                desktop: true\u000a                            }\u000a                        };\u000a                        Octolapse.displayPopup(options);\u000a                    }\u000a                    break;\u000a                case "disabled-running":\u000a                    {\u000a                        var options = {\u000a                            title: 'Octolapse Disabled for Next Print',\u000a                            text: data.msg,\u000a                            type: 'notice',\u000a                            hide: true,\u000a                            addclass: "octolapse",\u000a                            desktop: {\u000a                                desktop: true\u000a                            }\u000a                        };\u000a                        Octolapse.displayPopup(options);\u000a                    }\u000a                break;\u000a                case "timelapse-stopped-error":\u000a                    {\u000a                        //console.log('octolapse.js - timelapse-stopped-error');\u000a                        Octolapse.Status.onTimelapseStop();\u000a                        var options = {\u000a                            title: 'Octolapse Timelapse Stopped',\u000a                            text: data.msg,\u000a                            type: 'error',\u000a                            hide: false,\u000a                            addclass: "octolapse"\u000a                        };\u000a                        Octolapse.displayPopup(options);\u000a                    }\u000a                    break;\u000a                case "out-of-bounds":\u000a                    {\u000a                        //console.log("An out-of-bounds snapshot position was detected.")\u000a                        var options = {\u000a                            title: 'Octolapse - Out Of Bounds',\u000a                            text: data.msg ,\u000a                            type: 'error',\u000a                            hide: false,\u000a                            addclass: "octolapse"\u000a                        };\u000a                        Octolapse.displayPopupForKey(options,"out-of-bounds");\u000a                    }\u000a                    break;\u000a                case "position-error":\u000a                    {\u000a                        //console.log("An out-of-bounds snapshot position was detected.")\u000a                        var options = {\u000a                            title: 'Octolapse - Position Error',\u000a                            text: data.msg,\u000a                            type: 'error',\u000a                            hide: false,\u000a                            addclass: "octolapse"\u000a                        };\u000a                        Octolapse.displayPopupForKey(options, "position-error");\u000a                    }\u000a                    break;\u000a                case "warning":\u000a                    //console.log("A warning was sent to the plugin.")\u000a                        var options = {\u000a                            title: 'Octolapse - Warning',\u000a                            text: data.msg,\u000a                            type: 'notice',\u000a                            hide: true,\u000a                            addclass: "octolapse"\u000a                        };\u000a                        Octolapse.displayPopup(options, "warning");\u000a                default:\u000a                    {\u000a                        //console.log('Octolapse.js - passing on message from server.  DataType:' + data.type);\u000a                    }\u000a            }\u000a        };\u000a\u000a\u000a    };\u000a    OCTOPRINT_VIEWMODELS.push([\u000a        OctolapseViewModel\u000a        , ["loginStateViewModel", "printerStateViewModel"]\u000a        , ["#octolapse"]\u000a    ]);\u000a\u000a\u000a\u000a});\u000a\u000a;\u000a
p0
.