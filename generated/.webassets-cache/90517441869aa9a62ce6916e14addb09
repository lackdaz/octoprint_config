V// source: plugin/octolapse/js/octolapse.profiles.snapshot.js\u000a/*\u000a##################################################################################\u000a# Octolapse - A plugin for OctoPrint used for making stabilized timelapse videos.\u000a# Copyright (C) 2017  Brad Hochgesang\u000a##################################################################################\u000a# This program is free software: you can redistribute it and/or modify\u000a# it under the terms of the GNU Affero General Public License as published\u000a# by the Free Software Foundation, either version 3 of the License, or\u000a# (at your option) any later version.\u000a#\u000a# This program is distributed in the hope that it will be useful,\u000a# but WITHOUT ANY WARRANTY; without even the implied warranty of\u000a# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\u000a# GNU Affero General Public License for more details.\u000a#\u000a# You should have received a copy of the GNU Affero General Public License\u000a# along with this program.  If not, see the following:\u000a# https://github.com/FormerLurker/Octolapse/blob/master/LICENSE\u000a#\u000a# You can contact the author either through the git-hub repository, or at the\u000a# following email address: FormerLurker@pm.me\u000a##################################################################################\u000a*/\u000a$(function () {\u000a\u000a    Octolapse.SnapshotProfileViewModel = function (values) {\u000a        var self = this;\u000a        self.profileTypeName = ko.observable("Snapshot")\u000a        self.guid = ko.observable(values.guid);\u000a        self.name = ko.observable(values.name);\u000a        self.description = ko.observable(values.description);\u000a        self.trigger_type = ko.observable(values.trigger_type);\u000a\u000a\u000a\u000a        /*\u000a            Timer Trigger Settings\u000a        */\u000a        self.timer_trigger_seconds = ko.observable(values.timer_trigger_seconds);\u000a        /*\u000a            Layer/Height Trigger Settings\u000a        */\u000a        self.layer_trigger_height = ko.observable(values.layer_trigger_height);\u000a\u000a        /*\u000a        * Position Restrictions\u000a        * */\u000a        self.position_restrictions_enabled = ko.observable(values.position_restrictions_enabled);\u000a        self.position_restrictions = ko.observableArray([]);\u000a        for (var index = 0; index < values.position_restrictions.length; index++) {\u000a            self.position_restrictions.push(\u000a                ko.observable(values.position_restrictions[index]));\u000a        }\u000a\u000a        /*\u000a        * Quaity Settiings\u000a        */\u000a        // Extruder State\u000a        self.extruder_state_requirements_enabled = ko.observable(values.extruder_state_requirements_enabled);\u000a        self.trigger_on_extruding = ko.observable(values.trigger_on_extruding);\u000a        self.trigger_on_extruding_start = ko.observable(values.trigger_on_extruding_start);\u000a        self.trigger_on_primed = ko.observable(values.trigger_on_primed);\u000a        self.trigger_on_retracting_start = ko.observable(values.trigger_on_retracting_start);\u000a        self.trigger_on_retracting = ko.observable(values.trigger_on_retracting);\u000a        self.trigger_on_partially_retracted = ko.observable(values.trigger_on_partially_retracted);\u000a        self.trigger_on_retracted = ko.observable(values.trigger_on_retracted);\u000a        self.trigger_on_detracting_start = ko.observable(values.trigger_on_detracting_start);\u000a        self.trigger_on_detracting = ko.observable(values.trigger_on_detracting);\u000a        self.trigger_on_detracted = ko.observable(values.trigger_on_detracted);\u000a\u000a        self.feature_restrictions_enabled  = ko.observable(values.feature_restrictions_enabled);\u000a\u000a        self.feature_trigger_on_detract = ko.observable(values.feature_trigger_on_detract);\u000a        self.feature_trigger_on_retract = ko.observable(values.feature_trigger_on_retract);\u000a        self.feature_trigger_on_movement = ko.observable(values.feature_trigger_on_movement);\u000a        self.feature_trigger_on_z_movement = ko.observable(values.feature_trigger_on_z_movement);\u000a        self.feature_trigger_on_perimeters = ko.observable(values.feature_trigger_on_perimeters);\u000a        self.feature_trigger_on_small_perimeters = ko.observable(values.feature_trigger_on_small_perimeters);\u000a        self.feature_trigger_on_external_perimeters = ko.observable(values.feature_trigger_on_external_perimeters);\u000a        self.feature_trigger_on_infill = ko.observable(values.feature_trigger_on_infill);\u000a        self.feature_trigger_on_solid_infill = ko.observable(values.feature_trigger_on_solid_infill);\u000a        self.feature_trigger_on_top_solid_infill = ko.observable(values.feature_trigger_on_top_solid_infill);\u000a        self.feature_trigger_on_supports = ko.observable(values.feature_trigger_on_supports);\u000a        self.feature_trigger_on_bridges = ko.observable(values.feature_trigger_on_bridges);\u000a        self.feature_trigger_on_gap_fills = ko.observable(values.feature_trigger_on_gap_fills);\u000a        self.feature_trigger_on_first_layer = ko.observable(values.feature_trigger_on_first_layer);\u000a        self.feature_trigger_on_first_layer_travel = ko.observable(values.feature_trigger_on_first_layer_travel);\u000a        self.feature_trigger_on_skirt_brim = ko.observable(values.feature_trigger_on_skirt_brim);\u000a        self.feature_trigger_on_normal_print_speed = ko.observable(values.feature_trigger_on_normal_print_speed);\u000a        self.feature_trigger_on_above_raft = ko.observable(values.feature_trigger_on_above_raft);\u000a        self.feature_trigger_on_ooze_shield = ko.observable(values.feature_trigger_on_ooze_shield);\u000a        self.feature_trigger_on_prime_pillar = ko.observable(values.feature_trigger_on_prime_pillar);\u000a        self.feature_trigger_on_wipe = ko.observable(values.feature_trigger_on_wipe);\u000a\u000a        self.require_zhop = ko.observable(values.require_zhop);\u000a        self.lift_before_move = ko.observable(values.lift_before_move);\u000a        self.retract_before_move = ko.observable(values.retract_before_move);\u000a        /*\u000a        * Snapshot Cleanup Settings\u000a        */\u000a        self.cleanup_after_render_complete = ko.observable(values.cleanup_after_render_complete);\u000a        self.cleanup_after_render_fail = ko.observable(values.cleanup_after_render_fail);\u000a\u000a\u000a        // Temporary variables to hold new layer position restrictions\u000a        self.new_position_restriction_type = ko.observable('required');\u000a        self.new_position_restriction_shape = ko.observable('rect');\u000a        self.new_position_restriction_x = ko.observable(0);\u000a        self.new_position_restriction_y = ko.observable(0);\u000a        self.new_position_restriction_x2 = ko.observable(1);\u000a        self.new_position_restriction_y2 = ko.observable(1);\u000a        self.new_position_restriction_r = ko.observable(1);\u000a        self.new_calculate_intersections = ko.observable(false);\u000a\u000a        self.feature_template_id = ko.pureComputed(function(){\u000a            var current_printer = Octolapse.Printers.currentProfile();\u000a            if(current_printer==null)\u000a                return 'snapshot-missing-printer-feature-template';\u000a           var current_slicer_type = Octolapse.Printers.currentProfile().slicer_type();\u000a           switch(current_slicer_type)\u000a           {\u000a               case "other":\u000a                   return "snapshot-other-slicer-feature-template";\u000a               case "slic3r-pe":\u000a                   return "snapshot-sli3er-pe-feature-template";\u000a               case "cura":\u000a                   return "snapshot-cura-feature-template";\u000a               case "simplify-3d":\u000a                   return "snapshot-simplify-3d-feature-template";\u000a               default:\u000a                   return "snapshot-other-slicer-feature-template";\u000a           }\u000a        });\u000a        self.has_non_unique_feature_detection_fields = ko.pureComputed(function(){\u000a            return self.non_unique_feature_detection_fields().length > 0\u000a        });\u000a        self.non_unique_feature_detection_fields = ko.pureComputed(function(){\u000a            var current_printer = Octolapse.Printers.currentProfile();\u000a            if(current_printer != null)\u000a                return current_printer.getNonUniqueSpeeds();\u000a            return [];\u000a        });\u000a        self.has_missing_feature_detection_fields = ko.pureComputed(function(){\u000a            var current_printer = Octolapse.Printers.currentProfile();\u000a            if(current_printer != null)\u000a                return current_printer.getMissingSpeedsList().length > 0;\u000a            return false;\u000a        });\u000a        self.missing_feature_detection_fields = ko.pureComputed(function(){\u000a            var current_printer = Octolapse.Printers.currentProfile();\u000a            if(current_printer != null)\u000a                return current_printer.getMissingSpeedsList();\u000a            return [];\u000a        });\u000a        self.addPositionRestriction = function () {\u000a            //console.log("Adding " + type + " position restriction.");\u000a            var restriction = ko.observable({\u000a                "Type": self.new_position_restriction_type(),\u000a                "Shape": self.new_position_restriction_shape(),\u000a                "X": self.new_position_restriction_x(),\u000a                "Y": self.new_position_restriction_y(),\u000a                "X2": self.new_position_restriction_x2(),\u000a                "Y2": self.new_position_restriction_y2(),\u000a                "R": self.new_position_restriction_r(),\u000a                "CalculateIntersections": self.new_calculate_intersections()\u000a            });\u000a            self.position_restrictions.push(restriction);\u000a        };\u000a\u000a        self.removePositionRestriction = function (index) {\u000a            //console.log("Removing " + type + " restriction at index: " + index());\u000a            self.position_restrictions.splice(index(), 1);\u000a\u000a        };\u000a    }\u000a    Octolapse.SnapshotProfileValidationRules = {\u000a        rules: {\u000a            /*Layer Position Restrictions*/\u000a            new_position_restriction_x: { lessThan: "#octolapse_new_position_restriction_x2:visible" },\u000a            new_position_restriction_x2: { greaterThan: "#octolapse_new_position_restriction_x:visible" },\u000a            new_position_restriction_y: { lessThan: "#octolapse_new_position_restriction_y2:visible" },\u000a            new_position_restriction_y2: { greaterThan: "#octolapse_new_position_restriction_y:visible" },\u000a            layer_trigger_enabled: {check_one: ".octolapse_trigger_enabled"},\u000a            gcode_trigger_enabled: {check_one: ".octolapse_trigger_enabled"},\u000a            timer_trigger_enabled: {check_one: ".octolapse_trigger_enabled"},\u000a        },\u000a        messages: {\u000a            name: "Please enter a name for your profile",\u000a            /*Layer Position Restrictions*/\u000a            new_position_restriction_x : { lessThan: "Must be less than the 'X2' field." },\u000a            new_position_restriction_x2: { greaterThan: "Must be greater than the 'X' field." },\u000a            new_position_restriction_y: { lessThan: "Must be less than the 'Y2." },\u000a            new_position_restriction_y2: { greaterThan: "Must be greater than the 'Y' field." },\u000a            layer_trigger_enabled: {check_one: "No triggers are enabled.  You must enable at least one trigger."},\u000a            gcode_trigger_enabled: {check_one: "No triggers are enabled.  You must enable at least one trigger."},\u000a            timer_trigger_enabled: {check_one: "No triggers are enabled.  You must enable at least one trigger."},\u000a        }\u000a    };\u000a});\u000a\u000a\u000a\u000a;\u000a
p0
.