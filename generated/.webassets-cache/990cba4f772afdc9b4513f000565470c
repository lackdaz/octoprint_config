V// source: plugin/cost/js/cost.js\u000a/*\u000a * View model for OctoPrint-Cost\u000a *\u000a * Author: Jan Szumiec\u000a * License: MIT\u000a */\u000a$(function() {\u000a    function CostViewModel(parameters) {\u000a        var printerState = parameters[0];\u000a        var settingsState = parameters[1];\u000a        var filesState = parameters[2];\u000a        var self = this;\u000a\u000a        // There must be a nicer way of doing this.\u000a	\u000a	settingsState.check_cost = ko.observable(true);\u000a\u000a	settingsState.costPerWeight = ko.pureComputed(function() {\u000a	  var currency = settingsState.settings.plugins.cost.currency();\u000a	  var weight = settingsState.settings.plugins.cost.weight();\u000a	  return currency + '/' + weight;\u000a	});\u000a	settingsState.costPerLength = ko.pureComputed(function() {\u000a	  var currency = settingsState.settings.plugins.cost.currency();\u000a	  var length = settingsState.settings.plugins.cost.length();\u000a	  return currency + '/' + length;\u000a	});\u000a	settingsState.costPerTime = ko.pureComputed(function() {\u000a	  var currency = settingsState.settings.plugins.cost.currency();\u000a	  var time = settingsState.settings.plugins.cost.time();\u000a	  return currency + '/' + time;\u000a	});\u000a	\u000a        printerState.costString = ko.pureComputed(function() {\u000a            if (settingsState.settings === undefined) return '-';\u000a            if (printerState.filament().length == 0) return '-';\u000a\u000a            var currency = settingsState.settings.plugins.cost.currency();\u000a	    var cost_per_length = settingsState.settings.plugins.cost.cost_per_length();\u000a	    var cost_per_weight = settingsState.settings.plugins.cost.cost_per_weight();\u000a	    var density_of_filament = settingsState.settings.plugins.cost.density_of_filament();\u000a            var cost_per_time = settingsState.settings.plugins.cost.cost_per_time();\u000a\u000a            var filament_used_length = printerState.filament()[0].data().length / 1000;\u000a	    var filament_used_volume = printerState.filament()[0].data().volume / 1000;\u000a            var expected_time = printerState.estimatedPrintTime() / 3600;\u000a\u000a	    if (settingsState.check_cost()) {\u000a	      var totalCost = cost_per_weight * filament_used_volume * density_of_filament + expected_time * cost_per_time;\u000a	    }\u000a	    else {\u000a	      var totalCost = cost_per_length * filament_used_length + expected_time * cost_per_time;\u000a	    }\u000a\u000a            return '' + currency + totalCost.toFixed(2);\u000a        });\u000a\u000a        var originalGetAdditionalData = filesState.getAdditionalData;\u000a        filesState.getAdditionalData = function(data) {\u000a            var output = originalGetAdditionalData(data);\u000a\u000a            if (data.hasOwnProperty('gcodeAnalysis')) {\u000a                var gcode = data.gcodeAnalysis;\u000a                if (gcode.hasOwnProperty('filament') && gcode.filament.hasOwnProperty('tool0') && gcode.hasOwnProperty('estimatedPrintTime')) {\u000a                    var currency = settingsState.settings.plugins.cost.currency();\u000a		    var cost_per_length = settingsState.settings.plugins.cost.cost_per_length();\u000a                    var cost_per_weight = settingsState.settings.plugins.cost.cost_per_weight();\u000a		    var density_of_filament = settingsState.settings.plugins.cost.density_of_filament();\u000a                    var cost_per_time = settingsState.settings.plugins.cost.cost_per_time();\u000a\u000a                    var filament_used_length = gcode.filament.tool0.length / 1000;\u000a		    var filament_used_volume = gcode.filament.tool0.volume / 1000;\u000a                    var expected_time = gcode.estimatedPrintTime / 3600;\u000a\u000a		    if (settingsState.check_cost()) {\u000a		      var totalCost = cost_per_weight * filament_used_volume * density_of_filament + expected_time * cost_per_time;\u000a		    }\u000a		    else {\u000a		      var totalCost = cost_per_length * filament_used_length + expected_time * cost_per_time;\u000a		    }\u000a\u000a                    output += gettext("Cost") + ": " + currency + totalCost.toFixed(2);\u000a                }\u000a            }\u000a\u000a            return output;\u000a        };\u000a\u000a        self.onStartup = function() {\u000a            var element = $("#state").find(".accordion-inner .progress");\u000a            if (element.length) {\u000a                var text = gettext("Cost");\u000a                element.before(text + ": <strong data-bind='text: costString'></strong><br>");\u000a            }\u000a        };\u000a\u000a    }\u000a\u000a    // view model class, parameters for constructor, container to bind to\u000a    OCTOPRINT_VIEWMODELS.push([\u000a        CostViewModel,\u000a        ["printerStateViewModel", "settingsViewModel", "gcodeFilesViewModel"],\u000a        []\u000a    ]);\u000a});\u000a\u000a;\u000a
p0
.