V// source: plugin/octoprint_finetunerptr/js/finetunerptr.js\u000a/* ########################################################\u000a *\u000a *             FineTuneRptr   |     04/2017++\u000a *  Author: Andreas Bruckmann | License: AGPLv3\u000a *\u000a * ########################################################\u000a *\u000a *  Keeps important calibration settings always accessible.\u000a *  As it's not integrated to any subpage, tab or settings,\u000a *  you can easily use it from whichever page in OctoPrint.\u000a *\u000a * ########################################################\u000a *\u000a *  Making Use of:\u000a *  OctoPrint EEPROM Editor by Salandora https://github.com/Salandora/OctoPrint-EEPROM-Repetier\u000a *  FontAwesome Icons http://fontawesome.io/3.2.1/icons/\u000a *  Accordion: Bootstrap https://www.w3schools.com/bootstrap/bootstrap_collapse.asp\u000a *  OctoPrint API http://docs.octoprint.org/en/master/jsclientlib/index.html\u000a *\u000a * ########################################################\u000a *\u000a */\u000a\u000a/*\u000a     TODO:\u000a       - Export/Import Full EEPROM compatible for Repetier Host\u000a       - Settings hier abspeichern http://docs.octoprint.org/en/master/plugins/mixins.html#settingsplugin\u000a         statt localStorage\u000a\u000a     BUG.S:\u000a      - Wenn EEPROM geladen wird, werden Favoriten angezeigt und in ihrer normalen Kategorie\u000a        sind die Einträge noch vorhanden.\u000a        Wenn man wieder lädt, verschwinden die Einträge aus den ursprünglichen Kategorien.\u000a*/\u000a\u000a$(function() {\u000a  function FinetunerptrViewModel(parameters) {\u000a    // Variables ######################################################################################\u000a    var self = this;\u000a    self.control = parameters[0];\u000a    self.connection = parameters[1];\u000a    self.loginStateViewModel = parameters[2];\u000a    self.isRepetierFirmware = ko.observable(false);\u000a\u000a    self.isConnected = ko.computed(function() {\u000a      return self.connection.isOperational() || self.connection.isPrinting() ||\u000a        self.connection.isReady() || self.connection.isPaused();\u000a    });\u000a\u000a    self.categorizedEeprom = ko.observableArray(categorizedEeprom);\u000a\u000a    self.loadedEepromSettingsCounter = ko.observable(0);\u000a    self.eepromLoaded = ko.computed(function() {\u000a      return (self.loadedEepromSettingsCounter() > 51);\u000a    });\u000a\u000a    // Methods ######################################################################################\u000a    // closeAllNotifications\u000a    self.closeAllNotifications = function() {\u000a      closeAllNotifications();\u000a    }\u000a    // Show Panel Dropdown\u000a    self.toggleNavbarDropdownPanel = function(strict) {\u000a      toggleNavbarDropdownPanel(strict);\u000a    }\u000a\u000a    // EEPROM Accordion Dropdown\u000a    self.collapseAllBootstrapAccordionPanels = function() {\u000a      collapseAllBootstrapAccordionPanels()\u000a    };\u000a\u000a    // data = element to handle , method = 1=add / 0=delete\u000a    // data can be passed from frontend as "addToFavorites"\u000a    self.updateFavorites = function(data, method) {\u000a      var _fullname = "__eepromSettings__favorites";\u000a      var savedData = JSON.parse(localStorage.getItem(_fullname));\u000a\u000a      var _localStorageData = {\u000a        'eepromFavorites': new Array()\u000a      };\u000a      // Load known favorites from localStorage\u000a      if (savedData && data) {\u000a        var knownEntry = (savedData.indexOf(data.description) !== -1);\u000a        for (var i in savedData) {\u000a          _localStorageData.eepromFavorites.push(savedData[i]);\u000a        }\u000a      } else if (savedData && !data) {\u000a        for (var i in savedData) {\u000a          _localStorageData.eepromFavorites.push(savedData[i]);\u000a        }\u000a      }\u000a\u000a      switch (method) {\u000a        case 0:\u000a          // Delete\u000a          if (knownEntry && data && data.description) {\u000a            _localStorageData.eepromFavorites.splice(_localStorageData.eepromFavorites.indexOf(data.description), 1);\u000a            localStorage.setItem(_fullname, JSON.stringify(_localStorageData.eepromFavorites));\u000a          }\u000a          break;\u000a        case 1:\u000a          // Add if not already member\u000a          if (!knownEntry && data && data.description) {\u000a            _localStorageData.eepromFavorites.push(data.description);\u000a            localStorage.setItem(_fullname, JSON.stringify(_localStorageData.eepromFavorites));\u000a          }\u000a          break;\u000a      }\u000a      self.scopeFavorites(_localStorageData.eepromFavorites);\u000a    };\u000a\u000a    self.scopeFavorites = function(favArray) {\u000a      return new Promise(function(resolve, reject) {\u000a        let promises = [];\u000a        self.categorizedEeprom()[0].EEPROM_Descriptions = ko.observableArray(favArray);\u000a\u000a        for (var favArrCount = 0; favArrCount < favArray.length; favArrCount++) {\u000a          let prom = new Promise(function(resolve, reject) {\u000a            self.getEepromValue(favArray[favArrCount])\u000a              .then(function(dataObj) {\u000a                var eepromValuesObj = {\u000a                  'category': dataObj.category,\u000a                  'description': dataObj.description,\u000a                  'value': dataObj.value,\u000a                  'Icon': dataObj.Icon,\u000a                  'dataType': dataObj.dataType,\u000a                  'origValue': dataObj.origValue,\u000a                  'position': dataObj.position,\u000a                };\u000a                resolve(eepromValuesObj);\u000a              });\u000a          });\u000a          promises.push(prom);\u000a        }\u000a        Promise.all(promises).then(function(values) {\u000a          self.categorizedEeprom()[0].EEPROM_Values([]);\u000a          for (let v in values) {\u000a            self.categorizedEeprom()[0].EEPROM_Values.push(values[v]);\u000a          }\u000a          resolve(self.categorizedEeprom()[0].EEPROM_Values);\u000a        });\u000a      });\u000a    };\u000a\u000a    self.getEepromValue = function(description) {\u000a      return new Promise(function(resolve, reject) {\u000a        var output = {};\u000a        for (var i = 0; i < self.categorizedEeprom().length; i++) {\u000a          for (var j = 0; j < self.categorizedEeprom()[i].EEPROM_Values().length; j++) {\u000a            if (self.categorizedEeprom()[i].EEPROM_Values()[j].description == description) {\u000a              self.categorizedEeprom()[i].EEPROM_Values()[j].Icon = self.categorizedEeprom()[i].Icon;\u000a              output = self.categorizedEeprom()[i].EEPROM_Values()[j];\u000a              resolve(output);\u000a            }\u000a          }\u000a        }\u000a        reject("Error:: " + description);\u000a      });\u000a    };\u000a\u000a    // Motors Off\u000a    self.setPrinterRepetierMotorsOff = function() {\u000a      if (!self.loginStateViewModel.loggedIn()){\u000a        showNotLoggedInNotification();\u000a         return -1;\u000a       }\u000a      self.control.sendCustomCommand({\u000a        command: 'M84'\u000a      });\u000a    };\u000a\u000a    //  Printer Home XY\u000a    self.setPrinterHomeXY = function() {\u000a      if (!self.loginStateViewModel.loggedIn()){\u000a        showNotLoggedInNotification();\u000a         return -1;\u000a       }\u000a      self.control.sendCustomCommand({\u000a        command: 'G28 X0 Y0'\u000a      });\u000a    };\u000a\u000a    // EEPROM Methods\u000a    self.fromHistoryData = function(data) {\u000a      _.each(data.logs, function(line) {\u000a        fromCurrentData_noRFw(line);\u000a      });\u000a    };\u000a    self.fromCurrentData = function(data) {\u000a      if (!self.isRepetierFirmware()) {\u000a        _.each(data.logs, function(line) {\u000a          fromCurrentData_noRFw(line);\u000a        });\u000a      } else {\u000a        _.each(data.logs, function(line) {\u000a          fromCurrentData_isRFw(line);\u000a        });\u000a      }\u000a    };\u000a    var fromCurrentData_noRFw = function(line) {\u000a      var match = /FIRMWARE_NAME:([^\u005cs]+)/i.exec(line);\u000a      if (match) {\u000a        if (/Repetier_([^\u005cs]*)/i.exec(match[0]))\u000a          self.isRepetierFirmware(true);\u000a      }\u000a    };\u000a    var fromCurrentData_isRFw = function(line) {\u000a      var match = /EPR:(\u005cd+) (\u005cd+) ([^\u005cs]+) (.+)/.exec(line);\u000a      if (match) {\u000a        var description = match[4];\u000a        categorizeEepromReading(match[4])\u000a          .then(function(category) {\u000a            regexPushObject(category, match);\u000a          })\u000a      }\u000a    }\u000a\u000a    var categorizeEepromReading = function(description) {\u000a      return new Promise(function(resolve, reject) {\u000a        for (var i = 0; i < self.categorizedEeprom().length; i++) {\u000a          if (self.categorizedEeprom()[i].EEPROM_Descriptions.indexOf(description) != -1) {\u000a            resolve(self.categorizedEeprom()[i].Name);\u000a          }\u000a        }\u000a        resolve("Other");\u000a      });\u000a    };\u000a\u000a    var regexPushObject = function(category, match) {\u000a      for (var i = 0; i < self.categorizedEeprom().length; i++) {\u000a        if (self.categorizedEeprom()[i].Name == category) {\u000a          var outputObj = {\u000a            dataType: match[1],\u000a            position: match[2],\u000a            origValue: match[3],\u000a            value: match[3],\u000a            description: match[4],\u000a            category: category,\u000a          };\u000a          self.categorizedEeprom()[i].EEPROM_Values.push(outputObj);\u000a        }\u000a      }\u000a      self.loadedEepromSettingsCounter(self.loadedEepromSettingsCounter() + 1);\u000a      if (self.loadedEepromSettingsCounter() == 52) {\u000a        self.updateFavorites();\u000a      }\u000a    };\u000a\u000a    self.loadEeprom = function() {\u000a      if (!self.loginStateViewModel.loggedIn()) return -1;\u000a      (function() {\u000a        return new Promise(function(resolve, reject) {\u000a          //first reset/clear everything\u000a          for (var l = 0; l < self.categorizedEeprom().length; l++) {\u000a            self.categorizedEeprom()[l].EEPROM_Values([]);\u000a          }\u000a          if (l == self.categorizedEeprom().length || !self.eepromLoaded()) {\u000a            resolve(self.categorizedEeprom());\u000a          }\u000a        });\u000a      })()\u000a      .then(function() {\u000a        self._requestEepromData();\u000a      });\u000a    };\u000a\u000a    self.saveEeprom = function() {\u000a      if (!self.loginStateViewModel.loggedIn()) return -1;\u000a      for (let i in self.categorizedEeprom()) {\u000a        for (let j in self.categorizedEeprom()[i].EEPROM_Values()) {\u000a          var valObj = self.categorizedEeprom()[i].EEPROM_Values()[j];\u000a          if (valObj.origValue !== valObj.value) {\u000a            self._requestSaveDataToEeprom(valObj.dataType, valObj.position, valObj.value);\u000a            valObj.origValue = valObj.value;\u000a          }\u000a        }\u000a      }\u000a    };\u000a\u000a    self._requestFirmwareInfo = function() {\u000a      if (!self.loginStateViewModel.loggedIn()) return -1;\u000a      self.control.sendCustomCommand({\u000a        command: "M115"\u000a      });\u000a    };\u000a    self._requestEepromData = function() {\u000a      if (!self.loginStateViewModel.loggedIn()) return -1;\u000a      self.control.sendCustomCommand({\u000a        command: "M205"\u000a      });\u000a    };\u000a    self._requestSaveDataToEeprom = function(data_type, position, value) {\u000a      if (!self.loginStateViewModel.loggedIn()) return -1;\u000a      var cmd = "M206 T" + data_type + " P" + position;\u000a      if (data_type == 3) {\u000a        cmd += " X" + value;\u000a        self.control.sendCustomCommand({\u000a          command: cmd\u000a        });\u000a      } else {\u000a        cmd += " S" + value;\u000a        self.control.sendCustomCommand({\u000a          command: cmd\u000a        });\u000a      }\u000a    };\u000a\u000a    // EventHandlers ################################################################################\u000a\u000a    self.connectOpClient = function(){\u000a      if (!self.loginStateViewModel.loggedIn()) showNotLoggedInNotification();\u000a      if (self.loginStateViewModel.loggedIn()) opClient.connection.connect();\u000a    }\u000a\u000a    self.disconnectOpClient = function(){\u000a      if (!self.loginStateViewModel.loggedIn()) showNotLoggedInNotification();\u000a      if (self.loginStateViewModel.loggedIn()) opClient.connection.disconnect();\u000a    }\u000a\u000a    self.onEventConnected = function() {\u000a      self._requestFirmwareInfo();\u000a    };\u000a\u000a    self.onEventDisconnected = function() {\u000a      self.isRepetierFirmware(false);\u000a    };\u000a\u000a    self.onStartup = function() {\u000a      $('#navbar_plugin_octoprint_finetunerptr a').on('click', function(e) {\u000a        if (self.isConnected() && !self.isRepetierFirmware()) {\u000a          self._requestFirmwareInfo();\u000a        }\u000a      });\u000a    };\u000a  }\u000a  OCTOPRINT_VIEWMODELS.push({\u000a    construct: FinetunerptrViewModel,\u000a    dependencies: ["controlViewModel", "connectionViewModel", "loginStateViewModel"],\u000a    elements: ["#navbar_plugin_octoprint_finetunerptr"]\u000a  });\u000a});\u000a\u000a;\u000a
p0
.