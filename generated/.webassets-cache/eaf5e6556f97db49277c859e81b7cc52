V// source: plugin/octolapse/js/octolapse.profiles.js\u000a/*\u000a##################################################################################\u000a# Octolapse - A plugin for OctoPrint used for making stabilized timelapse videos.\u000a# Copyright (C) 2017  Brad Hochgesang\u000a##################################################################################\u000a# This program is free software: you can redistribute it and/or modify\u000a# it under the terms of the GNU Affero General Public License as published\u000a# by the Free Software Foundation, either version 3 of the License, or\u000a# (at your option) any later version.\u000a#\u000a# This program is distributed in the hope that it will be useful,\u000a# but WITHOUT ANY WARRANTY; without even the implied warranty of\u000a# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\u000a# GNU Affero General Public License for more details.\u000a#\u000a# You should have received a copy of the GNU Affero General Public License\u000a# along with this program.  If not, see the following:\u000a# https://github.com/FormerLurker/Octolapse/blob/master/LICENSE\u000a#\u000a# You can contact the author either through the git-hub repository, or at the\u000a# following email address: FormerLurker@pm.me\u000a##################################################################################\u000a*/\u000a$(function() {\u000a    Octolapse.ProfilesViewModel = function(settings) {\u000a        // Create all observables and a reference to this instance for event handlers.\u000a        var self = this;\u000a\u000a        self.profiles = ko.observableArray();\u000a        self.profileTypeName = ko.observable(settings.profileTypeName);\u000a        self.default_profile = ko.observable();\u000a        self.current_profile_guid = ko.observable();\u000a        self.profileOptions = null;\u000a        self.profileViewModelCreate = settings.profileViewModelCreateFunction;\u000a        self.addEditTemplateName = settings.addEditTemplateName;\u000a        self.profileValidationRules = settings.profileValidationRules;\u000a        self.bindingElementId = settings.bindingElementId;\u000a        self.addUpdatePath = settings.addUpdatePath;\u000a        self.removeProfilePath = settings.removeProfilePath;\u000a        self.setCurrentProfilePath = settings.setCurrentProfilePath;\u000a\u000a        // Specialty function to return true if at least one camera is enabled\u000a        self.hasOneEnabled = ko.pureComputed(function () {\u000a            for (var i = 0; i < self.profiles().length; i++)\u000a            {\u000a                if(self.profiles()[i].enabled())\u000a                    return true;\u000a            }\u000a            return false;\u000a\u000a        }, Octolapse.Cameras);\u000a\u000a        // Add a helper function to show a flag if the current profile is not configured\u000a        self.currentProfileConfigured = ko.pureComputed(function () {\u000a            if(self.profileTypeName == 'Printer')\u000a            {\u000a                var current_printer = self.currentProfile();\u000a                if(current_printer!=null && !current_printer.saved_by_user_flag())\u000a                    return false;\u000a                return true;\u000a            }\u000a            return true;\u000a        });\u000a\u000a        // Created a sorted observable\u000a        self.profiles_sorted = ko.computed(function() { return Octolapse.nameSort(self.profiles) });\u000a\u000a        /*\u000a            Octoprint Viewmodel Events\u000a        */\u000a        // Adds or updats a profile via ajax\u000a        self.addUpdateProfile = function(profile, onSuccess) {\u000a            // If no guid is supplied, this is a new profile.  We will need to know that later when we push/update our observable array\u000a            //console.log("add/update profile")\u000a            var isNewProfile = profile().guid() === "";\u000a            var profile_js = null;\u000a            if(profile().toJS)\u000a                profile_js = profile().toJS();\u000a            else\u000a                profile_js = ko.toJS(profile);\u000a\u000a            var data = { "client_id": Octolapse.Globals.client_id, 'profile': profile_js, 'profileType': self.profileTypeName() };\u000a            $.ajax({\u000a                url: "./plugin/octolapse/" + self.addUpdatePath,\u000a                type: "POST",\u000a                data: JSON.stringify(data),\u000a                contentType: "application/json",\u000a                dataType: "json",\u000a                success: function (newProfile) {\u000a\u000a                    newProfile = new self.profileViewModelCreate(newProfile); // Create our profile viewmodel\u000a                    if (isNewProfile) {\u000a                        //console.log("Adding new profile");\u000a                        if (self.profiles().length === 0)\u000a                            self.current_profile_guid(newProfile.guid());\u000a                        self.profiles.push(newProfile); // Since it's new, just add it.\u000a                        // If there is only one profile, it's been set as the default profile\u000a                        //console.log("There are currently " + self.profiles().length.toString() + " profiles.");\u000a                    }\u000a                    else {\u000a                        // Since this is an existing element, we must replace the original with the  new one.\u000a                        // First get the original one\u000a                        var currentProfile = self.getProfileByGuid(newProfile.guid());\u000a                        // Now replace with the new one!\u000a                        self.profiles.replace(currentProfile, newProfile);\u000a\u000a                    }\u000a                    // Initiate the onSuccess callback.  Typically this would close an edit/add dialog, but\u000a                    // maybe later we will want to do something else?  This will make it easier.\u000a                    if (onSuccess != null) {\u000a                        onSuccess(this, { "newProfile": newProfile });\u000a                    }\u000a\u000a                },\u000a                error: function(XMLHttpRequest, textStatus, errorThrown) {\u000a                    alert("Unable to add/update the " + self.profileTypeName() +" profile!.  Status: " + textStatus + ".  Error: " + errorThrown);\u000a                }\u000a            });\u000a        };\u000a        //Remove an existing profile from the server settings, then if successful remove it from the observable array.\u000a        self.removeProfile = function (guid) {\u000a            var currentProfile = self.getProfileByGuid(guid)\u000a            if (confirm("Are you sure you want to permanently erase the profile:'" + currentProfile.name() + "'?")) {\u000a                var data = { "client_id": Octolapse.Globals.client_id,'guid': ko.toJS(guid), 'profileType': self.profileTypeName() };\u000a                $.ajax({\u000a                    url: "./plugin/octolapse/" + self.removeProfilePath,\u000a                    type: "POST",\u000a                    data: JSON.stringify(data),\u000a                    contentType: "application/json",\u000a                    dataType: "json",\u000a                    success: function (returnValue) {\u000a                        if(returnValue.success)\u000a                            self.profiles.remove(self.getProfileByGuid(guid));\u000a                        else\u000a                            alert("Unable to remove the " + currentProfile.name() +" profile!.  Error: " + returnValue.error);\u000a\u000a                        // close modal dialog.\u000a\u000a                    },\u000a                    error: function (XMLHttpRequest, textStatus, errorThrown) {\u000a                        alert("Unable to remove the " + currentProfile.name() + " profile!.  Status: " + textStatus + ".  Error: " + errorThrown);\u000a                    }\u000a                });\u000a            }\u000a        };\u000a        //Mark a profile as the current profile.\u000a        self.setCurrentProfile = function(guid) {\u000a            var currentProfile = self.getProfileByGuid(guid)\u000a            var data = { "client_id" : Octolapse.Globals.client_id,'guid': ko.toJS(guid), 'profileType': self.profileTypeName() };\u000a            $.ajax({\u000a                url: "./plugin/octolapse/" + self.setCurrentProfilePath,\u000a                type: "POST",\u000a                data: JSON.stringify(data),\u000a                contentType: "application/json",\u000a                dataType: "json",\u000a                success: function(result) {\u000a                    // Set the current profile guid observable.  This will cause the UI to react to the change.\u000a                    //console.log("current profile guid updated: " + result.guid)\u000a                    self.current_profile_guid(result.guid);\u000a                },\u000a                error: function(XMLHttpRequest, textStatus, errorThrown) {\u000a                    alert("Unable to set the current " + currentProfile.name() +" profile!.  Status: " + textStatus + ".  Error: " + errorThrown);\u000a                }\u000a            });\u000a        };\u000a        /*\u000a            Profile Create/Retrieve\u000a        */\u000a        // Creates a copy of an existing profile from the supplied guid.  If no guid is supplied (null or empty), it returns a new profile based on the default_profile settings\u000a        self.getNewProfile = function(guid) {\u000a            var newProfile = null;\u000a            if (guid == null) {\u000a                newProfile = new self.profileViewModelCreate(ko.toJS(self.default_profile())); // Create our profile viewmodel\u000a            }\u000a            else {\u000a                var current_profile = ko.toJS(self.getProfileByGuid(guid))\u000a                if(current_profile == null)\u000a                    return null;\u000a\u000a                newProfile = new self.profileViewModelCreate(ko.toJS(current_profile)); // Create our profile viewmodel\u000a            }\u000a            return newProfile;\u000a        };\u000a        // retrieves a profile fome the profiles array by GUID.\u000a        // This isn't a particularly fast thing, so don't do it too often.\u000a        self.getProfileByGuid = function(guid) {\u000a            var index = Octolapse.arrayFirstIndexOf(self.profiles(),\u000a                function(item) {\u000a                    var itemGuid = item.guid();\u000a                    return itemGuid === guid\u000a                }\u000a            );\u000a            if (index < 0) {\u000a                alert("Could not find a " + self.profileTypeName() +" profile with the guid:" + guid + "!");\u000a                return null;\u000a            }\u000a            return self.profiles()[index];\u000a        };\u000a        // Returns the current profile (the one with current_profile_guid = guid)\u000a        self.currentProfile = function() {\u000a            var guid = self.current_profile_guid();\u000a            var index = Octolapse.arrayFirstIndexOf(self.profiles(),\u000a                function(item) {\u000a                    var itemGuid = item.guid();\u000a                    var matchFound = itemGuid === guid;\u000a                    if (matchFound)\u000a                        return matchFound\u000a                }\u000a            );\u000a            if (index < 0) {\u000a                return null;\u000a            }\u000a            return self.profiles()[index];\u000a        };\u000a\u000a        self.currentProfileName = function() {\u000a            var profile =self.currentProfile();\u000a            if(profile == null)\u000a                return "No default profile selected";\u000a            return profile.name();\u000a        };\u000a\u000a        self.getResetProfile = function(currentProfile) {\u000a            var defaultProfileClone = new self.profileViewModelCreate(ko.toJS(self.default_profile));\u000a            defaultProfileClone.name(currentProfile.name());\u000a            defaultProfileClone.guid(currentProfile.guid());\u000a            return defaultProfileClone;\u000a        };\u000a\u000a        self.toggle = Octolapse.Toggle;\u000a\u000a        self.showAddEditDialog = function(guid, isCopy) {\u000a            //console.log("octolapse.profiles.js - Showing add edit dialog.")\u000a            isCopy = isCopy || false;\u000a            var title = null;\u000a            var addEditObservable = ko.observable();\u000a            var warning = null;\u000a            // get and configure the  profile\u000a            if (guid == null) {\u000a                title = "Add New " + settings.profileTypeName +" Profile";\u000a                newProfile = self.getNewProfile();\u000a                newProfile.name("New " + self.profileTypeName());\u000a                newProfile.guid("");\u000a            }\u000a            else {\u000a                var newProfile = self.getNewProfile(guid);\u000a                // If we don't find a profile, just return.  Something is messed up.\u000a                if (newProfile == null)\u000a                    return;\u000a                if (isCopy === true)\u000a                {\u000a                    newProfile.guid("");\u000a                    newProfile.name(newProfile.name() + " - Copy");\u000a                    title = _.sprintf("New " + settings.profileTypeName + " \u005c"%(name)s\u005c"", { name: newProfile.name() });\u000a                }\u000a                else\u000a                {\u000a                    title = _.sprintf("Edit " + settings.profileTypeName + " \u005c"%(name)s\u005c"", { name: newProfile.name() });\u000a                }\u000a                //console.log("Checking for active timelapse")\u000a                warning = null;\u000a                if(Octolapse.Status.is_timelapse_active())\u000a                {\u000a                     if(newProfile.profileTypeName() == 'Debug')\u000a                     {\u000a                        warning = "A timelapse is active.  All debug settings will IMMEDIATELY take effect, except for 'Test Mode' which will not take effect until the next print.";\u000a                     }\u000a                     else\u000a                        warning = "A timelapse is active.  Any changes made here will NOT take effect until the next print.";\u000a                }\u000a            }\u000a\u000a            // Save the model into the addEditObservable\u000a            addEditObservable(newProfile);\u000a\u000a            Octolapse.Settings.showAddEditDialog({ "profileObservable": addEditObservable, "title": title, "templateName": self.addEditTemplateName, "validationRules": JSON.parse(JSON.stringify(self.profileValidationRules)), 'warning':warning },this);\u000a        };\u000a        /*\u000a            Set data prior to bindings\u000a        */\u000a        ko.applyBindings(self, document.getElementById(self.bindingElementId));\u000a    };\u000a\u000a});\u000a\u000a\u000a\u000a;\u000a
p0
.