V// source: plugin/pi_support/js/pi_support.js\u000a$(function() {\u000a\u000a    function PiSupportViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.model = ko.observable();\u000a\u000a        self.currentUndervoltage = ko.observable(false);\u000a        self.currentOverheat = ko.observable(false);\u000a        self.pastUndervoltage = ko.observable(false);\u000a        self.pastOverheat = ko.observable(false);\u000a        self.currentIssue = ko.observable(false);\u000a        self.pastIssue = ko.observable(false);\u000a\u000a        self.requestData = function() {\u000a            OctoPrint.plugins.pi_support.get()\u000a                .done(function(response) {\u000a                    // Raspberry Pi model\u000a                    self.model(response.model);\u000a\u000a                    // Throttle state\u000a                    self.fromThrottleState(response.throttle_state);\u000a\u000a                    // OctoPi version\u000a                    $("#octopi_support_footer").remove();\u000a                    if (!response.octopi_version) return;\u000a\u000a                    var octoPrintVersion = $(".footer span.version");\u000a                    var octoPiVersion = $("<span id='octopi_support_footer'> " + gettext("running on") + " " + gettext("OctoPi")\u000a                        + " <span class='octopi_version'>" + response.octopi_version + "</span></span>");\u000a                    $(octoPiVersion).insertAfter(octoPrintVersion);\u000a                })\u000a        };\u000a\u000a        self.fromThrottleState = function(state) {\u000a            self.currentUndervoltage(state.current_undervoltage);\u000a            self.pastUndervoltage(state.past_undervoltage);\u000a            self.currentOverheat(state.current_overheat);\u000a            self.pastOverheat(state.past_overheat);\u000a            self.currentIssue(state.current_issue);\u000a            self.pastIssue(state.past_issue);\u000a        };\u000a\u000a        self.popoverContent = ko.pureComputed(function() {\u000a            var undervoltageParagraphClasses = "muted";\u000a            var undervoltageSymbolClasses = "";\u000a\u000a            var overheatParagraphClasses = "muted";\u000a            var overheatSymbolClasses = "";\u000a\u000a            if (self.currentUndervoltage()) {\u000a                undervoltageSymbolClasses = "text-error pi_support_state_pulsate";\u000a                undervoltageParagraphClasses = "";\u000a            } else if (self.pastUndervoltage()) {\u000a                undervoltageSymbolClasses = "text-error";\u000a                undervoltageParagraphClasses = "";\u000a            }\u000a\u000a            if (self.currentOverheat()) {\u000a                overheatSymbolClasses = "text-error pi_support_state_pulsate";\u000a                overheatParagraphClasses = "";\u000a            } else if (self.pastOverheat()) {\u000a                overheatSymbolClasses = "text-error";\u000a                overheatParagraphClasses = "";\u000a            }\u000a\u000a            return "<p class='" + undervoltageParagraphClasses + "'><strong class='" + undervoltageSymbolClasses + "'><i class=\u005c"fa fa-bolt\u005c"></i><i class=\u005c"fa fa-exclamation\u005c"></i></strong></strong> - " + gettext("Undervoltage. Make sure your power supply and cabling are providing enough power to the Pi.") + "</p>"\u000a                + "<p class='" + overheatParagraphClasses + "'><strong class='" + overheatSymbolClasses + "'><i class=\u005c"fa fa-thermometer-full\u005c"></i><i class=\u005c"fa fa-exclamation\u005c"></i></strong> - " + gettext("Frequency capping due to overheating. Improve cooling of the CPU and GPU.") + "</p>"\u000a                + "<p>" + gettext("A blinking symbol indicates a current issue, a non blinking symbol one that was observed some time since the Pi booted up.") + "</p>"\u000a                + "<p><small>" + gettext("Click the symbol in the navbar for more information.") + "</small></p>";\u000a        });\u000a\u000a        self.onStartup = function() {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onServerReconnect = function() {\u000a            self.requestData();\u000a        };\u000a\u000a        self.onDataUpdaterPluginMessage = function(plugin, data) {\u000a            if (plugin !== "pi_support") return;\u000a            if (!data.hasOwnProperty("state") || !data.hasOwnProperty("type")) return;\u000a            if (data.type !== "throttle_state") return;\u000a\u000a            self.fromThrottleState(data.state);\u000a        }\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push({\u000a        construct: PiSupportViewModel,\u000a        elements: ["#navbar_plugin_pi_support"]\u000a    });\u000a});\u000a\u000a;\u000a
p0
.