V// source: plugin/octolapse/js/octolapse.profiles.camera.js\u000a/*\u000a##################################################################################\u000a# Octolapse - A plugin for OctoPrint used for making stabilized timelapse videos.\u000a# Copyright (C) 2017  Brad Hochgesang\u000a##################################################################################\u000a# This program is free software: you can redistribute it and/or modify\u000a# it under the terms of the GNU Affero General Public License as published\u000a# by the Free Software Foundation, either version 3 of the License, or\u000a# (at your option) any later version.\u000a#\u000a# This program is distributed in the hope that it will be useful,\u000a# but WITHOUT ANY WARRANTY; without even the implied warranty of\u000a# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\u000a# GNU Affero General Public License for more details.\u000a#\u000a# You should have received a copy of the GNU Affero General Public License\u000a# along with this program.  If not, see the following:\u000a# https://github.com/FormerLurker/Octolapse/blob/master/LICENSE\u000a#\u000a# You can contact the author either through the git-hub repository, or at the\u000a# following email address: FormerLurker@pm.me\u000a##################################################################################\u000a*/\u000a$(function() {\u000a    Octolapse.CameraProfileViewModel = function (values) {\u000a        var self = this;\u000a        self.profileTypeName = ko.observable("Camera")\u000a        self.guid = ko.observable(values.guid);\u000a        self.name = ko.observable(values.name);\u000a        self.enabled = ko.observable(values.enabled);\u000a        self.description = ko.observable(values.description);\u000a        self.camera_type = ko.observable(values.camera_type);\u000a        self.gcode_camera_script = ko.observable(values.gcode_camera_script);\u000a        self.on_print_start_script = ko.observable(values.on_print_start_script);\u000a        self.on_before_snapshot_script = ko.observable(values.on_before_snapshot_script);\u000a        self.external_camera_snapshot_script = ko.observable(values.external_camera_snapshot_script);\u000a        self.on_after_snapshot_script = ko.observable(values.on_after_snapshot_script);\u000a        self.on_before_render_script = ko.observable(values.on_before_render_script);\u000a        self.on_after_render_script = ko.observable(values.on_after_render_script);\u000a        self.delay = ko.observable(values.delay);\u000a        self.timeout_ms = ko.observable(values.timeout_ms);\u000a        self.apply_settings_before_print = ko.observable(values.apply_settings_before_print);\u000a        self.address = ko.observable(values.address);\u000a        self.snapshot_request_template = ko.observable(values.snapshot_request_template);\u000a        self.snapshot_transpose = ko.observable(values.snapshot_transpose);\u000a        self.ignore_ssl_error = ko.observable(values.ignore_ssl_error);\u000a        self.username = ko.observable(values.username);\u000a        self.password = ko.observable(values.password);\u000a        self.brightness = ko.observable(values.brightness);\u000a        self.brightness_request_template = ko.observable(values.brightness_request_template);\u000a        self.contrast = ko.observable(values.contrast);\u000a        self.contrast_request_template = ko.observable(values.contrast_request_template);\u000a        self.saturation = ko.observable(values.saturation);\u000a        self.saturation_request_template = ko.observable(values.saturation_request_template);\u000a        self.white_balance_auto = ko.observable(values.white_balance_auto);\u000a        self.white_balance_auto_request_template = ko.observable(values.white_balance_auto_request_template);\u000a        self.gain = ko.observable(values.gain);\u000a        self.gain_request_template = ko.observable(values.gain_request_template);\u000a        self.powerline_frequency = ko.observable(values.powerline_frequency);\u000a        self.powerline_frequency_request_template = ko.observable(values.powerline_frequency_request_template);\u000a        self.white_balance_temperature = ko.observable(values.white_balance_temperature);\u000a        self.white_balance_temperature_request_template = ko.observable(values.white_balance_temperature_request_template);\u000a        self.sharpness = ko.observable(values.sharpness);\u000a        self.sharpness_request_template = ko.observable(values.sharpness_request_template);\u000a        self.backlight_compensation_enabled = ko.observable(values.backlight_compensation_enabled);\u000a        self.backlight_compensation_enabled_request_template = ko.observable(values.backlight_compensation_enabled_request_template);\u000a        self.exposure_type = ko.observable(values.exposure_type);\u000a        self.exposure_type_request_template = ko.observable(values.exposure_type_request_template);\u000a        self.exposure = ko.observable(values.exposure);\u000a        self.exposure_request_template = ko.observable(values.exposure_request_template);\u000a        self.exposure_auto_priority_enabled = ko.observable(values.exposure_auto_priority_enabled);\u000a        self.exposure_auto_priority_enabled_request_template = ko.observable(values.exposure_auto_priority_enabled_request_template);\u000a        self.pan = ko.observable(values.pan);\u000a        self.pan_request_template = ko.observable(values.pan_request_template);\u000a        self.tilt = ko.observable(values.tilt);\u000a        self.tilt_request_template = ko.observable(values.tilt_request_template);\u000a        self.autofocus_enabled = ko.observable(values.autofocus_enabled);\u000a        self.autofocus_enabled_request_template = ko.observable(values.autofocus_enabled_request_template);\u000a        self.focus = ko.observable(values.focus);\u000a        self.focus_request_template = ko.observable(values.focus_request_template);\u000a        self.zoom = ko.observable(values.zoom);\u000a        self.zoom_request_template = ko.observable(values.zoom_request_template);\u000a        self.led1_mode = ko.observable(values.led1_mode);\u000a        self.led1_mode_request_template = ko.observable(values.led1_mode_request_template);\u000a        self.led1_frequency = ko.observable(values.led1_frequency);\u000a        self.led1_frequency_request_template = ko.observable(values.led1_frequency_request_template);\u000a        self.jpeg_quality = ko.observable(values.jpeg_quality);\u000a        self.jpeg_quality_request_template = ko.observable(values.jpeg_quality_request_template);\u000a\u000a        self.is_testing_custom_image_preferences = ko.observable(false)\u000a        self.applySettingsToCamera = function (settings_type) {\u000a            // If no guid is supplied, this is a new profile.  We will need to know that later when we push/update our observable array\u000a            var data = {\u000a                'profile': ko.toJS(self),\u000a                'settings_type':settings_type\u000a            };\u000a            $.ajax({\u000a                url: "./plugin/octolapse/applyCameraSettings",\u000a                type: "POST",\u000a                data: JSON.stringify(data),\u000a                contentType: "application/json",\u000a                dataType: "json",\u000a                success: function (results) {\u000a                    if(results.success) {\u000a                        var options = {\u000a                            title: 'Success',\u000a                            text: 'Camera settings were applied with no errors.',\u000a                            type: 'success',\u000a                            hide: true,\u000a                            addclass: "octolapse"\u000a                        };\u000a                        Octolapse.displayPopupForKey(options, "camera_settings_success");\u000a                    }\u000a                },\u000a                error: function (XMLHttpRequest, textStatus, errorThrown) {\u000a                    var options = {\u000a                        title: 'Error',\u000a                        text: "Unable to update the camera settings!  Status: " + textStatus + ".  Error: " + errorThrown,\u000a                        type: 'error',\u000a                        hide: true,\u000a                        addclass: "octolapse"\u000a                    };\u000a                    Octolapse.displayPopupForKey(options,"camera_settings_success");\u000a\u000a                }\u000a            });\u000a        };\u000a\u000a        self.toggleCamera = function(){\u000a            // If no guid is supplied, this is a new profile.  We will need to know that later when we push/update our observable array\u000a            //console.log("Running camera request.");\u000a            var data = { 'guid': self.guid(), "client_id": Octolapse.Globals.client_id };\u000a            $.ajax({\u000a                url: "./plugin/octolapse/toggleCamera",\u000a                type: "POST",\u000a                data: JSON.stringify(data),\u000a                contentType: "application/json",\u000a                dataType: "json",\u000a                success: function (results) {\u000a                    if (results.success) {\u000a                        self.enabled(results.enabled);\u000a                    }\u000a                    else {\u000a                        alert(results.error);\u000a                    }\u000a\u000a                },\u000a                error: function (XMLHttpRequest, textStatus, errorThrown) {\u000a                    alert("Unable to toggle the camera:(  Status: " + textStatus + ".  Error: " + errorThrown);\u000a                }\u000a            });\u000a        }\u000a\u000a        self.testCamera = function () {\u000a            // If no guid is supplied, this is a new profile.  We will need to know that later when we push/update our observable array\u000a            //console.log("Running camera request.");\u000a            var data = { 'profile': ko.toJS(self) };\u000a            $.ajax({\u000a                url: "./plugin/octolapse/testCamera",\u000a                type: "POST",\u000a                data: JSON.stringify(data),\u000a                contentType: "application/json",\u000a                dataType: "json",\u000a                success: function (results) {\u000a                    if (results.success){\u000a\u000a                        var options = {\u000a                            title: 'Camera Test Success',\u000a                            text: 'A request for a snapshot came back OK.  The camera seems to be working!',\u000a                            type: 'success',\u000a                            hide: true,\u000a                            addclass: "octolapse"\u000a                        };\u000a                        Octolapse.displayPopupForKey(options, "camera_settings_success");\u000a                    }\u000a                    else {\u000a                        var options = {\u000a                            title: 'Camera Test Failed',\u000a                            text: 'Errors were detected - ' + results.error,\u000a                            type: 'error',\u000a                            hide: false,\u000a                            addclass: "octolapse"\u000a                        };\u000a                        Octolapse.displayPopupForKey(options, "camera_settings_failed");\u000a                    }\u000a                },\u000a                error: function (XMLHttpRequest, textStatus, errorThrown) {\u000a\u000a                    var options = {\u000a                        title: 'Camera Test Failed',\u000a                        text: "Status: " + textStatus + ".  Error: " + errorThrown,\u000a                        type: 'error',\u000a                        hide: false,\u000a                        addclass: "octolapse"\u000a                    };\u000a                    Octolapse.displayPopupForKey(options, "camera_settings_failed");\u000a                }\u000a            });\u000a        };\u000a\u000a        self.toggleApplySettingsBeforePrint = function () {\u000a\u000a\u000a            if(self.apply_settings_before_print())\u000a            {\u000a                self.apply_settings_before_print(false)\u000a                return;\u000a            }\u000a\u000a            self.is_testing_custom_image_preferences(true);\u000a            // If no guid is supplied, this is a new profile.  We will need to know that later when we push/update our observable array\u000a            //console.log("Running camera request.");\u000a            var data = { 'profile': ko.toJS(self) };\u000a            $.ajax({\u000a                url: "./plugin/octolapse/testCameraSettingsApply",\u000a                type: "POST",\u000a                data: JSON.stringify(data),\u000a                contentType: "application/json",\u000a                dataType: "json",\u000a                success: function (results) {\u000a                    if (results.success){\u000a                        self.apply_settings_before_print(true);\u000a                        $('#camera_profile_apply_settings_before_print').prop("checked",true);\u000a                    }\u000a                    else {\u000a                        var options = {\u000a                            title: 'Unable To Enable Custom Preferences',\u000a                            text: results.error,\u000a                            type: 'error',\u000a                            hide: false,\u000a                            addclass: "octolapse"\u000a                        };\u000a                        Octolapse.displayPopupForKey(options, "camera_settings_failed");\u000a                    }\u000a                },\u000a                error: function (XMLHttpRequest, textStatus, errorThrown) {\u000a\u000a                    var options = {\u000a                        title: 'Unable To Apply Custom Preferences',\u000a                        text: "An unexpected error occurred.  Status: " + textStatus + ".  Error: " + errorThrown,\u000a                        type: 'error',\u000a                        hide: false,\u000a                        addclass: "octolapse"\u000a                    };\u000a                    Octolapse.displayPopupForKey(options, "camera_settings_failed");\u000a                },\u000a                complete: function (){\u000a                    self.is_testing_custom_image_preferences(false);\u000a                }\u000a            });\u000a        };\u000a    };\u000a    Octolapse.CameraProfileValidationRules = {\u000a        rules: {\u000a            camera_type: { required: true },\u000a            exposure_type: { required: true },\u000a            led_1_mode: { required: true},\u000a            powerline_frequency: { required: true},\u000a            snapshot_request_template: { octolapseSnapshotTemplate: true },\u000a            brightness_request_template: { octolapseCameraRequestTemplate: true },\u000a            contrast_request_template: { octolapseCameraRequestTemplate: true },\u000a            saturation_request_template: { octolapseCameraRequestTemplate: true },\u000a            white_balance_auto_request_template: { octolapseCameraRequestTemplate: true },\u000a            gain_request_template: { octolapseCameraRequestTemplate: true },\u000a            powerline_frequency_request_template: { octolapseCameraRequestTemplate: true },\u000a            white_balance_temperature_request_template: { octolapseCameraRequestTemplate: true },\u000a            sharpness_request_template: { octolapseCameraRequestTemplate: true },\u000a            backlight_compensation_enabled_request_template: { octolapseCameraRequestTemplate: true },\u000a            exposure_type_request_template: { octolapseCameraRequestTemplate: true },\u000a            exposure_request_template: { octolapseCameraRequestTemplate: true },\u000a            exposure_auto_priority_enabled_request_template: { octolapseCameraRequestTemplate: true },\u000a            pan_request_template: { octolapseCameraRequestTemplate: true },\u000a            tilt_request_template: { octolapseCameraRequestTemplate: true },\u000a            autofocus_enabled_request_template: { octolapseCameraRequestTemplate: true },\u000a            focus_request_template: { octolapseCameraRequestTemplate: true },\u000a            zoom_request_template: { octolapseCameraRequestTemplate: true },\u000a            led1_mode_request_template: { octolapseCameraRequestTemplate: true },\u000a            led1_frequency_request_template: { octolapseCameraRequestTemplate: true },\u000a            jpeg_quality_request_template: { octolapseCameraRequestTemplate: true }\u000a        },\u000a        messages: {\u000a            name: "Please enter a name for your profile"\u000a        }\u000a    };\u000a\u000a\u000a});\u000a\u000a\u000a\u000a;\u000a
p0
.