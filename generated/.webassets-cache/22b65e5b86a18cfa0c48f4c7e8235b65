V// source: plugin/eeprom_MPSelectMini/js/eeprom_malyan.js\u000a/**\u000a* Created by Salandora on 27.07.2015.\u000a* Modified by Anderson Silva on 08.04.2017.\u000a* Modified by Brian Ruhmann on 08.06.2017\u000a*/\u000a$(function() {\u000a    function EepromMalyanViewModel(parameters) {\u000a        var self = this;\u000a\u000a        self.setRegExVars = function(version) {\u000a            self.eepromM92RegEx = /M92 ([X])(.*)[^0-9]([Y])(.*)[^0-9]([Z])(.*)[^0-9]([E])(.*)/;\u000a            self.eepromM203RegEx = /M203 ([X])(.*)[^0-9]([Y])(.*)[^0-9]([Z])(.*)[^0-9]([E])(.*)/;\u000a            self.eepromM201RegEx = /M201 ([X])(.*)[^0-9]([Y])(.*)[^0-9]([Z])(.*)[^0-9]([E])(.*)/;\u000a            self.eepromM206RegEx = /M206 ([X])(.*)[^0-9]([Y])(.*)[^0-9]([Z])(.*)/;\u000a            self.eepromM200RegEx = /M200 ([D])(.*)/;\u000a            self.eepromM304RegEx = /M304 ([P])(.*)[^0-9]([I])(.*)[^0-9]([D])(.*)/;\u000a            self.eepromM205RegEx = /M205 ([S])(.*)[^0-9]([T])(.*)[^0-9]([B])(.*)[^0-9]([X])(.*)[^0-9]([Z])(.*)[^0-9]([E])(.*)/;\u000a            self.eepromM204RegEx = /M204 ([P])(.*)[^0-9]([R])(.*)[^0-9]([T])(.*)/;\u000a            self.eepromM301RegEx = /M301 ([P])(.*)[^0-9]([I])(.*)[^0-9]([D])(.*)[^0-9]([C])(.*)[^0-9]([L])(.*)/;\u000a        };\u000a\u000a        self.control = parameters[0];\u000a        self.connection = parameters[1];\u000a        self.FIRMWARE_NAME = ko.observable("");\u000a\u000a        self.firmwareRegEx = /NAME[:|.][\u005cs]*([^\u005cs]*)[\u005cs]*VER:[\u005cs]*([^\u005cs]*)/i;\u000a        self.malyanRegEx = /Malyan[^\u005cs]*/i;\u000a\u000a	//So far, this has only been tested with Malyan 2.9 (although other versions will likely work)\u000a	self.testedVersionRegEx = /2.9|3.0|4.0/;\u000a\u000a        self.setRegExVars('lastest');\u000a\u000a        self.isMalyanFirmware = ko.observable(false);\u000a\u000a	//This is only used to display a warning if the version is untested\u000a	self.isTestedVersion = ko.observable(false);\u000a\u000a        self.isConnected = ko.computed(function() {\u000a            return self.connection.isOperational() || self.connection.isPrinting() ||\u000a            self.connection.isReady() || self.connection.isPaused();\u000a        });\u000a\u000a        self.eepromData1 = ko.observableArray([]);\u000a        self.eepromData2 = ko.observableArray([]);\u000a        self.eepromDataSteps = ko.observableArray([]);\u000a        self.eepromDataFRates = ko.observableArray([]);\u000a        self.eepromDataMaxAccel = ko.observableArray([]);\u000a        self.eepromDataAccel = ko.observableArray([]);\u000a        self.eepromDataPID = ko.observableArray([]);\u000a        self.eepromDataPIDB = ko.observableArray([]);\u000a        self.eepromDataHoming = ko.observableArray([]);\u000a        self.eepromDataFilament = ko.observableArray([]);\u000a\u000a        self.onStartup = function() {\u000a            $('#settings_plugin_eeprom_MPSelectMini_link a').on('show', function(e) {\u000a                if (self.isConnected() && !self.isMalyanFirmware()) {\u000a                    self._requestFirmwareInfo();\u000a                }\u000a            });\u000a        };\u000a\u000a        self.firmware_name = function() {\u000a            return self.FIRMWARE_NAME();\u000a        };\u000a\u000a        self.eepromFieldParse = function(line) {\u000a            // M92 steps per unit\u000a            var match = self.eepromM92RegEx.exec(line);\u000a            if (match) {\u000a                self.eepromDataSteps.push({\u000a                    dataType: 'M92 X',\u000a                    label: 'X axis',\u000a                    origValue: match[2],\u000a                    value: match[2],\u000a                    unit: 'mm',\u000a                    description: 'steps per unit'\u000a                });\u000a\u000a                self.eepromDataSteps.push({\u000a                    dataType: 'M92 Y',\u000a                    label: 'Y axis',\u000a                    origValue: match[4],\u000a                    value: match[4],\u000a                    unit: 'mm',\u000a                    description: 'steps per unit'\u000a                });\u000a\u000a                self.eepromDataSteps.push({\u000a                    dataType: 'M92 Z',\u000a                    label: 'Z axis',\u000a                    origValue: match[6],\u000a                    value: match[6],\u000a                    unit: 'mm',\u000a                    description: 'steps per unit'\u000a                });\u000a\u000a                self.eepromDataSteps.push({\u000a                    dataType: 'M92 E',\u000a                    label: 'Extruder',\u000a                    origValue: match[8],\u000a                    value: match[8],\u000a                    unit: 'mm',\u000a                    description: 'steps per unit'\u000a                });\u000a            }\u000a\u000a            // M203 feedrates\u000a            match = self.eepromM203RegEx.exec(line);\u000a            if (match) {\u000a                self.eepromDataFRates.push({\u000a                    dataType: 'M203 X',\u000a                    label: 'X axis',\u000a                    origValue: match[2],\u000a                    value: match[2],\u000a                    unit: 'mm',\u000a                    description: 'rate per unit'\u000a                });\u000a\u000a                self.eepromDataFRates.push({\u000a                    dataType: 'M203 Y',\u000a                    label: 'Y axis',\u000a                    origValue: match[4],\u000a                    value: match[4],\u000a                    unit: 'mm',\u000a                    description: 'rate per unit'\u000a                });\u000a\u000a                self.eepromDataFRates.push({\u000a                    dataType: 'M203 Z',\u000a                    label: 'Z axis',\u000a                    origValue: match[6],\u000a                    value: match[6],\u000a                    unit: 'mm',\u000a                    description: 'rate per unit'\u000a                });\u000a\u000a                self.eepromDataFRates.push({\u000a                    dataType: 'M203 E',\u000a                    label: 'Extruder',\u000a                    origValue: match[8],\u000a                    value: match[8],\u000a                    unit: 'mm',\u000a                    description: 'rate per unit'\u000a                });\u000a            }\u000a\u000a            // M201 Maximum Acceleration (mm/s2)\u000a            match = self.eepromM201RegEx.exec(line);\u000a            if (match) {\u000a                self.eepromDataMaxAccel.push({\u000a                    dataType: 'M201 X',\u000a                    label: 'X axis',\u000a                    origValue: match[2],\u000a                    value: match[2],\u000a                    unit: 'mm/s2',\u000a                    description: ''\u000a                });\u000a\u000a                self.eepromDataMaxAccel.push({\u000a                    dataType: 'M201 Y',\u000a                    label: 'Y axis',\u000a                    origValue: match[4],\u000a                    value: match[4],\u000a                    unit: 'mm/s2',\u000a                    description: ''\u000a                });\u000a\u000a                self.eepromDataMaxAccel.push({\u000a                    dataType: 'M201 Z',\u000a                    label: 'Z axis',\u000a                    origValue: match[6],\u000a                    value: match[6],\u000a                    unit: 'mm/s2',\u000a                    description: ''\u000a                });\u000a\u000a                self.eepromDataMaxAccel.push({\u000a                    dataType: 'M201 E',\u000a                    label: 'Extruder',\u000a                    origValue: match[8],\u000a                    value: match[8],\u000a                    unit: 'mm/s2',\u000a                    description: ''\u000a                });\u000a            }\u000a\u000a            // M206 Home offset\u000a            match = self.eepromM206RegEx.exec(line);\u000a            if (match) {\u000a                self.eepromDataHoming.push({\u000a                    dataType: 'M206 X',\u000a                    label: 'X axis',\u000a                    origValue: match[2],\u000a                    value: match[2],\u000a                    unit: 'mm',\u000a                    description: ''\u000a                });\u000a\u000a                self.eepromDataHoming.push({\u000a                    dataType: 'M206 Y',\u000a                    label: 'Y axis',\u000a                    origValue: match[4],\u000a                    value: match[4],\u000a                    unit: 'mm',\u000a                    description: ''\u000a                });\u000a\u000a                self.eepromDataHoming.push({\u000a                    dataType: 'M206 Z',\u000a                    label: 'Z axis',\u000a                    origValue: match[6],\u000a                    value: match[6],\u000a                    unit: 'mm',\u000a                    description: ''\u000a                });\u000a            }\u000a\u000a\u000a\u000a            // Filament diameter\u000a            match = self.eepromM200RegEx.exec(line);\u000a            if (match) {\u000a                if (self.eepromDataFilament().length === 0) {\u000a                    self.eepromDataFilament.push({\u000a                        dataType: 'M200 D',\u000a                        label: 'Diameter',\u000a                        origValue: match[2],\u000a                        value: match[2],\u000a                        unit: 'mm',\u000a                        description: ''\u000a                    });\u000a                }\u000a            }\u000a\u000a            // M304 PID settings\u000a            match = self.eepromM304RegEx.exec(line);\u000a            if (match) {\u000a                self.eepromDataPIDB.push({\u000a                    dataType: 'M304 P',\u000a                    label: 'Bed Kp',\u000a                    origValue: match[2],\u000a                    value: match[2],\u000a                    unit: 'term',\u000a                    description: ''\u000a                });\u000a\u000a                self.eepromDataPIDB.push({\u000a                    dataType: 'M304 I',\u000a                    label: 'Ki',\u000a                    origValue: match[4],\u000a                    value: match[4],\u000a                    unit: 'term',\u000a                    description: ''\u000a                });\u000a\u000a                self.eepromDataPIDB.push({\u000a                    dataType: 'M304 D',\u000a                    label: 'Kd',\u000a                    origValue: match[6],\u000a                    value: match[6],\u000a                    unit: 'term',\u000a                    description: ''\u000a                });\u000a            }\u000a\u000a            match = self.eepromM205RegEx.exec(line);\u000a            if (match) {\u000a                self.eepromData1.push({\u000a                    dataType: 'M205 S',\u000a                    label: 'Min feedrate',\u000a                    origValue: match[2],\u000a                    value: match[2],\u000a                    unit: 'mm/s',\u000a                    description: ''\u000a                });\u000a                 self.eepromData1.push({\u000a                    dataType: 'M205 T',\u000a                    label: 'Min travel',\u000a                    origValue: match[4],\u000a                    value: match[4],\u000a                    unit: 'mm/s',\u000a                    description: ''\u000a                });\u000a\u000a                self.eepromData1.push({\u000a                    dataType: 'M205 B',\u000a                    label: 'Min segment',\u000a                    origValue: match[6],\u000a                    value: match[6],\u000a                    unit: 'mm/s',\u000a                    description: ''\u000a                });\u000a\u000a                self.eepromData2.push({\u000a                    dataType: 'M205 X',\u000a                    label: 'Max X jerk',\u000a                    origValue: match[8],\u000a                    value: match[8],\u000a                    unit: 'mm/s',\u000a                    description: ''\u000a                });\u000a\u000a                self.eepromData2.push({\u000a                    dataType: 'M205 Y',\u000a                    label: 'Max Y jerk',\u000a                    origValue: match[8],\u000a                    value: match[8],\u000a                    unit: 'mm/s',\u000a                    description: ''\u000a                });\u000a\u000a                self.eepromData2.push({\u000a                    dataType: 'M205 Z',\u000a                    label: 'Max Z jerk',\u000a                    origValue: match[10],\u000a                    value: match[10],\u000a                    unit: 'mm/s',\u000a                    description: ''\u000a                });\u000a\u000a                self.eepromData2.push({\u000a                    dataType: 'M205 E',\u000a                    label: 'Max E jerk',\u000a                    origValue: match[12],\u000a                    value: match[12],\u000a                    unit: 'mm/s',\u000a                    description: ''\u000a                });\u000a            }            \u000a \u000a            // M204 Acceleration\u000a            match = self.eepromM204RegEx.exec(line);\u000a            if (match) {\u000a                self.eepromDataAccel.push({\u000a                    dataType: 'M204 P',\u000a                    label: 'Printing moves',\u000a                    origValue: match[2],\u000a                    value: match[2],\u000a                    unit: 'mm/s2',\u000a                    description: ''\u000a                });\u000a\u000a                self.eepromDataAccel.push({\u000a                    dataType: 'M204 R',\u000a                    label: 'Retract',\u000a                    origValue: match[4],\u000a                    value: match[4],\u000a                    unit: 'mm/s2',\u000a                    description: ''\u000a                });\u000a\u000a                self.eepromDataAccel.push({\u000a                    dataType: 'M204 T',\u000a                    label: 'Travel',\u000a                    origValue: match[6],\u000a                    value: match[6],\u000a                    unit: 'mm/s2',\u000a                    description: ''\u000a                });\u000a            }\u000a\u000a            // M301 PID settings\u000a            match = self.eepromM301RegEx.exec(line);\u000a            if (match) {\u000a                self.eepromDataPID.push({\u000a                    dataType: 'M301 P',\u000a                    label: 'Hotend Kp',\u000a                    origValue: match[2],\u000a                    value: match[2],\u000a                    unit: 'term',\u000a                    description: ''\u000a                });\u000a\u000a                self.eepromDataPID.push({\u000a                    dataType: 'M301 I',\u000a                    label: 'Ki',\u000a                    origValue: match[4],\u000a                    value: match[4],\u000a                    unit: 'term',\u000a                    description: ''\u000a                });\u000a\u000a                self.eepromDataPID.push({\u000a                    dataType: 'M301 D',\u000a                    label: 'Kd',\u000a                    origValue: match[6],\u000a                    value: match[6],\u000a                    unit: 'term',\u000a                    description: ''\u000a                });\u000a\u000a                self.eepromDataPID.push({\u000a                    dataType: 'M301 C',\u000a                    label: 'Kc',\u000a                    origValue: match[8],\u000a                    value: match[8],\u000a                    unit: 'term',\u000a                    description: ''\u000a                });\u000a\u000a                self.eepromDataPID.push({\u000a                    dataType: 'M301 L',\u000a                    label: 'LPQ',\u000a                    origValue: match[10],\u000a                    value: match[10],\u000a                    unit: 'len',\u000a                    description: ''\u000a                });\u000a            }\u000a\u000a        };\u000a\u000a        self.fromHistoryData = function(data) {\u000a            _.each(data.logs, function(line) {\u000a                var match = self.firmwareRegEx.exec(line);\u000a                if (match !== null) {\u000a                    self.FIRMWARE_NAME(match[1] + ' ' + match[2]);\u000a                    self.setRegExVars(self.firmware_name());\u000a                    console.debug('Firmware: ' + self.firmware_name());\u000a                    if (self.malyanRegEx.exec(match[0])){\u000a                        self.isMalyanFirmware(true);\u000a                        if (self.testedVersionRegEx.exec(match[2]))\u000a			        self.isTestedVersion(true);\u000a		    }\u000a                }\u000a            });\u000a        };\u000a\u000a        self.fromCurrentData = function(data) {\u000a            if (!self.isMalyanFirmware()) {\u000a                _.each(data.logs, function (line) {\u000a                    var match = self.firmwareRegEx.exec(line);\u000a                    if (match) {\u000a                        self.FIRMWARE_NAME(match[1] + ' ' + match[2]);\u000a                        self.setRegExVars(self.firmware_name());\u000a                        console.debug('Firmware: ' + self.firmware_name());\u000a                        if (self.malyanRegEx.exec(match[0])){\u000a                            self.isMalyanFirmware(true);\u000a			    if (self.testedVersionRegEx.exec(match[2]))\u000a			        self.isTestedVersion(true);\u000a			}\u000a                    }\u000a                });\u000a            }\u000a            else\u000a            {\u000a                _.each(data.logs, function (line) {\u000a                    self.eepromFieldParse(line);\u000a                });\u000a            }\u000a        };\u000a\u000a        self.eepromDataCount = ko.computed(function() {\u000a            return (self.eepromData1().length + self.eepromData2().length) > 0;\u000a        });\u000a\u000a        self.eepromDataStepsCount = ko.computed(function() {\u000a            return self.eepromDataSteps().length > 0;\u000a        });\u000a\u000a        self.eepromDataFRatesCount = ko.computed(function() {\u000a            return self.eepromDataFRates().length > 0;\u000a        });\u000a\u000a        self.eepromDataMaxAccelCount = ko.computed(function() {\u000a            return self.eepromDataMaxAccel().length > 0;\u000a        });\u000a\u000a        self.eepromDataAccelCount = ko.computed(function() {\u000a            return self.eepromDataAccel().length > 0;\u000a        });\u000a\u000a        self.eepromDataPIDCount = ko.computed(function() {\u000a            return (self.eepromDataPID().length + self.eepromDataPIDB().length) > 0;\u000a        });\u000a\u000a        self.eepromDataHomingCount = ko.computed(function() {\u000a            return self.eepromDataHoming().length > 0;\u000a        });\u000a\u000a        self.eepromDataFilamentCount = ko.computed(function() {\u000a            return self.eepromDataFilament().length > 0;\u000a        });\u000a\u000a        self.onEventConnected = function() {\u000a            self._requestFirmwareInfo();\u000a            setTimeout(function() {self.loadEeprom(); }, 5000);\u000a        };\u000a\u000a        self.onStartupComplete = function() {\u000a            setTimeout(function() {self.loadEeprom(); }, 5000);\u000a        };\u000a\u000a        self.onEventDisconnected = function() {\u000a            self.isMalyanFirmware(false);\u000a        };\u000a\u000a        self.loadEeprom = function() {\u000a            self.eepromData1([]);\u000a            self.eepromData2([]);\u000a            self.eepromDataSteps([]);\u000a            self.eepromDataFRates([]);\u000a            self.eepromDataMaxAccel([]);\u000a            self.eepromDataAccel([]);\u000a            self.eepromDataPID([]);\u000a            self.eepromDataPIDB([]);\u000a            self.eepromDataHoming([]);\u000a            self.eepromDataFilament([]);\u000a\u000a            self._requestEepromData();\u000a        };\u000a\u000a        self.saveEeprom = function()  {\u000a            var cmd = 'M500';\u000a            var eepromData = self.eepromData1();\u000a            _.each(eepromData, function(data) {\u000a                if (data.origValue != data.value) {\u000a                    self._requestSaveDataToEeprom(data.dataType, data.value);\u000a                    data.origValue = data.value;\u000a                }\u000a            });\u000a\u000a            eepromData = self.eepromData2();\u000a            _.each(eepromData, function(data) {\u000a                if (data.origValue != data.value) {\u000a                    self._requestSaveDataToEeprom(data.dataType, data.value);\u000a                    data.origValue = data.value;\u000a                }\u000a            });\u000a\u000a            eepromData = self.eepromDataSteps();\u000a            _.each(eepromData, function(data) {\u000a                if (data.origValue != data.value) {\u000a                    self._requestSaveDataToEeprom(data.dataType, data.value);\u000a                    data.origValue = data.value;\u000a                }\u000a            });\u000a\u000a            eepromData = self.eepromDataFRates();\u000a            _.each(eepromData, function(data) {\u000a                if (data.origValue != data.value) {\u000a                    self._requestSaveDataToEeprom(data.dataType, data.value);\u000a                    data.origValue = data.value;\u000a                }\u000a            });\u000a\u000a            eepromData = self.eepromDataMaxAccel();\u000a            _.each(eepromData, function(data) {\u000a                if (data.origValue != data.value) {\u000a                    self._requestSaveDataToEeprom(data.dataType, data.value);\u000a                    data.origValue = data.value;\u000a                }\u000a            });\u000a\u000a            eepromData = self.eepromDataAccel();\u000a            _.each(eepromData, function(data) {\u000a                if (data.origValue != data.value) {\u000a                    self._requestSaveDataToEeprom(data.dataType, data.value);\u000a                    data.origValue = data.value;\u000a                }\u000a            });\u000a\u000a            eepromData = self.eepromDataPID();\u000a            _.each(eepromData, function(data) {\u000a                if (data.origValue != data.value) {\u000a                    self._requestSaveDataToEeprom(data.dataType, data.value);\u000a                    data.origValue = data.value;\u000a                }\u000a            });\u000a\u000a            eepromData = self.eepromDataPIDB();\u000a            _.each(eepromData, function(data) {\u000a                if (data.origValue != data.value) {\u000a                    self._requestSaveDataToEeprom(data.dataType, data.value);\u000a                    data.origValue = data.value;\u000a                }\u000a            });\u000a\u000a            eepromData = self.eepromDataHoming();\u000a            _.each(eepromData, function(data) {\u000a                if (data.origValue != data.value) {\u000a                    self._requestSaveDataToEeprom(data.dataType, data.value);\u000a                    data.origValue = data.value;\u000a                }\u000a            });\u000a\u000a            eepromData = self.eepromDataFilament();\u000a            _.each(eepromData, function(data) {\u000a                if (data.origValue != data.value) {\u000a                    self._requestSaveDataToEeprom(data.dataType, data.value);\u000a                    data.origValue = data.value;\u000a                }\u000a            });\u000a\u000a            self.control.sendCustomCommand({ command: cmd });\u000a\u000a            alert('EEPROM data stored.');\u000a        };\u000a\u000a        self._requestFirmwareInfo = function() {\u000a            self.control.sendCustomCommand({ command: "M115" });\u000a        };\u000a\u000a        self._requestEepromData = function() {\u000a            self.control.sendCustomCommand({ command: "M503" });\u000a        };\u000a\u000a        self._requestSaveDataToEeprom = function(data_type, value) {\u000a            var cmd = data_type + value;\u000a            self.control.sendCustomCommand({ command: cmd });\u000a        };\u000a    }\u000a\u000a    OCTOPRINT_VIEWMODELS.push([\u000a        EepromMalyanViewModel,\u000a        ["controlViewModel", "connectionViewModel"],\u000a        "#settings_plugin_eeprom_MPSelectMini"\u000a    ]);\u000a});\u000a\u000a;\u000a
p0
.